# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-26 09:50+0900\n"
"PO-Revision-Date: 2025-03-30 01:50+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/model.rst:4
msgid "Model-Based Rendering"
msgstr "モデルベースのレンダリング"

#: ../../source/model.rst:6
msgid ""
"While Ren'Py is primarily used with two dimensional rectangular images that "
"are common in visual novels, underneath the hood it has a model-based "
"renderer intended to to take advantage of features found in modern GPUs. "
"This allows for a number of visual effects that would not otherwise be "
"possible."
msgstr ""
"多くのビジュアルノベルのように Rend'Py では 2 次元の矩形画像が主に使用されて"
"いますが、近代的な GPU に見られる機能を利用できるようにしたモデルベースのレン"
"ダラーが内部にはあります。これにより他では出来ない多くのビジュアルエフェクト"
"を可能にします。"

#: ../../source/model.rst:11
msgid ""
"As a warning, this is one of the most advanced features available in Ren'Py. "
"In many cases, it's not necessary to understand how model-based rendering "
"works behind the scenes - features like :tpref:`matrixcolor` and Live2D "
"support can be used without understanding how Model-Based rendering works, "
"and more such features will be added to the understanding. This "
"documentation is intended for very advanced creators, and for developers "
"looking to add to Ren'Py itself."
msgstr ""
"警告すると、これは Ren'Py の最も高度な機能の1つです。多くの場合でモデルベース"
"のレンダリングが背後でどのように動いているかを理解する必要はなく、 :tpref:"
"`matrixcolor` や Live2D のような機能のサポートはモデルベースのレンダリングの"
"動作を理解しなくても使用できます。しかし理解すればそのような機能を追加できる"
"でしょう。このドキュメントはかなり高度な制作者または Ren'Py 本体に機能を追加"
"したい開発者を対象とします。"

#: ../../source/model.rst:19
msgid ""
"Model-Based Rendering is one of the most advanced features in Ren'Py, and "
"this documentation may be hard to understand without first looking at the "
"OpenGL, OpenGL ES, GLSL, and GLSL ES manual. What's more, since there are "
"portions of the models that are passed directly to your GPU drivers, which "
"may accept erroneous inputs, it's important to check on multiple kinds of "
"hardware."
msgstr ""
"モデルベースのレンダリングは Ren'Py の最も高度な機能の1つであり、このドキュメ"
"ントは先に OpenGL, OpenGL ES, GLSL ES のマニュアルを読んでおかなければ理解が"
"難しいでしょう。さらに直接 GPU ドライバーに渡される部分があり、それらは間違っ"
"た入力も受け付けてしまうので、複数種類のハードウェアでのチェックが重要となり"
"ます。"

#: ../../source/model.rst:28
msgid "Models, Renders, and Drawing Operations"
msgstr "モデル、レンダリング、描画処理"

#: ../../source/model.rst:30
msgid ""
"The fundamental thing that Ren'Py draws to the screen is a Model. A model "
"consists of the following things:"
msgstr ""
"Ren'Pyが画面に描画する基本的なものはモデルです。モデルは次の要素で構成されま"
"す :"

#: ../../source/model.rst:33
msgid ""
"A Mesh of one or more triangles. A triangle consists of three vertices "
"(corners), each of which contains a position in two or three-dimensional "
"space, and may contain additional information, most commonly texture "
"coordinates."
msgstr ""
"1つ以上の三角形のメッシュ。三角は3つの角となる頂点で構成され、それぞれ2次元、"
"または三次元の位置を格納し、追加情報を持つ場合もあります。追加情報の多くはテ"
"クスチャの座標です。"

#: ../../source/model.rst:38
msgid ""
"Zero or more textures, with the precise number allowed being limited by the "
"GPUs your game can run on. All GPUs should support at least three textures "
"per model. A texture is a rectangle containing image data that's been loaded "
"on the GPU, either directly or using a render-to-texture operation."
msgstr ""
"0枚以上のテクスチャー。ゲームで動作可能な正確な枚数は GPU によって制限されま"
"す。すべての GPU は 1 つのモデルにつき最低 3 つのテクスチャをサポートするはず"
"です。テクスチャとは GPU に直接または render-to-texture 操作でロードされた 画"
"像データを含む矩形のことです。"

#: ../../source/model.rst:43
msgid ""
"A list of shader part names. Ren'Py uses these shader parts to create "
"shaders, which are programs that are run on the GPU to render the model. "
"Shader part names can be prefixed with a \"-\" to prevent that shader part "
"from being used."
msgstr ""
"シェーダーパーツ名の一覧。Ren'Py はこれらのシェーダーパーツを使って、モデルを"
"レンダリングするために GPU 上で実行されるプログラムであるシェーダーを作成しま"
"す。シェーダーパーツの名前の前に \"-\" をつけると、そのシェーダーパーツを使用"
"しないようにできます。"

#: ../../source/model.rst:47
msgid ""
"Uniform values. A uniform is additional data that is the same throughout the "
"model. For example, when a model represents a solid color, the color is a "
"uniform."
msgstr ""
"uniform 値。 uniform は、そのモデル全体で一定である追加データです。例えばその"
"モデルが solid カラーを表現するなら、その色が uniform です。"

#: ../../source/model.rst:51
msgid ""
"GL properties. GL properties are flags that further control how things are "
"rendered, such as the minification/magnification modes and the color mask."
msgstr ""
"GL プロパティー。GL プロパティーは minification/magnification モードやカラー"
"マスクのようなレンダリング方法をさらに制御するためのフラグです。"

#: ../../source/model.rst:55
msgid ""
"As Ren'Py usually draws more than one thing to the screen, it creates a tree "
"of :class:`Render` objects. These Render objects may have Models or other "
"Renders as children. (A Render object can also be turned into a Model. as "
"described below.) A Render contains:"
msgstr ""
"Ren'Py は通常複数のものを画面に描画するので、 :class:`Render` オブジェクトの"
"ツリーを作成します。これらのレンダーオブジェクトは、モデルや他のレンダーを子"
"として持てます ( 後述するように、レンダーオブジェクトをモデルにもできます)。"
"レンダーは以下のものを含みます。 :"

#: ../../source/model.rst:60
msgid ""
"A list of children, including a 2-dimensional offset that is applied to each "
"child."
msgstr "各子に対して適用される2次元のオフセットを含む子のリスト"

#: ../../source/model.rst:63
msgid ""
"A :class:`Matrix` that describes how the children are transformed in three-"
"dimensional space."
msgstr ""
"3次元空間において、子がどのように transform されるかを記述した :class:"
"`Matrix`"

#: ../../source/model.rst:66
msgid ""
"Lists of shader part names, uniforms, and GL properties that are applied to "
"the Models when being drawn."
msgstr ""
"描画時にモデルに適用されるシェーダーパーツ名のリスト、uniform、GLプロパティー"

#: ../../source/model.rst:69
msgid ""
"Flags that determine if the drawable-space clipping polygon should be "
"updated."
msgstr ""
"ポリゴンを切り取る描画可能空間が更新されるべきかどうかを決定するフラグ。"

#: ../../source/model.rst:72
msgid ""
"Ren'Py draws the screen by performing a depth-first walk through the tree of "
"Renders, until a Model is encountered. During this walk, Ren'Py updates a "
"matrix transforming the location of the Model, a clipping polygon, and lists "
"of shader parts, uniforms, and GL properties. When a Model is encountered as "
"part of this walk, the appropriate shader program is activated on the GPU, "
"all information is transferred, and a drawing operation occurs."
msgstr ""
"Ren'Py は、レンダーのツリーを深度優先で探索し、モデルに出会うまで画面を描画し"
"ます。この探索の間、Ren'Pyはモデルの位置を transform する matrix, ポリゴンの"
"切り取り、シェーダーパーツのリスト、uniform、gl プロパティーを更新します。こ"
"の探索の過程でモデルに遭遇すると、適切なシェーダプログラムが GPU 上で起動さ"
"れ、すべての情報が渡され、描画処理が実行されます。"

#: ../../source/model.rst:81
msgid "Where Models are Created"
msgstr "どこでモデルが作成されるか"

#: ../../source/model.rst:83
msgid ""
"Ren'Py creates Models automatically as part of its normal operation. The "
"main reason to understand where models are created is that models correspond "
"to drawing operations, and hence are the units that shaders are applied to."
msgstr ""
"Ren'Py は通常の操作の一環として、自動的にモデルを作成します。モデルがどこで作"
"られるかを理解する主な動機は、モデルが描画処理に対応し、それゆえシェーダーが"
"適用される単位となるからです。"

#: ../../source/model.rst:91
msgid "Images and Image Manipulators"
msgstr "画像と画像マニピュレータ"

#: ../../source/model.rst:89
msgid ""
"These create a model with a mesh containing two triangles that cover the "
"rectangle of the image. The mesh contains texture coordinates. The model "
"uses the \"renpy.texture\" shader."
msgstr ""
"これらはメッシュを持つモデルを作成し、そのメッシュには画像の矩形をカバーする2"
"つの三角形を含みます。そのメッシュにはテクスチャ座標も含みます。このモデルは "
"\"renpy.texture\" シェーダを使用します。"

#: ../../source/model.rst:96
msgid ":func:`Solid`"
msgstr ":func:`Solid`"

#: ../../source/model.rst:94
msgid ""
"The Solid displayable creates a mesh containing two triangles, and no "
"texture coordinates. The model uses the \"renpy.solid\" shader, with the "
"color placed in the ``u_renpy_solid_color`` uniform."
msgstr ""
"Solid Displayable は 2 つの三角形を含むメッシュを作成し、テクスチャ座標はあり"
"ません。このモデルは \"renpy.solid \"シェーダーを使用し、その色は "
"``u_renpy_solid_color`` の uniform に配置されています。"

#: ../../source/model.rst:100
msgid ""
":func:`Dissolve`, :func:`ImageDissolve`, :func:`AlphaDissolve`, :func:"
"`Pixellate`, :func:`AlphaMask`, :func:`Flatten`"
msgstr ""
":func:`Dissolve`, :func:`ImageDissolve`, :func:`AlphaDissolve`, :func:"
"`Pixellate`, :func:`AlphaMask`, :func:`Flatten`"

#: ../../source/model.rst:99
msgid ""
"Each of these transforms and displayables creates a Model with a mesh, "
"shaders, and uniforms as is needed for its purposes."
msgstr ""
"これらの transform と Displayable はそれぞれその目的に必要なメッシュ、シェー"
"ダー、 uniform を持つモデルを作成します。"

#: ../../source/model.rst:104
msgid "Live2D"
msgstr "Live2D"

#: ../../source/model.rst:103
msgid ""
"Live2D displayables may created multiple Models when rendered, generally one "
"Model for each layer."
msgstr ""
"Live2D Displayable はレンダリング時に複数のモデルを作成し一般的にレイヤーごと"
"に1つのモデルがあります。"

#: ../../source/model.rst:115
msgid ":func:`Transform` and ATL"
msgstr ":func:`Transform` と ATL"

#: ../../source/model.rst:107
msgid ""
"A Transform creates a model if :tpref:`mesh` is True, or if :tpref:`blur` is "
"being used. In this case, the children of the Transform are rendered to "
"textures, with the mesh of the first texture being used for the mesh "
"associated with the model."
msgstr ""
":tpref:`mesh` が True または :tpref:`blur` が使用されているなら、 Transform "
"はモデルを作成します。この場合、Transform の子はテクスチャにレンダリングさ"
"れ、そのモデルに関連するメッシュとして最初のテクスチャのメッシュが使用されま"
"す。"

#: ../../source/model.rst:112
msgid ""
"Not every transform creates a Model. Some transforms will simply add shaders "
"and uniforms to a Render (such as transforms that use :tpref:`blur` or :"
"tpref:`alpha`). Other transforms simply affect geometry."
msgstr ""
"すべての transform がモデルを作成するわけではありません。いくつかの "
"transform は単に Render にシェーダーや uniform を追加するだけです ( :tpref:"
"`blur` や :tpref:`alpha` を使用する transform など ) 。その他の transform は"
"単純に幾何学的な影響を与えるものです。"

#: ../../source/model.rst:121
msgid ":class:`Render`"
msgstr ":class:`Render`"

#: ../../source/model.rst:118
msgid ""
"A Transform creates a model if its ``mesh`` attribute is True. In this case, "
"the children of the Render are rendered to textures, with the mesh of the "
"first texture being used for the mesh associated with the model."
msgstr ""
"transform は ``mesh`` attribute が True ならモデルを作成します。この場合、そ"
"の Render の子はテクスチャにレンダリングされ、そのモデルに関連するメッシュと"
"して最初のテクスチャのメッシュが使用されます。"

#: ../../source/model.rst:123
msgid ""
"It's expected that Ren'Py will add more ways of creating models in the "
"future."
msgstr ""
"将来的にモデルを作成するさらに他の方法が Ren'Py に追加されると期待されます。"

#: ../../source/model.rst:127
msgid "Shader Program Generation"
msgstr "シェーダープログラムの生成"

#: ../../source/model.rst:129
msgid ""
"Ren'Py generates a shader program by first assembling a list of shader part "
"names. This list consists of \"renpy.geometry\", the list of shader parts "
"taken from Renders, and the list of shader parts found in the Model being "
"drawn."
msgstr ""
"Ren'Py はまずシェーダーパーツ名のリストを組み立てて、シェーダープログラムを生"
"成します。このリストは、 \"renpy.geometry\", レンダーから取得したシェーダー"
"パーツのリスト、描画中のModelにあるシェーダーパーツのリストで構成されていま"
"す。"

#: ../../source/model.rst:134
msgid ""
"The shader parts are then deduplicated. If a shader part begins with \"-\", "
"it is removed from the list, as is the rest of that part without the leading "
"\"-\". (So \"-renpy.geometry\" will cause itself and \"renpy.geometry\" to "
"be removed.)"
msgstr ""
"その後、シェーダーパーツは重複排除されます。 \"-\" で始まるシェーダーパーツは"
"リストから削除され、先頭の \"-\" を除いたものと同じシェーダーパーツも削除され"
"ます ( つまり \"-renpy.geometry\" はそれ自身と \"renpy.geometry\" を削除しま"
"す ) 。"

#: ../../source/model.rst:139
msgid ""
"Ren'Py then takes the list of shader parts, and retrieves lists of "
"variables, functions, vertex shader parts, and fragment shader parts. These "
"are, in turn, used to generate the source code for shaders, with the parts "
"of the vertex and fragment shaders being included in low-number to high-"
"number priority order."
msgstr ""
"続いて Ren'Py は、シェーダーパーツのリストを受け取り、変数、関数、 vertex "
"シェーダーパーツ、フラグメントシェーダーパーツのリストを取得します。これらは"
"順番にシェーダーのソースコード生成に使われます。 vertex シェーダーとフラグメ"
"ントシェーダーのパーツは、番号の小さいものから大きいものへと優先順位をつけて"
"含まれます。"

#: ../../source/model.rst:144
msgid ""
"This means that any variable created by one of the shaders will be "
"accessible by every other fragment from any other shader in the list of "
"shader parts. There is no scope like in Python functions to protect "
"interference between shaders."
msgstr ""
"つまり、あるシェーダで作成された変数は、そのシェーダパーツのリストにある他の"
"シェーダから成るあらゆるパーツからアクセスできるようになります。 Python の関"
"数のように、シェーダ間の干渉を防ぐためのスコープは存在しません。"

#: ../../source/model.rst:149
msgid ""
"Ren'Py keeps a cache of all combinations of shader parts that have ever been "
"used in game/cache/shaders.txt, and loads them at startup. If major changes "
"in shader use occur, this file should be edited or deleted so it can be re-"
"created with valid data."
msgstr ""
"Ren'Py はこれまでに使用されたすべてのシェーダーパーツの組み合わせを game/"
"cache/shaders.txt にキャッシュしておき、起動時にそれらを読み込みます。シェー"
"ダーの使用に大きな変更があった場合は、このファイルを編集または削除して、有効"
"なデータで再作成できるようするべきです。"

#: ../../source/model.rst:158
msgid "Creating a Custom Shader"
msgstr "カスタムシェーダーの作成"

#: ../../source/model.rst:160
msgid ""
"New shader parts can be created by calling the renpy.register_shader "
"function and supplying portions of GLSL shaders."
msgstr ""
"renpy.register_shader 関数を呼び出して GLSL シェーダーの部品を提供すると新し"
"いシェーダーパーツが作成できます。"

#: ../../source/model.rst:163
msgid ""
"Generally, shader parts should be of the form \"namespace.part\", such as "
"\"mygame.recolor\" or \"mylibrary.warp\". Names beginning with \"renpy.\" or "
"\"live2d.\" are reserved for Ren'Py, as are names beginning with _."
msgstr ""
"一般的に、シェーダーパーツは \"mygame.recolor\" や \"mylibrary.warp\" のよう"
"な \"namespace.part\" の形式であるべきです。 \"renpy.\" や \"live2d.\" で始ま"
"る名前は _ で始まる始まるもの同様に Ren'Py で予約されています。"

#: ../../source/inc/register_shader:5
msgid ""
"This registers a shader part. This takes `name`, and then keyword arguments."
msgstr ""
"これはシェーダーパーツの登録をします。 `name` とその後に続くキーワード引数を"
"受け取ります。"

#: ../../source/inc/model_displayable:45 ../../source/inc/model_displayable:87
#: ../../source/inc/register_shader:10
msgid "`name`"
msgstr "`name`"

#: ../../source/inc/register_shader:9
msgid ""
"A string giving the name of the shader part. Names starting with an "
"underscore or \"renpy.\" are reserved for Ren'Py."
msgstr ""
"登録するシェーダーパーツの名前の文字列です。アンダースコアや \"renpy.\" で始"
"まる名前は Ren'Py で予約されています。"

#: ../../source/inc/register_shader:21
msgid "`variables`"
msgstr "`variables`"

#: ../../source/inc/register_shader:13
msgid ""
"The variables used by the shader part. These should be listed one per line, "
"a storage (uniform, attribute, or varying) followed by a type, name, and "
"semicolon. For example::"
msgstr ""
"登録するシェーダーパーツで使用される変数です。これらは行ごとに (uniform や "
"attribute, varying のような)ストレージに続いて、型、セミコロンとなるべきで"
"す。例 ::"

#: ../../source/inc/register_shader:25
msgid "`vertex_functions`"
msgstr "`vertex_functions`"

#: ../../source/inc/register_shader:24
msgid ""
"If given, a string containing functions that will be included in the vertex "
"shader."
msgstr "指定するなら vertex シェーダーに含まれる関数を含める文字列です。"

#: ../../source/inc/register_shader:29
msgid "`fragment_functions`"
msgstr "`fragment_functions`"

#: ../../source/inc/register_shader:28
msgid ""
"If given, a string containing functions that will be included in the "
"fragment shader."
msgstr "指定するなら fragment シェーダーに含まれる関数を含める文字列です。"

#: ../../source/inc/register_shader:31
msgid ""
"Other keyword arguments should start with ``vertex_`` or ``fragment_``, and "
"end with an integer priority. So \"fragment_200\" or \"vertex_300\". These "
"give text that's placed in the appropriate shader at the given priority, "
"with lower priority numbers inserted before higher priority numbers."
msgstr ""
"他のキーワード引数は \"fragment_200\" や \"vertex_300\" のように ``vertex_`` "
"や ``fragment_`` から始まり、優先度を表す数値で終わるべきです。これらは優先度"
"の数値順に適切なシェーダーに配置されるテキストを指定します。"

#: ../../source/model.rst:169
msgid "Ren'Py supports only the following variable types:"
msgstr "Ren'Py では次の型の変数のみをサポートします。 :"

#: ../../source/model.rst:171
msgid "float (a Python float)"
msgstr "float (Python float)"

#: ../../source/model.rst:172
msgid "vec2 (a tuple of 2 floats)"
msgstr "vec2 (2つの浮動小数のタプル)"

#: ../../source/model.rst:173
msgid "vec3 (a tuple of 3 floats)"
msgstr "vec3 (3 つの浮動小数のタプル)"

#: ../../source/model.rst:174
msgid "vec4 (a tuple of 4 floats)"
msgstr "vec4 ( 4 つの浮動小数のタプル)"

#: ../../source/model.rst:175
msgid "mat2 (a :class:`Matrix`)"
msgstr "mat2 (:class:`Matrix`)"

#: ../../source/model.rst:176
msgid "mat3 (a :class:`Matrix`)"
msgstr "mat3 (:class:`Matrix`)"

#: ../../source/model.rst:177
msgid "mat4 (a :class:`Matrix`)"
msgstr "mat4 (:class:`Matrix`)"

#: ../../source/model.rst:178
msgid ""
"sampler2D (a Displayabe, including strings that give Displayables, or a "
"Render)"
msgstr ""

#: ../../source/model.rst:180
msgid ""
"Uniform variables should begin with u\\_, attributes with a\\_, and varying "
"variables with v\\_. Names starting with u_renpy\\_, a_renpy, and v_renpy "
"are reserved, as are the standard variables given below."
msgstr ""
"Uniform 変数は u\\_ で、 attribute は a\\_, varying 変数 は v\\_ で始めるべき"
"です。 u_renpy\\_ や a_renpy、v_renpy で始まる変数は後述する標準的な変数同様"
"に予約されています。"

#: ../../source/model.rst:184
msgid ""
"As a general sketch for priority levels, priority 100 sets up geometry, "
"priority 200 determines the initial fragment color (gl_FragColor), and "
"higher-numbered priorities can apply effects to alter that color."
msgstr ""
"優先順位に対する基本的な考え方としては、優先度 100 でジオメトリを設定し、優先"
"度 200 で初期のフラグメントカラー（gl_FragColor）を決定し、より高い番号の優先"
"度ではその色を変更するエフェクトを適用できます。"

#: ../../source/model.rst:188
msgid ""
"Here's an example of a custom shader part that applies a gradient across "
"each model it is used to render::"
msgstr ""
"こちらはレンダリングに使用される各モデルにグラデーションを適用するカスタム"
"シェーダーパーツの例です。"

#: ../../source/model.rst:206
msgid "The custom shader can then be applied using a transform::"
msgstr "これによりカスタムシェーダーが transform を使用して適用できます。 ::"

#: ../../source/model.rst:215
msgid ""
"As stated before, the ``gradient_done`` variable from the example.gradient "
"shader will be accessible by any and all other shaders applied from the same "
"list. This can be useful when having optional parts in a given shader "
"system, but it can also lead to name collisions when using two independent "
"shaders."
msgstr ""
"前述したように、example.gradient シェーダの ``gradient_done`` 変数は、同じリ"
"ストから適用される他のすべてのシェーダからアクセス可能になります。これは、あ"
"るシェーダシステムにオプションのパーツがある場合に便利ですが、独立した2つの"
"シェーダを使用する場合に名前の衝突を引き起こす可能性もあります。"

#: ../../source/model.rst:220
msgid "There is a variable that can help in debugging custom shaders:"
msgstr "カスタムシェーダーのデバッグに役立つ変数があります。 :"

#: ../../source/model.rst:224
msgid ""
"If true, source code for the GLSL shader programs will be written to log.txt "
"on start."
msgstr ""
"True なら GLSL シェーダープログラム用のソースコードが起動時に log.txt に書き"
"加えられます。"

#: ../../source/model.rst:231
msgid "Shader Part Local Variables"
msgstr "シェーダー パーツのローカル変数"

#: ../../source/model.rst:233
msgid ""
"Variables can be declared shader-local by using one of ``u__``, ``a__``, "
"``v__``, or ``l__`` as a prefix. When this is done, the double underscores "
"are filled in with the shader name with all dots replaced with underscores. "
"For example, if the shader name is ``example.gradient``, the prefix ``u__`` "
"will be replaced with ``u_example_gradient_``."
msgstr ""
"変数は、接頭辞として ``u__``, ``a__``, ``v__`` または ``l__`` のいずれかを使"
"用してシェーダローカルに宣言できます。このときすべてのドットがアンダースコア"
"に置き換えられたシェーダー名で二重アンダースコアが置き換えられます。たとえ"
"ば、シェーダ名が ``example.gradient`` の場合、接頭辞 ``u__`` は "
"``u_example_gradient_`` に置き換えられます。"

#: ../../source/model.rst:239
msgid ""
"The main use of this is with :doc:`text shaders <textshaders>`, where most "
"uniforms are shader-local. Also, local variables inside the shader should be "
"declared with ``l__``."
msgstr ""
"これは主な用途は :doc:`テキストシェーダー <textshaders>` であり、そこではほと"
"んどの uniform がシェーダーローカルです。また、シェーダー内のローカル変数は "
"``l__`` と宣言する必要があります。"

#: ../../source/model.rst:245
msgid "Transforms and Model-Based Rendering"
msgstr "Transform とモデルベースのレンダラリング"

#: ../../source/model.rst:247
msgid ""
"Model-Based rendering adds the following properties to ATL and :func:"
"`Transform`:"
msgstr ""
"モデルベースのレンダリングは次のプロパティーを ATLと :func:`Transform` に追加"
"します :"

#: ../../source/model.rst:0
msgid "type"
msgstr "type"

#: ../../source/model.rst:251
msgid "None or True or tuple"
msgstr "None or True or tuple"

#: ../../source/model.rst:0
msgid "default"
msgstr "default"

#: ../../source/model.rst:252 ../../source/model.rst:266
#: ../../source/model.rst:292 ../../source/model.rst:301
msgid "None"
msgstr "None"

#: ../../source/model.rst:254
msgid "If not None, this Transform will be rendered as a model. This means:"
msgstr ""
"None でなければ、この Transform はモデルとしてレンダリングされます。 つまり :"

#: ../../source/model.rst:256
msgid ""
"A mesh will be created. If this is a 2-component tuple, it's taken as the "
"number of points in the mesh, in the x and y directions. (Each dimension "
"must be at least 2.) If True, the mesh is taken from the child."
msgstr ""
"メッシュが作成されます。これが 2 要素のタプルなら、 x 方向と y 方向のメッシュ"
"内のポイント数として取得されます(各次元で少なくとも 2 でなければいけませ"
"ん)。 True の場合、そのメッシュは子から取得されます。"

#: ../../source/model.rst:260
msgid "The child of this transform will be rendered to a texture."
msgstr "この transform の子はテクスチャにレンダリングされます。"

#: ../../source/model.rst:261
msgid "The renpy.texture shader will be added."
msgstr "renpy.texture シェーダーが追加されます。"

#: ../../source/model.rst:265
msgid "None or tuple"
msgstr "None or tuple"

#: ../../source/model.rst:268
msgid ""
"If not None, this can either be a 2 or 4-component tuple. If mesh is True "
"and this is given, this applies padding to the size of the textures applied "
"to the textures used by the mesh. A 2-component tuple applies padding to the "
"right and bottom, while a 4-component tuple applies padding to the left, "
"top, right, and bottom."
msgstr ""
"None でない場合、これは 2 成分または 4 成分のタプルにです。 mesh が True でこ"
"れが与えられた場合、これはメッシュで使用されるテクスチャに適用されるテクス"
"チャのサイズにパディングを適用します。 2 成分ののタプルは右と下にパディングを"
"適用し、4成分のタプルは左、上、右、下にパディングを適用します。"

#: ../../source/model.rst:274
msgid ""
"This can be used, in conjunction with the ``gl_pixel_perfect`` property, to "
"render text into a mesh. In Ren'Py, text is rendered at the screen "
"resolution, which might overflow the boundaries of the texture that will be "
"applied to the mesh. Adding a few pixels of padding makes the texture "
"bigger, which will display all pixels. For example::"
msgstr ""
"``gl_pixel_perfect`` プロパティーと組み合わせるとメッシュにテキストをレンダリ"
"ングできます。 Ren'Py においてテキストは画面の解像度で描画されるため、メッ"
"シュに適用されるテクスチャの境界を越える可能性があります。数ピクセルのパディ"
"ングを追加すると、テクスチャはより大きくなり、すべてのピクセルが表示されるよ"
"うになります。例 ::"

#: ../../source/model.rst:286
msgid ""
"will ensure that the texture passed to the shader contains all of the pixels "
"of the text."
msgstr ""
"上記はそのシェーダーに渡されるテクスチャに、そのテキストのすべてのピクセルを"
"含むことを保証します。"

#: ../../source/model.rst:291
msgid "None or str or list of str"
msgstr "None or str or list of str"

#: ../../source/model.rst:294
msgid ""
"If not None, a shader part name or list of shader part names that will be "
"applied to this Render (if a Model is created) or the Models reached through "
"this Render."
msgstr ""
"None またはこのレンダーを通して到達するモデル、 ( モデルが作成されるなら ) こ"
"のレンダーに適用されるシェーダーパーツ名、シェーダーパーツ名のリストです。"

#: ../../source/model.rst:300
msgid "None or str"
msgstr "None or str"

#: ../../source/model.rst:303
msgid ""
"if not None, this should be a string. This string is looked up in :var:"
"`config.gl_blend_func` to get the value for the gl_blend_func property. It's "
"used to use alternate blend modes."
msgstr ""
"None または文字列です。この文字列が :var:`config.gl_blend_func` で検索され、"
"gl_blend_func プロパティーの値を取得します。ブレンドモードの変更に使用されま"
"す。"

#: ../../source/model.rst:307
msgid ""
"The default blend modes this supports are \"normal\", \"add\", \"multiply\", "
"\"min\", and \"max\"."
msgstr ""
"サポートしているデフォルトのブレンドモードは \"normal\", \"add\", \"multiply"
"\", \"min\", and \"max\" です(それぞれ通常、加算、乗算、比較(暗), 比較(明) の"
"合成モードに相当します)。"

#: ../../source/model.rst:311
msgid ""
"In addition, uniforms that start with u\\_ but not with u_renpy are made "
"available as Transform properties. GL properties are made available as "
"transform properties starting with gl\\_. For example, the color_mask "
"property is made available as gl_color_mask."
msgstr ""
"加えて、 u_renpy でない u\\_ で始まる uniform は Transform プロパティーとして"
"利用できます。 GL プロパティー は gl\\_ で始めると Transformプロパティとして"
"利用できるようになります。例えば color_mask プロパティは gl_color_mask として"
"利用可能です。"

#: ../../source/model.rst:317
msgid "Blend Functions"
msgstr "Blend 関数"

#: ../../source/model.rst:321
msgid ""
"A dictionary used to map a blend mode name to a blend function. The blend "
"modes are supplied to the :ref:`gl_blend_func <gl-blend-func>` property, "
"given below."
msgstr ""
"ブレンドモード名をブレンド関数に対応付ける辞書です。ブレンドモードは、後述す"
"る :ref:`gl_blend_func <gl-blend-func>` プロパティーに提供されます。"

#: ../../source/model.rst:324
msgid "The default blend modes are::"
msgstr "デフォルトのブレンドモードです ::"

#: ../../source/model.rst:332
msgid ""
"As Ren'Py uses premultiplied alpha, the results of some of these may be "
"counterintuitive when a pixel is not opaque. In the GPU, the color (r, g, b, "
"a) is represented as (r * a, g * a, b * a, a), and the blend function uses "
"these premultiplied colors. This may be a different result that you get for "
"these blend modes in a paint program, when what is drawn is not fully opaque."
msgstr ""
"Ren'Py は乗算済みアルファを使用しているため、ピクセルが不透明でない場合、これ"
"らの一部の結果は直感に反する可能性があります。GPU では、色 (r, g, b, a) は "
"(r * a, g * a, b * a, a) として表され、ブレンド関数はこれらの事前に乗算された"
"色を使用します。描画されるものが完全に不透明でない場合、ペイントソフトでのこ"
"れらのブレンドモードからものとこれは異なる結果になる場合があります。"

#: ../../source/model.rst:340
msgid "Float, Sample, and Vector Uniforms"
msgstr "Float, Sample, Vector Uniform"

#: ../../source/model.rst:342
msgid "The following uniforms are made available to all models."
msgstr "次の uniform はすべてのモデルで利用可能です。"

#: ../../source/model.rst:347
msgid "``vec2 u_model_size``"
msgstr "``vec2 u_model_size``"

#: ../../source/model.rst:345
msgid ""
"The width and height of the model, as supplied to Ren'Py. This is only "
"available for 2D models that supply a size, and is (0, 0) for 3d models."
msgstr ""
"Ren'Py に渡すモデルの幅と高さです。これはサイズのある 2D model に対してのみ有"
"効であり、3d model では (0, 0) です。"

#: ../../source/model.rst:355
msgid "``float u_lod_bias``"
msgstr "``float u_lod_bias``"

#: ../../source/model.rst:352
msgid ""
"The level of detail bias to apply to texture lookups. This may be set in a "
"Transform. The default value, taken from :var:`config.gl_lod_bias` and "
"defaulting to -0.5, biases Ren'Py to always pick the next bigger level and "
"scale it down."
msgstr ""
"テクスチャ参照に適用される詳細バイアスのレベルです。これは Transform で設定さ"
"れるかもしれません。デフォルト値は :var:`config.gl_lod_bias` から取得され、デ"
"フォルトでは -0.5 です。この値は Ren'Py が常に次の大きなレベルを選択して、そ"
"れをスケールダウンするようにバイアスをかけます。"

#: ../../source/model.rst:360
msgid "``float u_time``"
msgstr "``float u_time``"

#: ../../source/model.rst:358
msgid ""
"The time of the frame. The epoch is undefined, so it's best to treat this as "
"a number that increases by one second a second. The time is modulo 86400, so "
"it will reset to 0.0 once a day."
msgstr ""
"そのフレームの時間です。エポックは未定義なので秒ごとに増える数値として扱うと"
"よいです。この時間は 86400 の剰余なので、一日ごとに 0.0 にリセットされます。"

#: ../../source/model.rst:364
msgid "``vec4 u_random``"
msgstr "``vec4 u_random``"

#: ../../source/model.rst:363
msgid ""
"Four random numbers between 0.0 and 1.0 that are (with incredibly high "
"likelyhood) different from frame to frame."
msgstr ""
"フレームごとに (非常に高い確率で) 異なる 0.0 から 1.0 の間の 4 つの乱数です。"

#: ../../source/model.rst:370
msgid "``vec4 u_viewport``"
msgstr "``vec4 u_viewport``"

#: ../../source/model.rst:367
msgid ""
"This gives the current viewport being drawn into. u_viewport.xy is are the "
"coordinates of the bottom-left corner of the viewport, relative to the "
"bottom-left corner of the window. u_viewport.pq is the width and height of "
"the viewport."
msgstr ""
"これは現在内部に描画が行われている viewport を指定します。 u_viewport.xy は "
"ウィンドウの左下隅を基準にした viewport の左下隅の座標です。 u_viewport.pq は"
"その viewport の幅と高さを表します。"

#: ../../source/model.rst:372
msgid "``vec2 u_virtual_size``"
msgstr "``vec2 u_virtual_size``"

#: ../../source/model.rst:374
msgid ""
"This is the virtual size of the game (:var:`config.screen_width`, :var:"
"`config.screen_height`). This can be used to convert from gl_Position to "
"virtual coordinates using:"
msgstr ""
"これはゲームの仮想サイズです (:var:`config.screen_width`, :var:`config."
"screen_height`) 。これを使用して、gl_Position 座標から仮想座標に変換使用でき"
"ます。 :"

#: ../../source/model.rst:384
msgid "``vec2 u_drawable_size``"
msgstr "``vec2 u_drawable_size``"

#: ../../source/model.rst:382
msgid ""
"The size of the drawable are of the windows, in pixels, at the resolution "
"the game is running at. For example, if a 1280x720 game is scaled up to "
"1980x1080, this will be (1920, 1080)."
msgstr ""
"ウィンドウの描画可能領域のサイズです。ゲーム実行時の解像度でのピクセル数にな"
"ります。例えば 1280x720 のゲームが 1980x1080 にスケーリングされていれば、これ"
"は (1920, 1080) になります。"

#: ../../source/model.rst:388
msgid "``sampler2D tex0``, ``sampler2D tex1``, ``sampler2D tex2``"
msgstr "``sampler2D tex0``, ``sampler2D tex1``, ``sampler2D tex2``"

#: ../../source/model.rst:387
msgid ""
"If textures are available, the corresponding samplers are placed in this "
"variable."
msgstr "テクスチャが利用可能なら、対応するサンプラーがこの変数に格納されます。"

#: ../../source/model.rst:394
msgid "``vec2 res0``, ``vec2 res1``, ``vec2 res2``"
msgstr "``vec2 res0``, ``vec2 res1``, ``vec2 res2``"

#: ../../source/model.rst:391
msgid ""
"If textures are available, the size of the textures are placed in these "
"variables. When the texture is loaded from disk, this is the size of the "
"image file. After a render to texture, it's the number of drawable pixels "
"the rendered texture covered."
msgstr ""
"テクスチャが利用可能なら、そのテクスチャのサイズがこれらの変数に格納されま"
"す。テクスチャがディスクから読み込まれたときはこれは画像ファイルのサイズで、"
"テクスチャにレンダリングされた後はレンダリングされたテクスチャ上で描画される"
"ピクセルの数です。"

#: ../../source/model.rst:396
msgid ""
"In addition, if a sampler uniform is available, then suffixing it with "
"``__res`` will give a vec2 containing the underlying texture size. For "
"example, ``u_markup__res`` will give the size of the ``u_markup`` texture."
msgstr ""

#: ../../source/model.rst:401
msgid "Matrix Uniforms"
msgstr "Matrix Uniform"

#: ../../source/model.rst:403
msgid ""
"The following uniforms are made available to all models. This assumes that "
"only one transform with the :tpref:`perspective` property is used to render "
"a model. When multiple transforms with the :tpref:`perspective` are used, "
"the innermost transformation with perspective set defines the world and view "
"spaces."
msgstr ""
"以下の uniform はすべてのモデルに用意されています。これは、モデルのレンダリン"
"グに :tpref:`perspective` プロパティーを指定された 1 つの transform のみが使"
"用されることを前提としています。:tpref:`perspective` を持つ複数の transform "
"が使用されている場合、 perspective が設定されている最も内側の transform が "
"world 空間と view 空間を定義します。"

#: ../../source/model.rst:410
msgid "``mat4 u_projection``"
msgstr "``mat4 u_projection``"

#: ../../source/model.rst:408
msgid ""
"This is a matrix that transforms coordinates from view space to the OpenGL "
"viewport. This is sent by Ren'Py, and is updated by transforms with the :"
"tpref:`perspective` property to encapsulate the effects of that property."
msgstr ""
"これは、 view 空間から OpenGL viewport に座標を変換するマトリックスです。これ"
"は Ren'Py によって送信され、 :tpref:`perspective` プロパティーを指定された "
"transform によってそのプロパティのー効果をカプセル化するために更新されます。"

#: ../../source/model.rst:415
msgid "``mat4 u_view``"
msgstr "``mat4 u_view``"

#: ../../source/model.rst:413
msgid ""
"This is a matrix that transforms vertex coordinates from the world space to "
"the view space. This defaults to the identity matrix, but can be set by "
"transforms with the :tpref:`perspective` property, in which case the effects "
"of positioning, rotation, and scaling are encapsulated in this matrix."
msgstr ""
"これは、 world 空間から view 空間に頂点座標を変換するマトリックスです。これは"
"デフォルトでは単位行列に設定されていますが、 :tpref:`perspective` プロパ"
"ティーを指定された transform によって設定でき、その場合は配置、回転、スケーリ"
"ングの効果がこのマトリックスにカプセル化されます。"

#: ../../source/model.rst:418
msgid "``mat4 u_model``"
msgstr "``mat4 u_model``"

#: ../../source/model.rst:418
msgid ""
"This is a matrix that transforms vertex coordinates from the model space to "
"the world space."
msgstr ""
"これは、 model 空間から world 空間に頂点座標を変換するマトリックスです。"

#: ../../source/model.rst:422
msgid "``mat4 u_projectionview``"
msgstr "``mat4 u_projectionview``"

#: ../../source/model.rst:421
msgid ""
"This matrix contains ``u_projection * u_view``. It exists to minimize the "
"number of uniforms that need to be sent to the GPU, and the amount of work "
"that needs to be done in the shader."
msgstr ""
"このマトリックスには ``u_projection * u_view`` が含まれています。これは、GPU "
"に送信する必要がある uniform の数と、シェーダーで実行する必要がある作業の量を"
"最小限に抑えるために存在します。"

#: ../../source/model.rst:427
msgid "``mat4 u_transform``"
msgstr "``mat4 u_transform``"

#: ../../source/model.rst:425
msgid ""
"This is the same as ``u_projectionview * u_model``. It's the matrix that "
"transforms vertex coordinates directly to the OpenGL viewport. It exists to "
"minimize the number of uniforms that need to be sent to the GPU, the amount "
"of work that needs to be done in the shader, and for compatibility with "
"older versions of Ren'Py."
msgstr ""
"これは ``u_projectionview * u_model`` と同じです。これは、頂点座標を直"
"接 OpenGL viewport に変換するマトリックスです。これは、GPU に送信する必要があ"
"る uniform の数とシェーダーで実行する必要がある作業の量を最小限に抑える、およ"
"び古いバージョンの Ren'Py との互換性のために存在します。"

#: ../../source/model.rst:429
#, fuzzy
msgid ""
"In addition to these methods, Ren'Py can synthesize matrices with certain "
"functions applied when suffixes are appended to the matrix"
msgstr ""
"これらの方法に加えて、Ren'Py はマトリックスに接尾辞が追加されたときに特定の関"
"数によりマトリックスを合成できます"

#: ../../source/model.rst:434
#, fuzzy
msgid "``__inverse``"
msgstr "``_inverse``"

#: ../../source/model.rst:433
#, fuzzy
msgid ""
"When appended to a matrix, this returns the inverse of the matrix. For "
"example, ``u_projection__inverse`` is the inverse of the projection matrix."
msgstr ""
"マトリックスに追加すると、その行列の逆行列が返されます。例えば、 "
"``u_projection_inverse`` は逆射影行列です。"

#: ../../source/model.rst:438
#, fuzzy
msgid "``__transpose``"
msgstr "``_transpose``"

#: ../../source/model.rst:437
#, fuzzy
msgid ""
"When appended to a matrix, this returns the transpose of the matrix. For "
"example, ``u_view__transpose`` is the transpose of the view matrix."
msgstr ""
"マトリックスに追加すると、その行列の転置行列が返されます。例えば、 "
"``u_view_transpose`` は射影行列の転置です。"

#: ../../source/model.rst:443
#, fuzzy
msgid "``__inversetranspose``"
msgstr "``_inversetranspose``"

#: ../../source/model.rst:441
#, fuzzy
msgid ""
"When appended to a matrix, this returns the inverse of the transpose of the "
"matrix. For example, ``u_model__inversetranspose`` is the inverse of the "
"transpose of the model matrix. This is useful for transforming normals."
msgstr ""
"マトリックスに追加すると、その行列の転置の逆行列が返されます。たとえば、 "
"``u_model_inversetranspose`` はモデル行列の転置の逆行列です。これは法線を変換"
"する場合に便利です。"

#: ../../source/model.rst:446
msgid "Attributes"
msgstr "Attribute"

#: ../../source/model.rst:448
msgid "The following attribute is available to all models:"
msgstr "次の attribute は、すべてのモデルで使用できます。"

#: ../../source/model.rst:452
msgid "``vec4 a_position``"
msgstr "``vec4 a_position``"

#: ../../source/model.rst:451
msgid ""
"The position of the vertex being rendered. This is in virtual pixels, "
"relative to the upper left corner of the texture."
msgstr ""
"レンダリングされる頂点の位置です。これは、テクスチャの左上隅を基準とした仮想"
"ピクセル単位です。"

#: ../../source/model.rst:454
msgid "If textures are available, so is the following attribute:"
msgstr "テクスチャが利用可能なら、次の attribute も使用可能です :"

#: ../../source/model.rst:457
msgid "``vec2 a_tex_coord``"
msgstr "``vec2 a_tex_coord``"

#: ../../source/model.rst:457
msgid "The coordinate that this vertex projects to inside the textures."
msgstr "この頂点を投影するテクスチャ内部の座標です。"

#: ../../source/model.rst:459
msgid "If normals are available, so is the following attribute:"
msgstr "テクスチャが利用可能なら、次の attribute も使用可能です :"

#: ../../source/model.rst:462
msgid "``vec3 a_normal``"
msgstr "``vec3 a_normal``"

#: ../../source/model.rst:462
msgid "The normal of the vertex being rendered."
msgstr "レンダリングされた頂点の位置"

#: ../../source/model.rst:464
msgid "If tangents are available, so are the following attributes:"
msgstr "テクスチャが利用可能なら、次の attribute も使用可能です :"

#: ../../source/model.rst:467
msgid "``vec3 a_tangent``"
msgstr "``vec3 a_tangent``"

#: ../../source/model.rst:467
msgid "The tangent of the vertex being rendered."
msgstr "レンダリングされた頂点のタンジェント"

#: ../../source/model.rst:470
msgid "``vec3 a_bitangent``"
msgstr "``vec3 a_bitangent``"

#: ../../source/model.rst:470
msgid "The bitangent of the vertex being rendered."
msgstr "レンダリングされたbitangent の位置"

#: ../../source/model.rst:475
msgid "GL Properties"
msgstr "GL プロパティー"

#: ../../source/model.rst:477
msgid ""
"GL properties change the global state of OpenGL, or the Model-Based "
"renderer. These properties can be used with a Transform, or with the :func:"
"`Render.add_property` function."
msgstr ""
"GLプロパティーは、OpenGLやモデルベースのレンダラのグローバルな状態を変更しま"
"す。これらのプロパティは Transform や :func:`Render.add_property` 関数で使用"
"できます。"

#: ../../source/model.rst:502
msgid "``gl_blend_func``"
msgstr "``gl_blend_func``"

#: ../../source/model.rst:484
msgid ""
"If present, this is expected to be a six-component tuple, which is used to "
"set the equation used to blend the pixel being drawn with the pixel it is "
"being drawn to, and the parameters to that equation."
msgstr ""
"あればこれは6要素のタプルが期待され、すでに描画されているピクセルと描画するピ"
"クセルを合成する方程式と、その方程式のパラメータを設定するために使用されま"
"す。"

#: ../../source/model.rst:488
msgid ""
"Specifically, this should be (`rgb_equation`, `src_rgb`, `dst_rgb`, "
"`alpha_equation`, `src_alpha`, `dst_alpha`). These will be used to call::"
msgstr ""
"具体的にはこれは (`rgb_equation`, `src_rgb`, `dst_rgb`, `alpha_equation`, "
"`src_alpha`, `dst_alpha`) です。これらは次の呼び出しで使用されます。 ::"

#: ../../source/model.rst:495
msgid ""
"Please see the OpenGL documentation for what these functions do. OpenGL "
"constants can be imported from renpy.uguu::"
msgstr ""
"これらの関数が何をしているかは OpenGLのドキュメントを参照してください。"
"OpenGL 定数は renpy.uguu からインポートできます。 ::"

#: ../../source/model.rst:501
msgid ""
"The :tpref:`blend` transform property is generally an easy way to use this."
msgstr ""
"一般的に :tpref:`blend` transform プロパティーがこれを使用する簡単な方法で"
"す。"

#: ../../source/model.rst:508
msgid "``gl_color_mask``"
msgstr "``gl_color_mask``"

#: ../../source/model.rst:505
msgid ""
"This is expecting to be a 4-tuple of booleans, corresponding to the four "
"channels of a pixel (red, green, blue, and alpha). If a given channel is "
"True, the draw operation will write to that pixel. Otherwise, it will not."
msgstr ""
"これには、ピクセルの4つのチャンネル（赤、緑、青、アルファ）に対応する真偽値の"
"4タプルが期待されます。あるチャンネルが True であれば、描画処理でそのピクセル"
"に書き込みます。そうでなければ、描画は行われません。"

#: ../../source/model.rst:517
msgid "``gl_depth``"
msgstr "``gl_depth``"

#: ../../source/model.rst:511
msgid ""
"If True, this will clear the depth buffer, and then enable depth rendering "
"for this displayable and the children of this displayable."
msgstr ""
"True の場合、 深度バッファをクリアし、この Displayable とこの Displayable の"
"子に対して z バッファ法でのレンダリングを有効にします。"

#: ../../source/model.rst:514
msgid ""
"Note that drawing any pixel, even transparent pixels, will update the depth "
"buffer. As a result, using this with images that have transparency may lead "
"to unexpected problems. (As an alternative, consider the ``zorder`` and "
"``behind`` clauses of the ``show`` statement.)"
msgstr ""
"透明なピクセルであっても、任意のピクセルを描画すると、深度バッファが更新され"
"ることに注意してください。そのため透明度のある画像に使用すると、予期せぬ問題"
"が発生する可能性があります( 別の方法として ``show`` ステートメントの "
"``zorder`` や ``behind`` 節を検討してください)。"

#: ../../source/model.rst:522
msgid "``gl_pixel_perfect``"
msgstr "``gl_pixel_perfect``"

#: ../../source/model.rst:520
msgid ""
"When True, Ren'Py will move the mesh such that the first vertex is aligned "
"with a pixel on the screen. This is mostly used in conjunction with text, to "
"ensure that the text remains sharp."
msgstr ""
"True のとき、Ren'Py はメッシュの最初の頂点が画面上のピクセルと一致するように"
"移動します。これは主にテキストと組み合わせて、テキストがシャープに保たれるよ"
"うにするために使用されます。"

#: ../../source/model.rst:524
msgid ""
"The following properties only take effect when a texture is being created, "
"by a Transform with :tpref:`mesh` set, or by :func:`Model`, where these can "
"be supplied the property method."
msgstr ""
"次のプロパティーは、 :tpref:`mesh` が設定された Transform または :func:"
"`Model` によってテクスチャが作成されるときのみ、プロパティメソッドに渡され効"
"果を持ちます。"

#: ../../source/model.rst:531
msgid "``gl_drawable_resolution``"
msgstr "``gl_drawable_resolution``"

#: ../../source/model.rst:529
msgid ""
"If True or not set, the texture is rendered at the same resolution as the "
"window displaying the game. If False, it's rendered at the virtual "
"resolution of the displayable."
msgstr ""
"True または設定されていない場合、テクスチャーはウィンドウがゲームを表示してい"
"るのと同じ解像度でレンダリングされます。 False ならその Displayable の仮想解"
"像度でレンダリングされます。"

#: ../../source/model.rst:540
msgid "``gl_anisotropic``"
msgstr "``gl_anisotropic``"

#: ../../source/model.rst:534
msgid ""
"If supplied, this determines if the textures applied to a mesh are created "
"with anisotropy. Anisotropy is a feature that causes multiple texels "
"(texture pixels) to be sampled when a texture is zoomed by a different "
"amount in X and Y."
msgstr ""
"与えられた場合、これはメッシュに渡されるテクスチャが異方性で作成されてるかど"
"うかを判断します。異方性とは、テクスチャーが X と Y で異なる量だけズームされ"
"たときに、複数のテクセル（テクスチャピクセル）がサンプリングされる機能です。"

#: ../../source/model.rst:539
msgid ""
"This defaults to True. Ren'Py sets this to False for certain effects, like "
"the Pixellate transition."
msgstr ""
"これはデフォルトでは True です。 Ren'Py は Pixellate のような特定のエフェクト"
"のためにこれを False に設定します。"

#: ../../source/model.rst:544
msgid "``gl_mipmap``"
msgstr "``gl_mipmap``"

#: ../../source/model.rst:543
msgid ""
"If supplied, this determines if the textures supplied to a mesh are created "
"with mipmaps. This defaults to True."
msgstr ""
"与えられた場合、これはメッシュに渡されるテクスチャがミップマップで作成される"
"かどうかを決定します。デフォルトは True です。"

#: ../../source/model.rst:561
msgid "``gl_texture_wrap``"
msgstr "``gl_texture_wrap``"

#: ../../source/model.rst:547
msgid ""
"When supplied, this determines how the textures applied to a mesh are "
"wrapped. This expects a 2-component tuple, where the first component is used "
"to set GL_TEXTURE_WRAP_S and the second component is used to set "
"GL_TEXTURE_WRAP_T, which conventionally are the X and Y axes of the created "
"texture."
msgstr ""
"与えられた場合、これはメッシュに適用されるテクスチャがどのようにラップされる"
"かを決定します。これには2要素のタプルが期待され、最初の要素は "
"GL_TEXTURE_WRAP_S を、 2番目の要素は GL_TEXTURE_WRAP_T を設定するために用いら"
"れます。これらは通常、作成されたテクスチャの X 軸と Y 軸を表します。"

#: ../../source/model.rst:553
msgid "The values should be OpenGL constants imported from renpy.uguu::"
msgstr "値は OpenGL に含まれ、 renpy.uguu からインポートされます。 ::"

#: ../../source/model.rst:558
msgid ""
"This can also be customized for specific textures. `gl_texture_wrap_tex0` "
"controls the first texture, `gl_texture_wrap_tex1` the second, "
"`gl_texture_wrap_tex2`, the third, and `gl_texture_wrap_tex3` the fourth. "
"While only these four are avalable through Transforms, it's possibe to "
"supply \"texture_wrap_tex4\" or \"texture_wrap_myuniform\" to Render."
"add_property."
msgstr ""
"これは、特定のテクスチャ用にカスタマイズすることもできます。 "
"`gl_texture_wrap_tex0` は最初のテクスチャをコントロールし、 "
"`gl_texture_wrap_tex1` は2番目のテクスチャを、 `gl_texture_wrap_tex2` は3番"
"目、 `gl_texture_wrap_tex3` は4番目のテクスチャを制御します。Transforms では"
"この4つのみが利用可能ですが Render.add_property には \"texture_wrap_tex4\" "
"や \"texture_wrap_myuniform\" も渡せます。"

#: ../../source/model.rst:564
msgid "GLTFModel Displayable"
msgstr "モデル Displayable"

#: ../../source/model.rst:566
msgid ""
"The GLTFModel displayble allow you to load 3D models in the GLTF file "
"format. This is what you should use if you have a 3D model you created in "
"another program and want to display in Ren'Py."
msgstr ""
"GLTFModel displayble により、 GLTF ファイル形式の 3D モデルをロードできます。"
"これは、他のプログラムで作成した 3D モデルがあり、Ren'Py で表示したい場合に使"
"用すべきものです。"

#: ../../source/inc/assimp:5
msgid ""
"A displayable that loads a 3D Model in the GLTF format. This format is "
"supported by many 3D tools. Ren'Py uses the `Open Asset Importer (assimp) "
"library <https://github.com/assimp/assimp>`_ to load GLTF models."
msgstr ""
"GLTF 形式で 3D モデルを 読み込む displayable です。この形式は多くの 3D ツール"
"でサポートされています。Ren'Py は `Open Asset Importer (assimp) ライブラリ "
"<https://github.com/assimp/assimp>`_ を使用して GLTF モデルを読み込みます。"

#: ../../source/inc/assimp:8
msgid ""
"For the purposes of Ren'Py's 2D layout system, a GLTFModel has zero width "
"and height. By default, the model is loaded at the size found in the file "
"that contains it. If required, the `zoom` may be used to scale it."
msgstr ""
"Ren'Py の 2D レイアウトシステムの目的上、GLTFModel の幅と高さはゼロです。デ"
"フォルトでは、モデルはそれを含むファイルにあるサイズでロードされます。必要に"
"応じて、　`zoom` を使用して拡大縮小できます。"

#: ../../source/inc/assimp:11
msgid ""
"When multiple models are in use, the ``gl_depth True`` property should be "
"supplied to the camera, so that depth testing is enabled. Ren'Py does not "
"currently perform any culling of the model, so it's important to use models "
"simple enough to be completely rendered."
msgstr ""
"複数のモデルを使用している場合は、深度テストを有効にするために、カメラに "
"``gl_depth True`` プロパティーを指定する必要があります。Ren'Py は現在、モデル"
"の間引きを実行していないため、完全にレンダリングできるほど単純なモデルの使用"
"が重要です。"

#: ../../source/inc/assimp:16
msgid "`filename`"
msgstr "`filename`"

#: ../../source/inc/assimp:16
msgid "The filename of the model to display."
msgstr "gl プロパティーの値"

#: ../../source/inc/assimp:52
msgid "`textures`"
msgstr "`texture_wrap`"

#: ../../source/inc/assimp:19
msgid ""
"A list of textures to load. These textures will be loaded into texture slots "
"- the first will be tex0, the second tex1, and so on."
msgstr ""
"指定の Displayable をレンダリングしてこのモデルにテクスチャを追加します。追加"
"される最初のテクスチャは ``tex0`` で、 2つ目は ``tex1`` と続きます。"

#: ../../source/inc/assimp:22
msgid ""
"The list may contain one of the following strings, giving the type of "
"texture to load:"
msgstr ""
"リストには、ロードするテクスチャのタイプを示す次の文字列のいずれかを含められ"
"ます。 :"

#: ../../source/inc/assimp:24
msgid "\"none\""
msgstr "\"none\""

#: ../../source/inc/assimp:25
msgid "\"diffuse\""
msgstr "\"diffuse\""

#: ../../source/inc/assimp:26
msgid "\"specular\""
msgstr "\"specular\""

#: ../../source/inc/assimp:27
msgid "\"ambient\""
msgstr "\"ambient\""

#: ../../source/inc/assimp:28
msgid "\"emissive\""
msgstr "\"emissive\""

#: ../../source/inc/assimp:29
msgid "\"height\""
msgstr "\"height\""

#: ../../source/inc/assimp:30
msgid "\"normals\""
msgstr "\"normals\""

#: ../../source/inc/assimp:31
msgid "\"shininess\""
msgstr "\"shininess\""

#: ../../source/inc/assimp:32
msgid "\"opacity\""
msgstr "\"opacity\""

#: ../../source/inc/assimp:33
msgid "\"displacement\""
msgstr "\"displacement\""

#: ../../source/inc/assimp:34
msgid "\"lightmap\""
msgstr "\"lightmap\""

#: ../../source/inc/assimp:35
msgid "\"reflection\""
msgstr "\"reflection\""

#: ../../source/inc/assimp:36
msgid "\"base_color\""
msgstr "\"base_color\""

#: ../../source/inc/assimp:37
msgid "\"normal_camera\""
msgstr "\"normal_camera\""

#: ../../source/inc/assimp:38
msgid "\"emission_color\""
msgstr "\"emission_color\""

#: ../../source/inc/assimp:39
msgid "\"metalness\""
msgstr "\"metalness\""

#: ../../source/inc/assimp:40
msgid "\"diffuse_roughness\""
msgstr "\"diffuse_roughness\""

#: ../../source/inc/assimp:41
msgid "\"ambient_occlusion\""
msgstr "\"ambient_occlusion\""

#: ../../source/inc/assimp:42
msgid "\"unknown\""
msgstr "\"unknown\""

#: ../../source/inc/assimp:43
msgid "\"sheen\""
msgstr "\"sheen\""

#: ../../source/inc/assimp:44
msgid "\"clearcoat\""
msgstr "\"clearcoat\""

#: ../../source/inc/assimp:45
msgid "\"transmission\""
msgstr "\"transmission\""

#: ../../source/inc/assimp:47
msgid ""
"These correspond to the various textures defined by assimp. In many cases, "
"you'll have multiple types packed into a single texture - like having a "
"textuure that has metallic on the blue channel, roughness on the green, and "
"ambient occlusion on the red. In that case, you'll want to pick one texture "
"type to load, and use the texture shader to extract the channels you want."
msgstr ""
"これらは、assimp によって定義されたさまざまなテクスチャに対応します。多くの場"
"合、青のチャンネルにメタリック、緑の粗さ、赤のアンビエントオクルージョンを持"
"つテクスチャなど、複数のタイプが 1 つのテクスチャに詰め込まれています。その場"
"合は、ロードするテクスチャ タイプを 1 つ選択し、テクスチャ シェーダーを使用し"
"て必要なチャネルを抽出します。"

#: ../../source/inc/assimp:52
msgid ""
"The textures list may also contain displayables, which will be used as "
"textures directly."
msgstr ""
"テクスチャリストには、テクスチャとして直接使用される displayable も含まれる場"
"合があります。"

#: ../../source/inc/assimp:55 ../../source/inc/model_displayable:54
msgid "`shader`"
msgstr "`shader`"

#: ../../source/inc/assimp:55
msgid ""
"Either a string or tuple of strings, giving the name of the shader to use."
msgstr "このモデルで使用するシェーダーの名前の文字列です。"

#: ../../source/inc/assimp:58
msgid "`tangents`"
msgstr "`tangents`"

#: ../../source/inc/assimp:58
msgid "If True, tangents will be included in the mesh."
msgstr "True ならメッシュに含まれる tangent です。"

#: ../../source/inc/assimp:62
msgid "`zoom`"
msgstr "`zoom`"

#: ../../source/inc/assimp:61
msgid ""
"A zoom factor that will be applied to the model. Many models naturally use "
"the range -1 to 1, and so this may need to be quite large to make the model "
"visible."
msgstr ""
"モデルに適用される倍率係数です。多くのモデルは素直に -1 から 1 の範囲を使用す"
"るため、モデルを表示するためにこれを非常に大きくする必要がある場合がありま"
"す。"

#: ../../source/inc/assimp:65
msgid "`flip_x`"
msgstr "`flip_x`"

#: ../../source/inc/assimp:65
msgid "If True, the model will be flipped along the x axis."
msgstr "True なら、モデルは x 軸に沿って反転されます。"

#: ../../source/inc/assimp:69
msgid "`flip_y`"
msgstr "`flip_y`"

#: ../../source/inc/assimp:68
msgid ""
"If True, the model will be flipped along the y axis. This defaults to True, "
"to map models to Ren'Py's coordinate system."
msgstr ""
"True の場合、モデルは y 軸に沿って反転されます。モデルを Ren'Py の座標系に"
"マッピングするため、デフォルトは True です。"

#: ../../source/inc/assimp:72
msgid "`flip_z`"
msgstr "`flip_z`"

#: ../../source/inc/assimp:72
msgid "If True, the model will be flipped along the z axis."
msgstr "True の場合、モデルは Z 軸に沿って反転されます。"

#: ../../source/inc/assimp:76
msgid "`flip_uv`"
msgstr "`flip_uv`"

#: ../../source/inc/assimp:75
msgid ""
"If True, the UV coordinates will be flipped vertically. This defaults to "
"True, to map texture coordinates to how Ren'Py expects them."
msgstr ""
"True の場合、UV 座標は垂直方向に反転されます。デフォルトは True で、テクス"
"チャ座標を Ren'Py が期待する方法にマッピングします。"

#: ../../source/inc/assimp:78
msgid ""
"GLTFModel.__init__(self, unicode filename: str, textures: Iterable = "
"(u'diffuse'), shader: str | tuple[str] = u'renpy.texture', tangents: bool = "
"False, double zoom: float = 1.0, flip_x: bool = False, flip_y: bool = True, "
"flip_z: bool = False, flip_uv: bool = True)"
msgstr ""
"GLTFModel.__init__(self, unicode filename: str, textures: Iterable = "
"(u'diffuse'), shader: str | tuple[str] = u'renpy.texture', tangents: bool = "
"False, double zoom: float = 1.0, flip_x: bool = False, flip_y: bool = True, "
"flip_z: bool = False, flip_uv: bool = True)"

#: ../../source/model.rst:572
msgid "Model Displayable"
msgstr "モデル Displayable"

#: ../../source/model.rst:574
msgid ""
"The Model displayable acts as a factory to created models for use with the "
"model-based renderer. This is an older API you may wish to use when you want "
"to create models in Python."
msgstr ""
"モデル Displayable はモデルベースのレンダラーで使用するためのモデルを作成する"
"のに役立ちます。"

#: ../../source/inc/model_displayable:5
msgid ""
"This is a displayable that causes Ren'Py to create a 2D or 3D model for use "
"with the model-based renderer, that will be drawn in a single operation with "
"the shaders given here, or selected by an enclosing Transform or Displayable."
msgstr ""
"これは Ren'Py にモデルベースのレンダラーで使用する 2D や 3D のモデルを作成さ"
"せる Displayable であり、ここで指定したシェーダーを使用して単一の処理により、"
"または囲んでいるTransform や Displayable によって選択されて描画されます。"

#: ../../source/inc/model_displayable:14
msgid "`size`"
msgstr "`size`"

#: ../../source/inc/model_displayable:11
msgid ""
"If not None, this should be a width, height tuple, that's used to give the "
"size of the Model. If not given, the model is the size of the area provided "
"to it. The fit parameter to a texture takes precedence."
msgstr ""
"None でなければ幅と高さのタプルで、そのモデルのサイズを指定するのに使用されま"
"す。指定されないと、そのモデルは与えられた領域のサイズになります。テクスチャ"
"への fit パラメータがより優先されます。"

#: ../../source/inc/model_displayable:16
msgid ""
"If no mesh method is called, a mesh that sets a_position and a_tex_coord to "
"match the way Ren'Py loads textures is created if at least one texture is "
"supplied. Otherwise, a mesh that only sets a_position is used."
msgstr ""
"mesh メソッドが呼び出されない場合、少なくとも1つのテクスチャを与えられれば "
"Ren'Py がテクスチャをロードする方法に合わせて a_position と a_tex_coord を設"
"定するメッシュが作成され、そうでなければ a_position のみを設定するメッシュが"
"使用されます。"

#: ../../source/inc/model_displayable:20
msgid ""
"All methods on this calls return the displayable the method is called on, "
"making it possible to chain calls."
msgstr ""
"このクラスのすべてのメソッドはそのメソッドが呼び出された Displayable を返すの"
"でチェーン呼び出しが出来ます。"

#: ../../source/inc/model_displayable:25
msgid ""
"This is the same as the texture method, except that the `focus` and `main` "
"parameters are set to true."
msgstr ""
"これは `focus` と `main` パラメーターが True に設定される他は texture メソッ"
"ドと同じです。"

#: ../../source/inc/model_displayable:30
msgid ""
"Creates a mesh that consists of a width x height grid of evenly spaced "
"points, connecting each point to the closest points vertically and "
"horizontally, and dividing each rectangle in the grid so created into "
"triangles."
msgstr ""
"width x height の等間隔のポイントを持つグリッドで構成されるメッシュを作成し、"
"各ポイントを垂直および水平方向の最も近いポイントに接続し、作成されたグリッド"
"内の各長方形を三角形に分割します。"

#: ../../source/inc/model_displayable:36
msgid "`width`, `height`"
msgstr "`width`, `height`"

#: ../../source/inc/model_displayable:36
msgid ""
"The number of points in the horizontal vertical directions, a integer that "
"is at least 2."
msgstr "水平、垂直方法のポイント数で、少なくとも2以上の整数です。"

#: ../../source/inc/model_displayable:41
msgid "Sets the value of a gl property."
msgstr "gl プロパティーの値を設定します。"

#: ../../source/inc/model_displayable:44
msgid ""
"A string giving the name of the GL property, including the \"gl\\_\" prefix."
msgstr "GL プロパティーの名前を指定する文字列で、 \"gl\\_\" 接頭辞を含みます。"

#: ../../source/inc/model_displayable:47 ../../source/inc/model_displayable:90
msgid "`value`"
msgstr "`value`"

#: ../../source/inc/model_displayable:48
msgid "The value of the gl property."
msgstr "gl プロパティーの値"

#: ../../source/inc/model_displayable:52
msgid "Adds a shader to this model."
msgstr "このモデルにシェーダーを追加します。"

#: ../../source/inc/model_displayable:55
msgid "A string given the name of a shader to use with this model."
msgstr "このモデルで使用するシェーダーの名前の文字列です。"

#: ../../source/inc/model_displayable:59
msgid ""
"Add a texture to this model, by rendering the given displayable. The first "
"texture added will be ``tex0``, the second ``tex1``, a and so on."
msgstr ""
"指定の Displayable をレンダリングしてこのモデルにテクスチャを追加します。追加"
"される最初のテクスチャは ``tex0`` で、 2つ目は ``tex1`` と続きます。"

#: ../../source/inc/model_displayable:66
msgid "`focus`"
msgstr "`focus`"

#: ../../source/inc/model_displayable:64
msgid ""
"If true, focus events are passed to the displayable. It's assumed that "
"coordinate relative to the model map 1:1 with coordinates relative to the "
"displayable."
msgstr ""
"True なら、フォーカスイベントがその Displayable に渡されます。ここではそのモ"
"デルに対する相対座標がその Displayable に帯する相対座標と 1:1 で対応すると想"
"定しています。"

#: ../../source/inc/model_displayable:71
msgid "`main`"
msgstr "`main`"

#: ../../source/inc/model_displayable:69
msgid ""
"If true, this is marked as a main child of this displayable, which allows it "
"to be inspected using the displayable inspector."
msgstr ""
"True なら、これは Displayable インスペクターに検知されるこの Displayable のメ"
"インの子としてマークされます。"

#: ../../source/inc/model_displayable:75
msgid "`fit`"
msgstr "`fit`"

#: ../../source/inc/model_displayable:74
msgid ""
"If true, the Model is given the size of the displayable. This may only be "
"true for one texture."
msgstr ""
"True なら、モデルにはその Displayable のサイズが指定されます。これは1つのテク"
"スチャに対してのみ True でしょう。"

#: ../../source/inc/model_displayable:78
msgid "`texture_wrap`"
msgstr "`texture_wrap`"

#: ../../source/inc/model_displayable:78
msgid ""
"If not None, this is the :ref:`gl_texture wrap GL property <gl-properties>` "
"that will be applied to this texture."
msgstr ""
"None またはこのテクスチャに適用される :ref:`gl_texture wrap GL プロパティー "
"<gl-properties>` です。"

#: ../../source/inc/model_displayable:83
msgid "Sets the value of a uniform that is passed to the shaders."
msgstr "シェーダーに渡される uniform の値を設定します。"

#: ../../source/inc/model_displayable:86
msgid ""
"A string giving the name of the uniform to set, including the \"u\\_\" "
"prefix."
msgstr "uniform の名前の文字列で、 \"u\\_\" を接頭辞に持ちます。"

#: ../../source/inc/model_displayable:90
msgid ""
"The value of the uniform. Either a float, a 2, 3, or 4 element tuple of "
"floats, or a Matrix."
msgstr ""
"uniform の値です。浮動小数、浮動小数の2, 3, 4要素のタプルまたはマトリックスで"
"す。"

#: ../../source/model.rst:581
msgid "Model Displayable Examples"
msgstr "モデル Displayable 例"

#: ../../source/model.rst:583
msgid ""
"The Model displayable can be used in conjunction with an ATL transform and a "
"built-in shader to create the Dissolve transform::"
msgstr ""
"このモデル Displayable は、ATL transform と組み込みのシェーダを組み合わせて"
"ディゾルブ transform 作成に使用できます。"

#: ../../source/model.rst:594
msgid ""
"Using the Model displayable as the child of a displayable is incompatible "
"with :tpref:`mesh`, as the two both create models inside Ren'Py."
msgstr ""
"モデル Displayable を Displayable の子に使用すると 2つ共が Ren'Py 内にモデル"
"を作成するので、 :tpref:`mesh` と互換性がなくなります。"

#: ../../source/model.rst:598
msgid "Animated Shaders"
msgstr "アニメーションシェーダー"

#: ../../source/model.rst:600
msgid ""
"When using shaders that depend on ``u_time`` to animate, one must be aware, "
"that even though every shader on screen will run on every frame displayed, "
"Ren'Py does not run on constant FPS, and will fall back to the minimum frame "
"rate of 5 FPS if no displayables require to be redrawn."
msgstr ""
"``u_time`` に依存してアニメーションするシェーダーを使用するとき、画面のすべて"
"のシェーダーが表示されるすべてのフレームで実行されてさえ、 Ren'Py が一定の "
"FPS では動作せず、再描画する displayable がなければ、5 FPS の最小フレームレー"
"トに落ち込むことに気をつけてください。"

#: ../../source/model.rst:605
msgid ""
"When using an animating shader in an ATL transform, this can cause that "
"shader to \"stutter\" and only animate properly while some other object on "
"screen animates as well, in case the transform you're using it in does not "
"cause redraws otherwise. In this case, an empty ATL loop can be introduced "
"to force redraws to happen::"
msgstr ""
"ATL transform でアニメーションシェーダーを使用するとき、このことがシェーダー"
"にカクツキを起こさせたり、使用している transform が他に再描画を起こさせない場"
"合、画面の他のオブジェクトがアニメーションする間だけ正常にアニメーションさせ"
"たりするかもしれません。この場合は空の ATL ループを加えて再描画の実行を強制で"
"きます。"

#: ../../source/model.rst:616
msgid ""
"``pause 0`` will cycle the frames as fast as possible. You can also set "
"different values for ``pause`` to specify a minimum frame rate, like ``pause "
"1.0/30``."
msgstr ""
"``pause 0`` はそのフレームを可能な限り早く繰り返します。 ``pause`` に "
"``pause 1.0/30`` のような異なる値を設定して、最終フレームレートの指定もできま"
"す。"

#: ../../source/model.rst:622
msgid "Shader Parts"
msgstr "シェーダー パーツ"

#: ../../source/model.rst:624
msgid ""
"For a list of shader parts that Ren'Py uses, see the :doc:`shader_parts`."
msgstr ""
"Ren'Py が使うシェーダーパーツの一覧は :doc:`shader_parts` を参照してくださ"
"い。"

#~ msgid "sampler2D (supplied by Ren'Py)"
#~ msgstr "sampler2D (Ren'Py 提供 )"

#~ msgid "The width and height of the model."
#~ msgstr "モデルの幅と高さ"

#~ msgid "The transform used to project virtual pixels to the OpenGL viewport."
#~ msgstr ""
#~ "仮想ピクセルを OpenGL ビューポートに投影するのに使用される transform で"
#~ "す。"

#~ msgid "renpy.alpha"
#~ msgstr "renpy.alpha"

#~ msgid "Variables::"
#~ msgstr "Variables::"

#~ msgid "Fragment shader (priority 500)::"
#~ msgstr "Fragment shader (priority 500)::"

#~ msgid "renpy.alpha_mask"
#~ msgstr "renpy.alpha_mask"

#~ msgid "Vertex shader (priority 200)::"
#~ msgstr "Vertex shader (priority 200)::"

#~ msgid "renpy.blur"
#~ msgstr "renpy.blur"

#~ msgid "Fragment shader (priority 200)::"
#~ msgstr "Fragment shader (priority 200)::"

#~ msgid "renpy.dissolve"
#~ msgstr "renpy.dissolve"

#~ msgid "renpy.geometry"
#~ msgstr "renpy.geometry"

#~ msgid "Vertex shader (priority 0)::"
#~ msgstr "Vertex shader (priority 0)::"

#~ msgid "Vertex shader (priority 100)::"
#~ msgstr "Vertex shader (priority 100)::"

#~ msgid "renpy.imagedissolve"
#~ msgstr "renpy.imagedissolve"

#~ msgid "renpy.mask"
#~ msgstr "renpy.mask"

#~ msgid "renpy.matrixcolor"
#~ msgstr "renpy.matrixcolor"

#~ msgid "Fragment shader (priority 400)::"
#~ msgstr "Fragment shader (priority 400)::"

#~ msgid "renpy.solid"
#~ msgstr "renpy.solid"

#~ msgid "renpy.texture"
#~ msgstr "renpy.texture"

#~ msgid "textshader.dissolve"
#~ msgstr "textshader.dissolve"

#~ msgid "Fragment shader (priority 350)::"
#~ msgstr "Fragment shader (priority 350)::"

#~ msgid "textshader.flip"
#~ msgstr "textshader.flip"

#~ msgid "Vertex shader (priority 20)::"
#~ msgstr "Vertex shader (priority 20)::"

#~ msgid "textshader.jitter"
#~ msgstr "textshader.jitter"

#~ msgid "Vertex shader (priority 30)::"
#~ msgstr "Vertex shader (priority 30)::"

#~ msgid "textshader.linetexture"
#~ msgstr "textshader.linetexture"

#~ msgid "Vertex shader (priority 10)::"
#~ msgstr "Vertex shader (priority 10)::"

#~ msgid "Fragment shader (priority 300)::"
#~ msgstr "Fragment shader (priority 300)::"

#~ msgid "textshader.offset"
#~ msgstr "textshader.offset"

#~ msgid "Vertex shader (priority 35)::"
#~ msgstr "Vertex shader (priority 35)::"

#~ msgid "textshader.slowalpha"
#~ msgstr "textshader.slowalpha"

#~ msgid "Fragment shader (priority 325)::"
#~ msgstr "Fragment shader (priority 325)::"

#~ msgid "Fragment shader (priority 375)::"
#~ msgstr "Fragment shader (priority 375)::"

#~ msgid "textshader.texture"
#~ msgstr "textshader.texture"

#~ msgid "textshader.typewriter"
#~ msgstr "textshader.typewriter"

#~ msgid "textshader.wave"
#~ msgstr "textshader.wave"

#~ msgid "Vertex shader (priority 40)::"
#~ msgstr "Vertex shader (priority 40)::"

#~ msgid "textshader.zoom"
#~ msgstr "textshader.zoom"

#~ msgid "Vertex shader (priority 25)::"
#~ msgstr "Vertex shader (priority 25)::"

#~ msgid "Vertex shader::"
#~ msgstr "Vertex shader::"

#~ msgid "renpy.blur (priority 200)"
#~ msgstr "renpy.blur (priority 200)"

#~ msgid "renpy.mask (priority 200)"
#~ msgstr "renpy.mask (priority 200)"

#~ msgid "renpy.solid (priority 200)"
#~ msgstr "renpy.solid (priority 200)"

#~ msgid "renpy.alpha (priority 500)"
#~ msgstr "renpy.alpha (priority 500)"

#~ msgid ""
#~ "As of Ren'Py 7.4 (late 2020), Model-Based rendering needs to be enabled "
#~ "to be used. This is done by setting config.gl2 to True, using::"
#~ msgstr ""
#~ "Ren'Py 7.4 (2020) では、モデルベースのレンダリングの使用には有効化する必要"
#~ "があります。これは config.gl2 を True にして実行されます。 ::"

#~ msgid "If true, Ren'Py will default to using a model-based renderer."
#~ msgstr ""
#~ "True なら、 Ren'Py はデフォルトでモデルベースのレンダラーを使用します。"

#~ msgid ""
#~ "As it's expected that model-based rendering will become the only renderer "
#~ "in the near future, the rest of this documentation is written as if model-"
#~ "based rendering is enabled all the time."
#~ msgstr ""
#~ "近い将来、モデルベースのレンダラーが唯一のレンダラーになると期待されている"
#~ "ので、このドキュメントの残りの部分はモデルベースのレンダリングが常に有効で"
#~ "ある前提で書かれています。"
