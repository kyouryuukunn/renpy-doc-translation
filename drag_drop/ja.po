# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 11:17+0900\n"
"PO-Revision-Date: 2024-10-26 19:39+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2014-06-21 06:26+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/drag_drop.rst:4
msgid "Drag and Drop"
msgstr "ドラッグ＆ドロップ"

#: ../../source/drag_drop.rst:6
msgid ""
"Ren'Py includes drag and drop displayables that allow things to be moved "
"around the screen with the mouse. Some of the uses of dragging are:"
msgstr ""
"Ren'Py にはマウスで画面上を移動できるドラッグドロップ displayable がありま"
"す。ドラッグの使用法としては次があります :"

#: ../../source/drag_drop.rst:10
msgid ""
"Allowing windows to be repositioned by the user, storing the window "
"positions."
msgstr "ウィンドウの位置合わせ、ウィンドウ位置を記憶できるようにする。"

#: ../../source/drag_drop.rst:12
msgid ""
"Card games that require cards to be dragged around the screen. (For example, "
"solitaire.)"
msgstr ""
"カードを画面上でドラッグする必要のあるカードゲーム ( 例えばソリティア )。"

#: ../../source/drag_drop.rst:14
msgid "Inventory systems."
msgstr "アイテムシステム。"

#: ../../source/drag_drop.rst:15
msgid "Drag-to-reorder systems."
msgstr "ドラッグで並び順を変えるシステム。"

#: ../../source/drag_drop.rst:17
msgid ""
"The drag and drop displayables make it possible to implement these and other "
"uses of drag and drop. There are two classes involved here. The Drag class "
"represents either something that can be dragged around the screen, something "
"that can have a draggable dropped onto it, or something that can do both. "
"The DragGroup class represents a group of Drags – for a drag and drop to "
"occur, both Drags must be part of the same drag group."
msgstr ""
"ドラッグドロップ displayable は、上記やその他の場面においてドラッグドロップを"
"実装できるようにします。ここに関係する2つのクラスがあります。 Drag クラスは、"
"スクリーン上をドラッグできるもの、またはその上にドロップされたドラッグ可能な"
"ものを受け取れるもの、その両方が出来るもののいずれかを表します。 DragGroup ク"
"ラスは Drag のグループを表します。ドラッグドロップを実行するためには、両方の "
"Drag が同じドラッググループに属していなければなりません。"

#: ../../source/drag_drop.rst:25
msgid ""
"The drag and drop system can be used either through the :doc:`Screen "
"Language <screens>` or directly as displayables. It makes sense to use the "
"screen language when you don't need to refer to the Drags that you create "
"after they've been created. This might be the case if the draggable "
"represents a window that the user places on the screen. If you need to refer "
"to the drags after they've been created, then it's often better to create "
"Drags directly, and add them to a DragGroup."
msgstr ""
"ドラッグドロップシステムは :doc:`スクリーン言語 <screens>` を通してか、または"
"直接 displayable として使用できます。作成後に作成した Drag を参照する必要がな"
"いときは、スクリーン言語を使用すると良いでしょう。これはドラッグ可能オブジェ"
"クトが、ユーザーがスクリーン上に配置したウィンドウである場合などです。作成後"
"も作成した Drag を参照する必要がある場合は、直接 Drag を作成し、それらを "
"DragGroup に追加すると良いでしょう。"

#: ../../source/drag_drop.rst:34
msgid "Dropping"
msgstr "ドロップ"

#: ../../source/drag_drop.rst:36
msgid "There are two ways Ren'Py can process a drop:"
msgstr "Ren'Py にはドロップを実施する 2 つの方法があります。"

#: ../../source/drag_drop.rst:38
msgid ""
"If `mouse_drop` is true, the drag will be dropped onto the droppable that is "
"directly below the mouse cursor."
msgstr ""
"`mouse_drop` が True なら、 drag はマウスカーソルの直下にあるドロップ可能なも"
"のにドロップします。"

#: ../../source/drag_drop.rst:40
msgid ""
"If `mouse_drop` is false, the default, the drop will occur onto the "
"droppable that most fully overlaps with the drag."
msgstr ""
"`mouse_drop` はデフォルトで False であり、そうならドロップはその drag ともっ"
"とも重なっているドロップ可能なものに行われます。"

#: ../../source/drag_drop.rst:43
msgid ""
"Unlike when starting a drag, where `focus_mask` is used, dropping considers "
"the entire rectangular areas of the draggable and droppable, including any "
"transparent pixels. You may need to design your drag and drop displayables "
"to take this into account, by being generally rectangular in shape."
msgstr ""
"`focus_mask` が使用されるドラッグの開始時とは異なり、ドロップでは、透明ピクセ"
"ルを含む、 ドラッグ可能なものとドロップ可能なものの矩形領域全体が考慮されま"
"す。drap と drop displayable はこれを考慮して一般的に矩形にして設計する必要が"
"あるでしょう。"

#: ../../source/drag_drop.rst:49
msgid "Displayables"
msgstr "Displayable"

#: ../../source/drag_drop.rst:54
msgid "Examples"
msgstr "例"

#: ../../source/drag_drop.rst:56
msgid ""
"An example of a say screen that allows the user to choose the location of "
"the window by dragging it around the screen.::"
msgstr ""
"以下の say スクリーンの例では、スクリーン上をドラッグしてユーザーがウィンドウ"
"の位置を選べます。 ::"

#: ../../source/drag_drop.rst:79
msgid ""
"Here's a more complicated example, one that shows how dragging can be used "
"to influence gameplay. It shows how dragging can be used to send a character "
"to a location::"
msgstr ""
"こちらはより複雑な例で、どのようにゲームプレイにドラッグを使用して影響を与え"
"られるかを示します。どのようにキャラクターをドラッグしてある場所に移せるかを"
"表わしています。"

#: ../../source/drag_drop.rst:143
msgid ""
"More complicated systems take significant programming skill to get right."
msgstr ""
"より複雑なシステムを正しく構築するためには、かなりのプログラミング技術が必要"
"です。"

#: ../../source/drag_drop.rst:153
msgid ""
"The ``as`` clause can be used to bind a drag to variable, which can then be "
"used to call methods on the drag. ::"
msgstr ""
"``as`` 節を使用して drag と変数を結び付け、その Drag のメソッドを呼び出すのに"
"使用出来るようにします。 ::"

#~ msgid ""
#~ "A displayable that represents an object that can be dragged around its "
#~ "enclosing area. A Drag can also represent an area that other Drags can be "
#~ "dropped on."
#~ msgstr ""
#~ "それを囲んでいる領域上でドラッグ可能なオブジェクトを表わす displayable で"
#~ "す。 Drag は他の Drag がドロップ可能な領域も表現できます。"

#~ msgid ""
#~ "A Drag can be moved around inside is parent. Generally, its parent should "
#~ "be either a :func:`Fixed` or :class:`DragGroup`."
#~ msgstr ""
#~ "その内側で Drag が移動可能なものを親と呼びます。一般的には親は :func:"
#~ "`Fixed` か :class:`DragGroup` であるはずです。"

#~ msgid ""
#~ "A Drag has one child. The child's state reflects the status of the drag "
#~ "and drop operation:"
#~ msgstr ""
#~ "Drag は子を一つ持ちます。子の状態はドラッグドロップ処理の状態を反映しま"
#~ "す。 :"

#~ msgid "``selected_hover`` - when it is being dragged."
#~ msgstr "``selected_hover`` ドラッグされている時。"

#~ msgid "``selected_idle`` - when it can be dropped on."
#~ msgstr "``selected_idle`` その上にドロップ可能な時。"

#~ msgid ""
#~ "``hover`` - when the draggable will be dragged when the mouse is clicked."
#~ msgstr ""
#~ "``hover`` - マウスをクリックすればドラッグ可能オブジェクトをドラッグできる"
#~ "時。"

#~ msgid "``idle`` - otherwise."
#~ msgstr "``idle`` それ以外。"

#~ msgid ""
#~ "The drag handle is a rectangle inside the child. The mouse must be over a "
#~ "pixel inside the drag handle for dragging or clicking to occur. If the :"
#~ "propref:`focus_mask` property is True, that pixel must not be transparent."
#~ msgstr ""
#~ "ドラッグで持てる部分はその子の内側の長方形です。ドラッグやクリックを実行す"
#~ "るためにはマウスが Drag のその部分のピクセル上になければなりません。 :"
#~ "propref:`focus_mask` プロパティーが True なら、さらにそのピクセルが不透明"
#~ "でなければなりません。"

#~ msgid ""
#~ "A newly-created draggable is added to the default DragGroup. A draggable "
#~ "can only be in a single DragGroup - if it's added to a second group, it's "
#~ "removed from the first."
#~ msgstr ""
#~ "新しく作成されたドラッグ可能なオブジェクトはデフォルトの DragGroup に追加"
#~ "されます。 ドラッグ可能オブジェクトは 一つの DragGroup にのみ所属できま"
#~ "す。二つ目のグループに追加すると、最初のものからは削除されます。"

#~ msgid ""
#~ "When a Drag is first rendered, if it's position cannot be determined from "
#~ "the DragGroup it is in, the position of its upper-left corner is computed "
#~ "using the standard layout algorithm. Once that position has been "
#~ "computed, the layout properties are ignored in favor of the position "
#~ "stored inside the Drag."
#~ msgstr ""
#~ "Drag が最初にレンダリングされる時に、それが所属する DragGroup からその座標"
#~ "を決定できない場合その左上の座標が基本的なレイアウトアルゴリズムを使用して"
#~ "算出されます。いったん座標が算出されると、その Drag に保存された座標を優先"
#~ "し、レイアウトプロパティーは無視されます。"

#~ msgid ""
#~ "Transforms should not be applied to a Drag directly. Instead, apply the "
#~ "transform to the child of the Drag."
#~ msgstr ""
#~ "Transform はドラッグに直接適用するべきでありません。代わりに、ドラッグの子"
#~ "に Transform を適用してください。"

#~ msgid "`d`"
#~ msgstr "`d`"

#~ msgid ""
#~ "If present, the child of this Drag. Drags use the child style in "
#~ "preference to this, if it's not None."
#~ msgstr ""
#~ "与えられると、この Drag の子になります。 None でなければ Drag はこれに優先"
#~ "して child スタイルを使用します。"

#~ msgid "`drag_name`"
#~ msgstr "`drag_name`"

#~ msgid ""
#~ "If not None, the name of this draggable. This is available as the `name` "
#~ "property of draggable objects. If a Drag with the same name is or was in "
#~ "the DragGroup, the starting position of this Drag is taken from that "
#~ "Draggable."
#~ msgstr ""
#~ "None を指定するかこのドラッグ可能オブジェクトの名前を指定します。これはド"
#~ "ラッグ可能オブジェクトの `name` プロパティーとして利用できます。もし同じ名"
#~ "前の Drag がその DragGroup に所属しているまたはしていたならこの Drag の最"
#~ "初の座標はそのドラッグ可能オブジェクトから受け取ります。"

#~ msgid "`draggable`"
#~ msgstr "`draggable`"

#~ msgid "If true, the Drag can be dragged around the screen with the mouse."
#~ msgstr "True の場合、Drag はスクリーン上をマウスでドラッグできます。"

#~ msgid "`droppable`"
#~ msgstr "`droppable`"

#~ msgid "If true, other Drags can be dropped on this Drag."
#~ msgstr "True なら他の Drag がこの Drag 上にドロップ可能です。"

#~ msgid "`drag_raise`"
#~ msgstr "`drag_raise`"

#~ msgid ""
#~ "If true, this Drag is raised to the top when it is dragged. If it is "
#~ "joined to other Drags, all joined drags are raised."
#~ msgstr ""
#~ "True ならこの Drag がドラッグされたときにトップまで持ち上げられます。他の "
#~ "Drag と接続されていたら、すべての接続された Drag も持ち上げられます。"

#~ msgid "`activated`"
#~ msgstr "`activated`"

#~ msgid ""
#~ "A callback (or list of callbacks) that is called when the mouse is "
#~ "pressed down on the drag. It is called with one argument, a list of Drags "
#~ "that are being dragged. The return value of this callback is ignored."
#~ msgstr ""
#~ "Drag 上でマウスが押されたとき呼び出されるコールバック ( またはコールバック"
#~ "のリスト ) です。ドラッグされている Drag のリストを引数に呼び出されます。"
#~ "このコールバックの返り値は無視されます。"

#~ msgid "`dragging`"
#~ msgstr "`dragging`"

#~ msgid ""
#~ "A callback (or list of callbacks) that is called when the Drag is being "
#~ "dragged. It is called with one argument, a list of Drags that are being "
#~ "dragged. If the callback returns a value other than None, that value is "
#~ "returned as the result of the interaction."
#~ msgstr ""
#~ "Drag がドラッグ中に呼び出されるコールバック ( またはコールバックのリス"
#~ "ト ) です。それは1つの引数で呼び出され、ドラッグされている Drag のリストで"
#~ "す。コールバックが None 以外の値を返すと、その値はインタラクションの結果と"
#~ "して返されます。"

#~ msgid "`dragged`"
#~ msgstr "`dragged`"

#~ msgid ""
#~ "A callback (or list of callbacks) that is called when the Drag has been "
#~ "dragged. It is called with two arguments. The first is a list of Drags "
#~ "that are being dragged. The second is either a Drag that is being dropped "
#~ "onto, or None of a drop did not occur. If the callback returns a value "
#~ "other than None, that value is returned as the result of the interaction."
#~ msgstr ""
#~ "Drag がドラッグされた時に呼び出されるコールバック ( またはコールバックのリ"
#~ "スト ) です。それは二つの引数で呼び出されます。一つ目はドラッグされている "
#~ "Drag のリストです。二つ目はその上にドロップされている Drag か、ドロップが"
#~ "起きていないなら None です。コールバックが None ではなく値を返すとその値は"
#~ "インタラクションの結果として返されます。"

#~ msgid "`dropped`"
#~ msgstr "`dropped`"

#~ msgid ""
#~ "A callback (or list of callbacks) that is called when this Drag is "
#~ "dropped onto. It is called with two arguments. The first is the Drag "
#~ "being dropped onto. The second is a list of Drags that are being "
#~ "dragged.  If the callback returns a value other than None, that value is "
#~ "returned as the result of the interaction."
#~ msgstr ""
#~ "Drag がドロップされた時に呼び出されるコールバック ( またはコールバックのリ"
#~ "スト ) です。それは二つの引数で呼び出されます。一つ目はその上にドロップさ"
#~ "れている Drag 二つ目はドラッグされている Drag のリストです。コールバック"
#~ "が None 以外の値を返すと、その値はインタラクションの結果として返されます。"

#~ msgid ""
#~ "When a dragged and dropped callback are triggered for the same event, the "
#~ "dropped callback is only called if dragged returns None."
#~ msgstr ""
#~ "dragged と dropped のコールバックが同じイベントで起こされると、 dropped "
#~ "コールバックは dragged が None を返したときのみ呼び出されます。"

#~ msgid "`clicked`"
#~ msgstr "`clicked`"

#~ msgid ""
#~ "A callback that is called when the Drag is clicked without being moved. "
#~ "It is called with one argument, the Drag being clicked on. A droppable "
#~ "can also be focused and clicked. If the callback returns a value other "
#~ "than None, that value is returned as the result of the interaction."
#~ msgstr ""
#~ "Drag が移動なしでクリックされたときに、クリックされた Drag を引数に呼び出"
#~ "されるコールバックです。ドロップ可能オブジェクトもフォーカスを持て、クリッ"
#~ "クすることも可能です。 コールバックが None ではなく値を返したら、その値が"
#~ "インタラクションの結果として返されます。"

#~ msgid "`alternate`"
#~ msgstr "`alternate`"

#~ msgid ""
#~ "An action that is run when the Drag is right-clicked (on the desktop) or "
#~ "long-pressed without moving (on mobile). It may be necessary to increase :"
#~ "var:`config.longpress_duration` if this triggers to early on mobile "
#~ "platforms."
#~ msgstr ""
#~ "Drag が(デスクトップの場合)右クリックされるか動かさないで長押し(モバイル)"
#~ "すると実行されるアクションです。このトリガーがモバイルプラットフォームで早"
#~ "すぎる場合は  :var:`config.longpress_duration` を大きくする必要がありま"
#~ "す。"

#~ msgid "`hovered`"
#~ msgstr "`hovered`"

#~ msgid "An action to run when the drag gains focus."
#~ msgstr "Drag がフォーカスを所得すると実行するアクションです。"

#~ msgid "`unhovered`"
#~ msgstr "`unhovered`"

#~ msgid "An action to run when the drag loses focus."
#~ msgstr "Drag がフォーカスを失うと実行するアクションです。"

#~ msgid "`tooltip`"
#~ msgstr "`tooltip`"

#~ msgid "A tooltip to display when the drag is hovered over."
#~ msgstr "Drag がホバー状態で表示される tooltip です。"

#~ msgid "`drag_handle`"
#~ msgstr "`drag_handle`"

#~ msgid ""
#~ "A (x, y, width, height) tuple, giving the position of the drag handle "
#~ "within the child. This tuple takes :term:`positions <position>`."
#~ msgstr ""
#~ "子内部のドラッグ有効範囲の位置を与える (x, y, width, height) のタプルで"
#~ "す。このタプルには、 :term:`positions <position>` を含めます。"

#~ msgid "`drag_joined`"
#~ msgstr "`drag_joined`"

#~ msgid ""
#~ "This is called with the current Drag as an argument. It's expected to "
#~ "return a list of [ (drag, x, y) ] tuples, giving the draggables to drag "
#~ "as a unit. `x` and `y` are the offsets of the drags relative to each "
#~ "other, they are not relative to the corner of this drag. `drag` is either "
#~ "the Drag object to be joined or the drag_name of such a Drag."
#~ msgstr ""
#~ "これは現在の Drag を引数として呼び出されます。ひとかたまりでドラッグしてい"
#~ "るドラッグ可能オブジェクトのタプル [ (drag, x, y) ] を返すことが期待されま"
#~ "す。 `x`, `y` は Drag の互いに対するオフセットで、この drag に対するもので"
#~ "はありません。 `drag` は組み合わされる Drag オブジェクトかそのような Drag "
#~ "の drag_name です。"

#~ msgid "`drag_offscreen`"
#~ msgstr "`drag_offscreen`"

#~ msgid ""
#~ "Determines the conditions under which the drag is allowed to be dragged "
#~ "offscreen. Allowing offscreen dragging can be dangerous to use with "
#~ "drag_joined or drags that can change size, as the drags can leave the "
#~ "screen entirely, with no way to get them back on the screen."
#~ msgstr ""
#~ "drag が画面外へ動かせるかの条件を判定します。 drag_joined やサイズを変更出"
#~ "来る drag に使用すると、その drag が完全に画面外に出て画面に戻す方法がなく"
#~ "なる可能性があるため危険になり得ます。"

#~ msgid "This should be one of:"
#~ msgstr "これは次のうちどれか1つであるべきです。 :"

#~ msgid "False"
#~ msgstr "False"

#~ msgid "To disallow dragging the drag offscreen. (The default)"
#~ msgstr "画面外への drag の移動を禁止します(デフォルト)。"

#~ msgid "True"
#~ msgstr "True"

#~ msgid "To allow dragging offscreen, in any direction."
#~ msgstr "どの方向にも画面外へのドラッグを許可します。"

#~ msgid "\"horizontal\""
#~ msgstr "\"horizontal\""

#~ msgid "To allow dragging offscreen in the horizontal direction only."
#~ msgstr "水平方向のみ画面外へのドラッグを許可します。"

#~ msgid "\"vertical\""
#~ msgstr "\"vertical\""

#~ msgid "To allow dragging offscreen in the vertical direction only."
#~ msgstr "垂直方向のみ画面外へのドラッグを許可します。"

#~ msgid "(width, height)"
#~ msgstr "(width, height)"

#~ msgid ""
#~ "Both width and height must be integers. The drag can be dragged offscreen "
#~ "as long as a (width, height)-sized part of it remains on-screen. So, "
#~ "(100, 100) will ensure that at least a 100x100 pixel area of the "
#~ "displayable will remain on-screen even while the rest of the displayable "
#~ "can be dragged offscreen. Setting this to the width and height of the "
#~ "displayable being dragged is equivalent to not allowing the drag to go "
#~ "offscreen at all."
#~ msgstr ""
#~ "width とheight は共に整数でなければなりません。 (width, height) のサイズ分"
#~ "が画面内にある限り、画面外へドラッグできます。例えば (100, 100) ならば、そ"
#~ "の displayable の他の部分が画面外にあっても、少なくとも 100x100 ピクセルの"
#~ "領域が画面内に残っていると保証します。これをドラッグされている "
#~ "displayable の幅と高さに設定すると、全く画面外へのドラッグを許可しないのと"
#~ "同じになります。"

#~ msgid "(min_x, max_x, min_y, max_y)"
#~ msgstr "(min_x, max_x, min_y, max_y)"

#~ msgid ""
#~ "Where each of min_x, max_x, min_y, and max_y are integers. min_x is the "
#~ "number of pixels away from the left border, and max_x is the number of "
#~ "pixels away from the right border. The same goes for min_y and max_y on "
#~ "the top and bottom borders respectively. The drag can be moved until one "
#~ "of its edges hit the specified border. (0, 0, 0, 0) is equivalent to not "
#~ "allowing dragging offscreen at all."
#~ msgstr ""
#~ "min_x, max_x, min_y, max_y はそれぞれ整数であり、 min_x が左端からのピクセ"
#~ "ル数、 max_x が右端からのピクセル数です。 min_y と max_y の上端と下端との"
#~ "関係も同じです。ドラッグはその端が指定した端にぶつかるまで動かせます。 "
#~ "(0, 0, 0, 0) は全く画面外へのドラッグを許可しないのと同じになります。"

#~ msgid ""
#~ "For example, (-100, 200, 0, 0) would allow the drag to be dragged 100 "
#~ "pixels off the left edge of the screen and 200 pixels off the right edge "
#~ "of the screen, but does not allow it to be dragged offscreen at the top "
#~ "nor bottom."
#~ msgstr ""
#~ "例えば (-100, 200, 0, 0) ならば drag は 100 ピクセル画面の端から左へドラッ"
#~ "グでき、 200 ピクセル画面の端から右へドラッグできます。上下の画面外へのド"
#~ "ラッグは許可しません。"

#~ msgid ""
#~ "This can also be used to constrain the drag within the screen bounds. "
#~ "(200, -200, 200, -200) would only allow the drag within 200 pixels of the "
#~ "edges of the screen."
#~ msgstr ""
#~ "これを使用して、 drag を画面内の境界に制限できます。 (200, -200, 200, "
#~ "-200) なら画面の端から 200 ピクセル内でのみドラッグを許可します。"

#~ msgid ""
#~ "You can envision this as an additional \"border\" around the drag, which "
#~ "may go outside the bounds of the screen, that constrains the drag to "
#~ "remain within it."
#~ msgstr ""
#~ "これは drag の周りの追加の \"境界\" を想像しください。これは画面外に境界を"
#~ "置き、その中に drag を制限します。"

#~ msgid "callable"
#~ msgstr "callable"

#~ msgid ""
#~ "A callable can be provided to drag_offscreen. It must take two arguments: "
#~ "an x and a y position which represents the dragged position of the top "
#~ "left corner of the drag, and it must return an (x, y) tuple which is the "
#~ "new (x, y) position the drag should be in. This callable is called "
#~ "frequently, whenever the drag is moved. For example, the following "
#~ "function snaps the drag into place every 300 pixels::"
#~ msgstr ""
#~ "drag_offscreen には呼び出し可能オブジェクトも渡せます。引数は二つ必要とな"
#~ "り、その drag のドラッグされた左上の座標を表す x と y 座標です。 drag の新"
#~ "しい (x, y) 座標となる (x, y) タプルを返さなければいけません。この呼び出し"
#~ "可能オブジェクトは drag の移動中頻繁に呼び出されます。例えば次の関数は "
#~ "drag を 300 ピクセル区切りにスナップします。 ::"

#~ msgid "`mouse_drop`"
#~ msgstr "`mouse_drop`"

#~ msgid ""
#~ "If true, the drag is dropped on the first droppable under the cursor. If "
#~ "false, the default, the drag is dropped onto the droppable with the "
#~ "largest degree of overlap."
#~ msgstr ""
#~ "True なら、 drag はカーソル下の最初のドロップ可能な物にドロップされます。"
#~ "デフォルトでは False で drag は重なりがもっとも大きい ドロップ可能なものに"
#~ "ドロップされます。"

#~ msgid "`drop_allowable`"
#~ msgstr "`drop_allowable`"

#~ msgid ""
#~ "A callback that is called to determine whether this drop will allow the "
#~ "current drags to be dropped onto it. It is called with two arguments. The "
#~ "first is the Drag which determines its sensitivity. The second is a list "
#~ "of Drags that are being dragged."
#~ msgstr ""
#~ "現在ドラッグしているもののこれへのドロップを許可するか決定するコールバック"
#~ "です。二つの引数で呼び出され、一つ目はドロップを受け取る Drag, 二つ目はド"
#~ "ラッグされている Drag のリストです。"

#~ msgid "`snapped`"
#~ msgstr "`snapped`"

#~ msgid ""
#~ "A callback (or list of callbacks) that is called when the Drag completes "
#~ "a snap animation. It is called with four arguments. The first is the Drag "
#~ "which was undergoing the snap animation. The second and third are the x "
#~ "and y coordinates where the Drag was set to snap to. The fourth is a "
#~ "boolean which is True if the snap animation was successfully completed, "
#~ "and False if it was interrupted (e.g. from being grabbed in the middle of "
#~ "snapping). For example, the following function sets the drag's start_x "
#~ "and start_y position to its intended end position if the snap animation "
#~ "was interrupted::"
#~ msgstr ""
#~ "ドラッグがスナップを完了すると呼び出されるコールバック(またはコールバック"
#~ "のリスト)です。4つの引数で呼び出されます。1つ目はスナップアニメーションが"
#~ "処理された Drag です。2つ目と3つ目は Drag がスナップするよう設定された x "
#~ "と y 座標です。4つ目は真偽値で、 True ならスナップアニメーションは成功"
#~ "し、 False なら中断しました。例えば次の関数はスナップアニメーションが中断"
#~ "されると、その Drag の start_x と start_y 位置を意図したスナップ位置に設定"
#~ "します。 ::"

#~ msgid ""
#~ "Except for `d`, all of the parameters are available as fields (with the "
#~ "same name) on the Drag object. In addition, after the drag has been "
#~ "rendered, the following fields become available:"
#~ msgstr ""
#~ "`d` を除いてパラメーターのすべてはその Drag オブジェクトでフィールドとし"
#~ "て ( 同じ名前で ) 利用可能です。さらに Drag がレンダリングされた後は次の"
#~ "フィールドが利用可能になります。"

#~ msgid "`x`, `y`"
#~ msgstr "`x`, `y`"

#~ msgid "The position of the Drag relative to its parent, in pixels."
#~ msgstr "ピクセルでのその親に対する Drag の位置"

#~ msgid "`start_x`, `start_y`"
#~ msgstr "`start_x`, `start_y`"

#~ msgid ""
#~ "The drag start position of the Drag relative to its parent, in pixels."
#~ msgstr "ピクセルでのその親に対するドラッグ開始時の Drag の位置"

#~ msgid "`grab_x`, `grab_y`"
#~ msgstr "`grab_x`, `grab_y`"

#~ msgid ""
#~ "The x and y positions, relative to its parent, where the drag was picked "
#~ "up, in pixels."
#~ msgstr "ピクセルでのその Drag に対する捕まれた x, y 位置です。"

#~ msgid "`last_drop`"
#~ msgstr "`last_drop`"

#~ msgid ""
#~ "The last Drag that the current Drag can be dropped on if released, or "
#~ "None if no valid Drag currently exists."
#~ msgstr ""
#~ "離せば現在の Drag をドロップできる最後尾の Drag であり、妥当な Drag が現在"
#~ "なければ None になります。"

#~ msgid "`snapping`"
#~ msgstr "`snapping`"

#~ msgid "True if this Drag is in the middle of a snapping animation."
#~ msgstr "この Drag がスナップアニメーションの途中なら True になります。"

#~ msgid "`w`, `h`"
#~ msgstr "`w`, `h`"

#~ msgid "The width and height of the Drag's child, in pixels."
#~ msgstr "Drag の子のピクセルでの幅と高さです。"

#~ msgid "Lowers this displayable to the bottom of its drag_group."
#~ msgstr "この displayable をその DragGroup の最下端にします。"

#~ msgid "Changes the child of this drag to `d`."
#~ msgstr "この Drag の子を `d` に変更します。"

#~ msgid ""
#~ "Changes the position of the drag. If the drag is not showing, then the "
#~ "position change is instantaneous. Otherwise, the position change takes "
#~ "`delay` seconds and an optional warper. If no warper is provided, the "
#~ "transition is linear."
#~ msgstr ""
#~ "Drag の位置を変更します。 Drag が表示されていないと位置の変更は瞬間です。"
#~ "そうでなければ、位置の変更は `delay` 秒かけて任意のワーパーで行われ、ワー"
#~ "パーが指定されていなければ等速で移動します。"

#~ msgid "Raises this displayable to the top of its drag_group."
#~ msgstr "この displayable をその DragGroup のトップに持ち上げます。"

#~ msgid ""
#~ "Represents a group of Drags. A Drag is limited to the boundary of its "
#~ "DragGroup. Dropping only works between Drags that are in the same "
#~ "DragGroup. Drags may only be raised when they are inside a DragGroup."
#~ msgstr ""
#~ "Drag のグループを表します。ドラッグはその DragGroup 内部に制限されます。ド"
#~ "ロップは同じ DragGroup に所属する Drag 間でのみ働きます。 Drag はそれが "
#~ "DragGroup の内側にあるときのみ持ち上げられます。"

#~ msgid "A DragGroup is laid out like a :func:`Fixed`."
#~ msgstr ":func:`Fixed` と同様に DragGroup はレイアウトされます。"

#~ msgid ""
#~ "All positional parameters to the DragGroup constructor should be Drags, "
#~ "that are added to the DragGroup."
#~ msgstr ""
#~ "DragGroup のコンストラクターに渡されるすべての位置パラメーターはその "
#~ "DragGroup に追加される Drag であるべきです。"

#~ msgid "`min_overlap`"
#~ msgstr "`min_overlap`"

#~ msgid ""
#~ "An integer which means the minimum number of pixels at the overlap for "
#~ "the drop to be allowed."
#~ msgstr ""
#~ "ドロップが受け入れられる最小のオーバーラップするピクセル数を表す整数です。"

#~ msgid ""
#~ "Adds `child`, which must be a Drag, to this DragGroup. This child will be "
#~ "added above all other children of this DragGroup."
#~ msgstr ""
#~ "ドラッグされなければならない `child` をこの DragGroup に追加します。 "
#~ "`child` はこの DragGroup の他の全ての子の上に追加されます。"

#~ msgid ""
#~ "Returns the first child of this DragGroup that has a drag_name of `name`."
#~ msgstr "`name` の drag_name を持つ DragGroup の最初の子を返します。"

#~ msgid "Removes `child` from this DragGroup."
#~ msgstr "DragGroup から `child` を除去します。"

#~ msgid ""
#~ "More complicated systems take significant programming skill to get right. "
#~ "The `Ren'Py cardgame framework <http://www.renpy.org/wiki/renpy/"
#~ "Frameworks#Cardgame>`_ is both an example of how to use drag and drop in "
#~ "a complex system, and useful for making card games in its own right."
#~ msgstr ""
#~ "さらに複雑なシステムを作るには、高度なプログラミングスキルが必要です。 "
#~ "`Ren'Py cardgame framework <http://www.renpy.org/wiki/renpy/"
#~ "Frameworks#Cardgame>`_ は、複雑なゲームにおけるドラッグドロップの例を示す"
#~ "とともに、カードゲームの作成を容易にします。"

#~ msgid ""
#~ "The drag and drop system can be used either through the :ref:`Screen "
#~ "Language <screens>` or directly as displayables. It makes sense to use "
#~ "the screen language when you don't need to refer to the Drags that you "
#~ "create after they've been created. This might be the case if the "
#~ "draggable represents a window that the user places on the scren. If you "
#~ "need to refer to the drags after they've been created, then it's often "
#~ "better to create Drags directly, and add them to a DragGroup."
#~ msgstr ""
#~ "ドラッグドロップシステムは :ref:`スクリーン言語 <screens>` を通してか、ま"
#~ "たは直接 displayable として使用できます。作成後に作成した Drag を参照する"
#~ "必要がないときは、スクリーン言語を使用すると良いでしょう。これはドラッグ可"
#~ "能オブジェクトが、ユーザーがスクリーン上に配置したウィンドウである場合など"
#~ "です。作成後も作成した Drag を参照する必要がある場合は、直接 Drag を作成"
#~ "し、それらを DragGroup に追加すると良いでしょう。"
