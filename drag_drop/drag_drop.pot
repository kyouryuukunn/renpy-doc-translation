# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-30 21:47+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/drag_drop.rst:7
msgid "Drag and Drop"
msgstr ""

#: ../../source/drag_drop.rst:9
msgid "Ren'Py includes drag and drop displayables that allow things to be moved around the screen with the mouse. Some of the uses of dragging are:"
msgstr ""

#: ../../source/drag_drop.rst:13
msgid "Allowing windows to be repositioned by the user, storing the window positions."
msgstr ""

#: ../../source/drag_drop.rst:15
msgid "Card games that require cards to be dragged around the screen. (For example, solitaire.)"
msgstr ""

#: ../../source/drag_drop.rst:17
msgid "Inventory systems."
msgstr ""

#: ../../source/drag_drop.rst:18
msgid "Drag-to-reorder systems."
msgstr ""

#: ../../source/drag_drop.rst:20
msgid "The drag and drop displayables make it possible to implement these and other uses of drag and drop. There are two classes involved here. The Drag class represents either something that can be dragged around the screen, something that can have a draggable dropped onto it, or something that can do both. The DragGroup class represents a group of Drags â€“ for a drag and drop to occur, both Drags must be part of the same drag group."
msgstr ""

#: ../../source/drag_drop.rst:28
msgid "The drag and drop system can be used either through the :ref:`Screen Language <screens>` or directly as displayables. It makes sense to use the screen language when you don't need to refer to the Drags that you create after they've been created. This might be the case if the draggable represents a window that the user places on the screen. If you need to refer to the drags after they've been created, then it's often better to create Drags directly, and add them to a DragGroup."
msgstr ""

#: ../../source/drag_drop.rst:37
msgid "Displayables"
msgstr ""

#: ../../source/drag_drop.rst:42
msgid "Examples"
msgstr ""

#: ../../source/drag_drop.rst:44
msgid "An example of a say screen that allows the user to choose the location of the window by dragging it around the screen.::"
msgstr ""

#: ../../source/drag_drop.rst:67
msgid "Here's a more complicated example, one that shows how dragging can be used to influence gameplay. It shows how dragging can be used to send a character to a location::"
msgstr ""

#: ../../source/drag_drop.rst:126
msgid "More complicated systems take significant programming skill to get right. The `Ren'Py cardgame framework <http://www.renpy.org/wiki/renpy/Frameworks#Cardgame>`_ is both an example of how to use drag and drop in a complex system, and useful for making card games in its own right."
msgstr ""

#: ../../source/drag_drop.rst:133
msgid "The ``as`` clause can be used to bind a drag to variable, which can then be used to call methods on the drag. ::"
msgstr ""

