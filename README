翻訳規約
翻訳中のドキュメントは以下のリンクから確認出来ます。
https://www.dropbox.com/s/yz7tql5a9iurfz1/html.zip?dl=0
現在の翻訳状況はStateファイルにあります。

翻訳をする上で守ってほしいことです。
守らなかった場合、貢献するどころか逆に害悪をもたらすことになってしまいます。
それはとても悲しいことなので、十分に注意して下さい。

*** 最重要 ***

* Google翻訳やExcite翻訳は禁止 (ライセンス的な意味でダメ。テロ行為)
 -- 上記のようなサイトで機械翻訳を行った場合、その訳の権利は翻訳ソフトの製造元に帰属します。
 -- 製造元が2次利用を明示的に認めない限り、これを使うことはできません。
 -- その他の翻訳機を使う際も、翻訳文が3条項BSDライセンス、MITライセンス、またはその互換ライセンスでなければなりません。


*** 重要 ***

* 自分が読んで理解できる翻訳を書く
* 定期的に自分の訳を読み返す
* 自信がない翻訳は全てFuzzyにする(POファイルのmsgid上に#, fuzzyと書いてください。)
例
#: ../../source/gui.rst:510
#, fuzzy
msgid "An example gui/frame.png image."
msgstr "gui/overlay/main_menu.png"

* 学校教育的な訳にこだわらない
 -- 分かりやすさが大切。厳密性にこだわらない。学校英語なんて○食らえ
* 翻訳前に、実際に Ren'Py を操作して確認する
 -- 翻訳精度が大きく向上するだけでなく、原文の間違いを指摘できます。


*** その他 ***

* 英語特有の問題:
  * 可能であれば、語順を原文に合わせる
   -- 例: Press Sheft+T to open the terminal.
   -- 悪い訳: 端末を開くためにShift+Tを押して下さい。
   -- 良い訳: Sheft+Tを押して端末を開いて下さい。

  * "..., ..., and ..." は、and を省略する。
   -- 例: X, Y, and Z are not supported.
   -- 悪い訳: X, Y, と Z には対応していません。
   -- 悪い訳: X と Y と Z には対応していません。
   -- 良い訳: X, Y, Z には対応していません。

* 原文がカンマで区切られた長めの文のときはカンマの位置で句点(。)を入れてみる
 -- 下手に長々と書くよりも、その方が読みやすくなることがあります。

* 語尾が長音になるものは、長音符を"書く"
 -- 例: フォルダ → フォルダー

* 固有名詞や人名をカタカナにしない。
 -- 例: Android, Ren'Py

* 英単語の両側には半角スペースを入れる
 -- 例: 次に say ステートメントの例を示します。

* マークアップ周りに気を使う(念の為、前後に半角スペースを入れる)
 -- 原文: Please also add your released game to our `games database <http://games.renpy.org>`_, so we can keep track of the Ren'Py games being made.
 -- 日訳: リリースされたゲームは、ぜひ `ゲームデータベース <http://games.renpy.org>` に登録してください。出来上がったゲームをこれで追跡できます。

* ダブルクォーテーション("...")はカギ括弧(「...」)にする

* If this is not None, ?
 -- None を指定するか、? を指定します。

*** 原文が間違っている場合 ***
開発元にバグ報告をするか、パッチを送ってください。

*** 単語帳 ***
ドキュメントに一貫性を持たせるために、一部の単語については次のルールに従って下さい。
ただし、下記の訳を使うことに違和感を覚えた場合は、翻訳をFuzzyにするようにして下さい。

* statement → ステートメント
* dialogue → 台詞 (稀に「会話/対話」)
* displayable → displayable (アルファベットのまま)
* image name → 画像名
* image tag  → 画像タグ
* image attribute → 画像属性
* at list → 式リスト
* simple expression → 単純式

*** 翻訳方法 ***
git 上で翻訳を進めます。
1. https://github.com/kyouryuukunn/renpy-doc-translation から fork を作成
2. ja.po ファイルを翻訳、Stateファイルの内容を変更したらpull requestを送ってください。

gitの使用方法が分からない場合は、上記のサイトから"clone or download"->"Download ZIP"からZIPでデータをダウンロードし、翻訳後のファイルをメールで送ってください。

まとめて送ると二重翻訳の危険があるため作業毎の送信を推奨します。

また、翻訳作業には PoEdit を推奨します。



**最新のrenpyからpoファイルを生成したい場合**
最近のバージョンでドキュメントをコンパイルするのに必要なファイルをrenpy/sphinx/build.shにより自分で
生成するようになりました。それにともない依存するライブラリが増えため、msysでのコンパイルは諦めた方がいいです。
Virtual BoxかWSLからLinux使いましょう

wslの場合
まず必要なファイルを用意
wslを起動して以下のコマンドを実行
sudo apt-get update
sudo apt install make
sudo apt install gettext
sudo apt install git
sudo apt install python-pip
pip install sphinx-bootstrap-theme\==0.4.11
pip install sphinx\==1.6.6.0
pip install future

1:任意のフォルダに開発中のrenpyをクローン
cd ~/
git clone https://github.com/renpy/renpy

2:update-po-from-potを~/renpyに配置

3:poファイルを作成
cd ~/renpy/sphinx
make gettext
cd ..
./update-po-from-pot

これで~/renpy/sphinx/localeにpotファイルが生成されます。これらを適当な名前に変更してください(日本語ならja.po)。
ja.poには翻訳前の文章が書かれているので、テキストエディタまたはpoeditという編集ソフトで翻訳後保存してください。


**poファイルからhtmlファイルを生成したい場合**
必要なもの:
gettext
python2
python2 sphinx, sphinx-bootstrap-theme(ver 0.4.11)
wsl or msys(windowsの場合)
poファイルが既にある場合は、msysでもドキュメントのコンパイルは可能です。

1:任意のフォルダに開発中のrenpyをクローン
cd ~/
git clone https://github.com/renpy/renpy

2:飜訳後のpoファイルを~/renpy/sphinx/localeの各フォルダに移動
cd ~/renpy/sphinx
make compile-po
LANGUAGE=ja make html

これで~/renpy/sphinx/buildにhtmlファイルが生成されます。
