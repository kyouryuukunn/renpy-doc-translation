# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2018, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-30 14:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/python.rst:7
msgid "Python Statements"
msgstr ""

#: ../../source/python.rst:9
msgid "Ren'Py is written in the Python programming language, and includes support for including Python inside Ren'Py scripts. Python support can be used for many things, from setting a flag to creating new displayables. This chapter covers ways in which Ren'Py scripts can directly invoke Python, through the various Python statements."
msgstr ""

#: ../../source/python.rst:19
msgid "Python"
msgstr ""

#: ../../source/python.rst:21
msgid "The ``python`` statement takes a block of Python, and runs the block when control reaches the statement. A basic Python statement can be very simple::"
msgstr ""

#: ../../source/python.rst:28
msgid "Python statements can get more complex, when necessary::"
msgstr ""

#: ../../source/python.rst:35
msgid "There are two modifiers to the Python statement that change its behavior:"
msgstr ""

#: ../../source/python.rst:45
msgid "``hide``"
msgstr ""

#: ../../source/python.rst:39
msgid "If given the hide modifier, the Python statement will run the block of Python in an anonymous scope. The scope will be lost when the Python block terminates."
msgstr ""

#: ../../source/python.rst:43
msgid "This allows Python to use temporary variables that can't be saved – but it means that the store needs to be accessed as fields on the store object, rather than directly."
msgstr ""

#: ../../source/python.rst:51
msgid "``in``"
msgstr ""

#: ../../source/python.rst:48
msgid "The ``in`` modifier takes a name. Instead of executing in the default store, the Python will execute in the store with that name."
msgstr ""

#: ../../source/python.rst:54
msgid "One-line Python Statement"
msgstr ""

#: ../../source/python.rst:56
msgid "A common case is to have a single line of Python that runs in the default store. For example, a Python one-liner can be used to initialize or update a flag. To make writing Python one-liners more convenient, there is the one-line Python statement."
msgstr ""

#: ../../source/python.rst:61
msgid "The one-line Python statement begins with the dollar-sign ``$`` character, and contains everything else on that line. Here are some example of Python one-liners::"
msgstr ""

#: ../../source/python.rst:77
msgid "Python one-liners always run in the default store."
msgstr ""

#: ../../source/python.rst:83
msgid "Init Python Statement"
msgstr ""

#: ../../source/python.rst:85
msgid "The ``init python`` statement runs Python at initialization time, before the game loads. Among other things, this can be used to define classes and functions, or to initialize styles, config variables, or persistent data. ::"
msgstr ""

#: ../../source/python.rst:105
msgid "A priority number can be placed between ``init`` and ``python``. When a priority is not given, 0 is used. Init statements are run in priority order, from lowest to highest. Init statements of the same priority are run in Unicode order by filename, and then from top to bottom within a file."
msgstr ""

#: ../../source/python.rst:110
msgid "To avoid conflict with Ren'Py, creators should use priorities in the range -999 to 999. Priorities of less than 0 are generally used for libraries and to set up themes. Normal init statements should have a priority of 0 or higher."
msgstr ""

#: ../../source/python.rst:115
msgid "Init python statements also take the ``hide`` or ``in`` clauses."
msgstr ""

#: ../../source/python.rst:117
msgid "Variables that have their value set in an init python block are not saved, loaded, and do not participate in rollback. Therefore, these variables should not be changed after init is over."
msgstr ""

#: ../../source/python.rst:124
msgid "Define Statement"
msgstr ""

#: ../../source/python.rst:126
msgid "The ``define`` statement sets a single variable to a value at init time. For example::"
msgstr ""

#: ../../source/python.rst:131
msgid "is equivalent to::"
msgstr ""

#: ../../source/python.rst:136
msgid "The define statement can take an optional named store (see below), by prepending it to the variable name with a dot. For example::"
msgstr ""

#: ../../source/python.rst:141
msgid "One advantage of using the define statement is that it records the filename and line number at which the assignment occurred, and makes that available to the navigation feature of the launcher."
msgstr ""

#: ../../source/python.rst:145
msgid "Variables that are defined using the define statement are treated as constant, are not saved or loaded, and should not be changed. (Ren'Py does not enforce this, but will produce undefined behavior when this is not the case.)"
msgstr ""

#: ../../source/python.rst:153
msgid "Default Statement"
msgstr ""

#: ../../source/python.rst:155
msgid "The ``default`` statement sets a single variable to a value if that variable is not defined when the game starts, or after a new game is loaded. For example::"
msgstr ""

#: ../../source/python.rst:161
msgid "When the variable ``points`` is not defined at game start, this statement is equivalent to::"
msgstr ""

#: ../../source/python.rst:167
msgid "When the variable ``points`` is not defined at game load, it's equivalent to::"
msgstr ""

#: ../../source/python.rst:172
msgid "The default statement can take an optional named store (see below), by prepending it to the variable name with a dot. For example::"
msgstr ""

#: ../../source/python.rst:181
msgid "Init Offset Statement"
msgstr ""

#: ../../source/python.rst:183
msgid "The ``init offset`` statement sets a priority offset for all statements that run at init time (init, init python, define, default, screen, transform, style, and more). The offset applies to all following statements in the current block and chold blocks, up to the next init priority statement. The statement::"
msgstr ""

#: ../../source/python.rst:191
msgid "sets the priority offset to 42. In::"
msgstr ""

#: ../../source/python.rst:201
msgid "The first define statement is run at priority 2, which means it runs after the second define statement, and hence ``foo`` winds up with a value of 2."
msgstr ""

#: ../../source/python.rst:206
msgid "Names in the Store"
msgstr ""

#: ../../source/python.rst:208
msgid "The default place that Ren'Py stores Python variables is called the store. It's important to make sure that the names you use in the store do not conflict."
msgstr ""

#: ../../source/python.rst:212
msgid "The define statement assigns a value to a variable, even when it's used to define a character. This means that it's not possible to use the same name for a character and a flag."
msgstr ""

#: ../../source/python.rst:216
msgid "The following faulty script::"
msgstr ""

#: ../../source/python.rst:229
msgid "will not work, because the variable ``e`` is being used as both a character and a flag. Other things that are usually placed into the store are transitions and transforms."
msgstr ""

#: ../../source/python.rst:233
msgid "Names beginning with underscore ``_`` are reserved for Ren'Py's internal use. In addition, there is an :ref:`Index of Reserved Names <reserved-names>`."
msgstr ""

#: ../../source/python.rst:238
msgid "Other Named Stores"
msgstr ""

#: ../../source/python.rst:240
msgid "Named stores provide a way of organizing Python functions and variables into modules. By placing Python in modules, you can minimize the chance of name conflicts."
msgstr ""

#: ../../source/python.rst:244
msgid "Named stores can be accessed by supplying the ``in`` clause to ``python`` or ``init python``, all of which run Python in a named store. Each store corresponds to a Python module. The default store is ``store``, while a named store is accessed as ``store.name``. These Python modules can be imported using the Python ``import`` statement, while names in the modules can be imported using the Python ``from`` statement."
msgstr ""

#: ../../source/python.rst:252
msgid "For example::"
msgstr ""

#: ../../source/python.rst:271
msgid "Named stores participate in save, load, and rollback in the same way that the default store does. The defined statement can be used to define names in a named store."
msgstr ""

#: ../../source/python.rst:279
msgid "First and Third-Party Python Modules and Packages"
msgstr ""

#: ../../source/python.rst:281
msgid "Ren'Py can import pure-Python modules and packages. First-party modules and packages – ones written for the game – can be placed directly into the game directory. Third party packages can be placed into the game/python-packages directory."
msgstr ""

#: ../../source/python.rst:286
msgid "For example, to install the requests package, one can change into the game's base directory, and run the command::"
msgstr ""

#: ../../source/python.rst:291
msgid "In either case, the module or package can be imported from an init python block::"
msgstr ""

#: ../../source/python.rst:299
msgid "Python defined in .rpy files is transformed to allow rollback to work. Python imported from .py files is not. As a result, objects created in Python will not work with rollback, and probably should not be changed after creation."
msgstr ""

