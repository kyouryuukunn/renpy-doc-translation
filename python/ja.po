# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-14 23:54+0900\n"
"PO-Revision-Date: 2024-04-22 23:27+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2015-03-29 05:43+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/python.rst:4
msgid "Python Statements"
msgstr "Python ステートメント"

#: ../../source/python.rst:6
msgid ""
"Ren'Py is written in the Python programming language, and includes support "
"for including Python inside Ren'Py scripts. Python support can be used for "
"many things, from setting a flag to creating new displayables. This chapter "
"covers ways in which Ren'Py scripts can directly invoke Python, through the "
"various Python statements."
msgstr ""
"Ren'Py は、Python プログラミング言語で書かれており、Ren'Py スクリプトの中に "
"Python のコードを埋め込められます。Python への対応は、フラグの設定から "
"displayable の新規作成まで、様々な場面で利用できます。この章では、Ren'Py のス"
"クリプトから Python コードのステートメントを直接呼び出す方法を説明します。"

#: ../../source/python.rst:12
msgid "Ren'Py 7 supports Python 2.7. Ren'Py 8 supports Python 3.9."
msgstr "Ren'Py 7 は Python 2.7 を、 Ren'Py 8 は Python 3.9 をサポートします。"

#: ../../source/python.rst:15
msgid ""
"If you know Python, you'll be able to take advantage of that. However, not "
"everything you know about Python will apply directly. For example. Python "
"packages that don't ship with Ren'Py may not work inside Ren'Py."
msgstr ""
"Python を知っているなら、それを活用できるでしょう。しかし Python について知っ"
"ていることがそのまま適用出来るわけではありません。たとえば Ren'Py には含まれ"
"ていない Python パッケージは Ren'Py 内で動作しません。"

#: ../../source/python.rst:19
msgid ""
"There are also some Python constructs that work, but may lead to problems in "
"saving. Please read the :doc:`save, load, and rollback <save_load_rollback>` "
"page for more details, especially the section on :ref:`what can't be saved "
"<cant-save>`. (You need to be careful with files, sockets, iterators, task, "
"futures, and generators.)"
msgstr ""
"また、いくつかのPythonのコンストラクトは動作しますが、セーブ時に問題が発生す"
"る可能性があります。詳しくは :doc:`セーブ、ロード、ロールバック "
"<save_load_rollback>` のページ、特に :ref:`何がセーブされないか <cant-save>` "
"にある保存できないものについてのセクションを読んでください (ファイル、ソケッ"
"ト、イテレータ、タスク、フューチャー、ジェネレータには注意が必要です）。"

#: ../../source/python.rst:25
msgid ""
"Finally, while many statements have Python equivalents, those equivalents "
"can be inferior. For example, Ren'Py can predict the ``show`` statement, and "
"load images early, but it can't predict the :func:`renpy.show` function."
msgstr ""
"最後に、多くのステートメントには Python で相当するものがありますが、それらは"
"劣っている可能性があります。例えば、Ren'Pyは ``show`` ステートメントを予測"
"し、画像を早期にロードできますが、 :func:`renpy.show` 関数は予測できません。"

#: ../../source/python.rst:32
msgid "Python"
msgstr "Python"

#: ../../source/python.rst:34
msgid ""
"The ``python`` statement takes a block of Python, and runs the block when "
"control reaches the statement. A basic Python statement can be very simple::"
msgstr ""
"``python`` ステートメントは python コードのブロックを受け取り、制御がそのス"
"テートメントまで到達するとそのコードを実行します。基本的な python ステートメ"
"ントはとても単純です。 ::"

#: ../../source/python.rst:41
msgid "Python statements can get more complex, when necessary::"
msgstr "python ステートメントは必要ならさらに複雑になります。"

#: ../../source/python.rst:48
msgid ""
"There are two modifiers to the Python statement that change its behavior:"
msgstr "python ステートメントにはその動作を変更するものが二つあります。 :"

#: ../../source/python.rst:58
msgid "``hide``"
msgstr "``hide``"

#: ../../source/python.rst:52
msgid ""
"If given the hide modifier, the Python statement will run the block of "
"Python in an anonymous scope. The scope will be lost when the Python block "
"terminates."
msgstr ""
"hide が与えられると python ステートメントは無名のスコープで python のブロック"
"を実行します。そのスコープは python ブロックが終了すると消失します。"

#: ../../source/python.rst:56
msgid ""
"This allows Python to use temporary variables that can't be saved – but it "
"means that the store needs to be accessed as fields on the store object, "
"rather than directly."
msgstr ""
"これで python コードに保存されない一時的な変数を使用可能になります。しかしそ"
"れはつまり store オブジェクトに直接ではなくフィールドとしてアクセスする必要が"
"あるということでもあります。"

#: ../../source/python.rst:64
msgid "``in``"
msgstr "``in``"

#: ../../source/python.rst:61
msgid ""
"The ``in`` modifier takes a name. Instead of executing in the default store, "
"the Python will execute in the store with that name."
msgstr ""
"``in`` は名前を受け取ります。デフォルトの store で実行する代わりに python "
"コードはその名前の store で実行されます。"

#: ../../source/python.rst:67
msgid "One-line Python Statement"
msgstr "一行 python"

#: ../../source/python.rst:69
msgid ""
"A common case is to have a single line of Python that runs in the default "
"store. For example, a Python one-liner can be used to initialize or update a "
"flag. To make writing Python one-liners more convenient, there is the one-"
"line Python statement."
msgstr ""
"デフォルトの store で実行される一行だけの python が欲しいというのはよくあるこ"
"とです。例えばフラグの初期化や更新には一行だけの python が使用されます。 一行"
"だけの python をより便利に記述するために、一行 python のステートメントがあり"
"ます。"

#: ../../source/python.rst:74
msgid ""
"The one-line Python statement begins with the dollar-sign ``$`` character, "
"and contains everything else on that line. Here are some example of Python "
"one-liners::"
msgstr ""
"一行 python ステートメントはドル記号 ``$`` で始まり、その行にコードのすべてを"
"含みます。ここでは 一行 python の例をいくつか示します。 ::"

#: ../../source/python.rst:90
msgid "Python one-liners always run in the default store."
msgstr "一行 python は常にデフォルトの store で実行されます。"

#: ../../source/python.rst:96
msgid "Init Python Statement"
msgstr "init python ステートメント"

#: ../../source/python.rst:98
msgid ""
"The ``init python`` statement runs Python at initialization time, before the "
"game loads. Among other things, this can be used to define classes and "
"functions, or to initialize styles, config variables, or persistent data. ::"
msgstr ""
"``init python`` ステートメントはゲームロード前の初期化時に python コードを実"
"行します。特にこのコードはクラス、関数の定義やスタイル、設定変数、永続データ"
"の初期化に使用されます。 ::"

#: ../../source/python.rst:118
msgid ""
"A priority number can be placed between ``init`` and ``python``. When a "
"priority is not given, 0 is used. Init statements are run in priority order, "
"from lowest to highest. Init statements of the same priority are run in "
"Unicode order by filepath, and then from top to bottom within a file."
msgstr ""
"優先度の値は ``init`` と ``python`` の間に配置出来ます。優先度が指定されない"
"と、 0 が使用されます。 init ステートメントは優先度の小さいものから大きいもの"
"の順に実行されます。 優先度の同じ init ステートメントはファイルパスのユニコー"
"ド順に、各ファイルの開始から終端まで実行されます。"

#: ../../source/python.rst:123
msgid ""
"To avoid conflict with Ren'Py, creators should use priorities in the range "
"-999 to 999. Priorities of less than 0 are generally used for libraries and "
"to set up themes. Normal init statements should have a priority of 0 or "
"higher."
msgstr ""
"Ren'Py 本体との衝突を防ぐため、開発者は -999 から 999 の範囲の優先度を使用す"
"るべきです。 0 以下の優先度は通常ライブラリーやテーマの設定に使用されます。通"
"常の init コードには優先度 0 かそれ以上を使用するべきです。"

#: ../../source/python.rst:128
msgid "Init python statements also take the ``hide`` or ``in`` clauses."
msgstr "init python ステートメントは ``hide`` や ``in`` 節も受け取ります。"

#: ../../source/python.rst:130
msgid ""
"Variables that have their value set in an init python block are not saved, "
"loaded, and do not participate in rollback. Therefore, these variables "
"should not be changed after init is over."
msgstr ""
"init python ブロックで値が設定された変数はその変数が参照するオブジェクトが変"
"更されない限りセーブ、ロードされず、ロールバックにも参加しません。それゆえこ"
"れらの変数は初期化後は変更されるべきではありません。"

#: ../../source/python.rst:136
msgid ""
"Classes created within Ren'py and inheriting nothing or explicitly "
"inheriting ``object``, and subclasses of these classes, do not support "
"``__slots__``. Trying to do so will misbehave with rollback in older "
"versions of renpy, and will raise errors in newer versions."
msgstr ""
"Ren'Py 内で作成され、何も継承しないか明示的に ``object`` を継承するクラス、お"
"よびこれらのクラスのサブクラスは、 ``__slots__`` をサポートしません。これを実"
"行しようとすると、古いバージョンのrenpyではロールバックの動作がおかしくなり、"
"新しいバージョンではエラーが発生します。"

#: ../../source/python.rst:141
msgid ""
"In order to have slotted classes, creators should explicitly subclass "
"``python_object``, which doesn't support rollback."
msgstr ""
"スロットを持つクラスを作成するには、ロールバックをサポートしない "
"``python_object`` を明示的にサブクラスとして作成する必要があります。"

#: ../../source/python.rst:147
msgid "Define Statement"
msgstr "define ステートメント"

#: ../../source/python.rst:149
msgid ""
"The ``define`` statement sets a single variable to a value at init time. The "
"variable is treated as constant, and should not be changed after being set. "
"For example::"
msgstr ""
"``define`` ステートメントは、初期化時に1つの変数を設定します。その変数は定数"
"として扱われるので設定後は変更しないべきです。例えば ::"

#: ../../source/python.rst:155
msgid "is equivalent (except for some advantages, see below) to::"
msgstr "これは (後述のいくつかの利点を除いて) 次と等しいです。"

#: ../../source/python.rst:160
msgid ""
"The define statement can take an optional named store (see below), by "
"prepending it to the variable name with a dot. The store is created if it "
"doesn't already exist. For example::"
msgstr ""
"define ステートメントはドットと変数名を続けて任意で名前付き store (以下参照) "
"も受け取られます。その store がなければ作成されます。例 ::"

#: ../../source/python.rst:166
msgid ""
"The define statement can take an optional index, making it possible to add "
"entries to a dictionary::"
msgstr ""
"define ステートメントは任意にインデックスも受け取れ、辞書に要素を追加させられ"
"ます。例 ::"

#: ../../source/python.rst:171
msgid ""
"In addition to ``=``, define can take two more operators. The ``+=`` "
"operator adds, and is generally used for list concatenaton. The ``|=`` or "
"operator is generally used to concatenate sets. For example::"
msgstr ""
"``=`` に加えて、define はあと2つのオペレーターを受け取れます。 ``+=`` オペ"
"ラーターは追加で、一般的にリストの連結に使用されます。 ``|=`` オペレーターは"
"一般的にセットの連結に使用されます。例 ::"

#: ../../source/python.rst:178
msgid ""
"One advantage of using the define statement is that it records the filename "
"and line number at which the assignment occurred, and makes that available "
"to the navigation feature of the launcher. Another advantage is that :ref:"
"`lint` will be able to check defined values, for example by detecting "
"whether the same variable is defined twice, potentially with different "
"values."
msgstr ""
"define ステートメントを使用する利点の 1 つは代入が行なわれたファイル名と行番"
"号を記録し、ランチャーのナビゲーション機能が利用可能になることです。もう一つ"
"の利点は :ref:`lint` で例えば、同じ変数が2重定義されているかを検出して、異な"
"る値を持つ定義された変数を確認できることです。"

#: ../../source/python.rst:185
msgid ""
"Variables that are defined using the define statement are treated as "
"constant, are not saved or loaded, and should not be changed. This constant-"
"nature extends to objects reachable through these variables through field "
"access and subscripting. (Ren'Py does not enforce this, but will produce "
"undefined behavior when this is not the case.)"
msgstr ""
"define ステートメントを使用して定義された変数は定数として扱われ、セーブロード"
"されないため、変更しないべきです。この定数の性質はフィールドアクセスや添え字"
"によってそれらの変数からアクセス出来るオブジェクトまで拡張されます(Ren'Py は"
"これを強制しませんが、守らない場合、未定義の動作をします)。"

#: ../../source/python.rst:194
msgid "Default Statement"
msgstr "default ステートメント"

#: ../../source/python.rst:196
msgid ""
"The ``default`` statement sets a single variable to a value if that variable "
"is not defined when the game starts, or after a new game is loaded. For "
"example::"
msgstr ""
"``default`` ステートメントは、ゲーム開始時かロード後に変数が定義されていなけ"
"ればその変数の値を設定します。例えば ::"

#: ../../source/python.rst:202
msgid ""
"When the variable ``points`` is not defined at game start, this statement is "
"equivalent to::"
msgstr ""
"変数 ``points`` がゲーム開始時に定義されていなければ、このステートメントは次"
"と等しいです。 ::"

#: ../../source/python.rst:208
msgid ""
"When the variable ``points`` is not defined at game load, it's equivalent "
"to::"
msgstr ""
"変数 ``points`` がゲームロード時に定義されていなければ、次と等しいです。 ::"

#: ../../source/python.rst:213
msgid ""
"The default statement can take an optional named store (see below), by "
"prepending it to the variable name with a dot. The store is created if it "
"doesn't already exist. For example::"
msgstr ""
"default ステートメントはドットと変数名を続けて任意で名前付き store (以下参"
"照) も受け取れます。その store がなければ作成されます。例 ::"

#: ../../source/python.rst:219
msgid ""
"As for the ``define`` statement, :ref:`lint` offers checks and optimizations "
"related to the ``default`` statement."
msgstr ""
"``define`` ステートメントと同じで :ref:`lint` は ``default`` ステートメントに"
"対するチェックと最適化を提供します。"

#: ../../source/python.rst:224
msgid ""
"It is highly recommended to ``default`` every variable in your game that is "
"susceptible to change. If you use ``init python`` or ``define`` to declare a "
"variable, when a player play a game and changes that variable, then goes "
"back to the main menu and starts a new game, the variable will not have the "
"value set in ``init python`` and so the former game will \"leak\" in the "
"newly started one. If you create these variables in the start label instead, "
"they will be missing when you load a save file that existed before."
msgstr ""
"ゲームの中で変更されやすい変数はすべて ``default`` にすることを強くお勧めしま"
"す。もし ``init python`` や ``define`` を使って変数を宣言した場合、プレイヤー"
"がゲームをプレイしてその変数を変更した後、メインメニューに戻って新しいゲーム"
"を始めると、その変数には ``init python`` で設定した値がないので、前のゲームが"
"新しく始めたゲームに \"leak\" します。代わりにスタートラベルにこれらの変数を"
"作成すると、以前から存在したセーブファイルをロードしたときに、これらの変数が"
"欠落することになります。"

#: ../../source/python.rst:233
msgid "Names in the Store"
msgstr "Store の名前"

#: ../../source/python.rst:235
msgid ""
"The default place that Ren'Py stores Python variables is called the store. "
"It's important to make sure that the names you use in the store do not "
"conflict."
msgstr ""
"Ren'Py が Python 変数を格納するデフォルトの場所は store と呼ばれます。 store "
"で使用する名前が衝突しないかの確認は重要です。"

#: ../../source/python.rst:239
msgid ""
"The define statement assigns a value to a variable, even when it's used to "
"define a character. This means that it's not possible to use the same name "
"for a character and a flag."
msgstr ""
"define ステートメントは値を、それがキャラクターの定義に使用されていても変数に"
"代入します。つまりキャラクターとフラグに同じ名前は使用出来ません"

#: ../../source/python.rst:243
msgid "The following faulty script::"
msgstr "以下のコードには欠陥があります。 ::"

#: ../../source/python.rst:256
msgid ""
"will not work, because the variable ``e`` is being used as both a character "
"and a flag. Other things that are usually placed into the store are "
"transitions and transforms."
msgstr ""
"これは変数 ``e`` がキャラクターとフラグの両方に使用されているため動作しませ"
"ん。通常 store に格納されるその他の物にはトランジションと transform がありま"
"す。。"

#: ../../source/python.rst:260
msgid ""
"Names beginning with underscore ``_`` are reserved for Ren'Py's internal "
"use. In addition, there is an :doc:`Index of Reserved Names <reserved>`."
msgstr ""
"アンダースコア \"_\" で初まる名前は Ren'Py 内部で使用するものとして扱われま"
"す。詳しくは以下を参照してください。 :doc:`Index of Reserved Names "
"<reserved>`"

#: ../../source/python.rst:266
msgid "Other Named Stores"
msgstr "その他の名前付き store"

#: ../../source/python.rst:268
msgid ""
"Named stores provide a way of organizing Python functions and variables into "
"modules. By placing Python in named stores, you can minimize the chance of "
"name conflicts. Each store corresponds to a Python module. The default store "
"is ``store``, while a named store is accessed as ``store.named``."
msgstr ""
"名前付きの store はpython の関数と変数をモジュールに分ける方法を提供します。"
"モジュールにコードを置くと名前が衝突する機会を減らせます。各 store は 1 つの "
"Python モジュールに対応します。デフォルト store は ``store`` で、名前付き "
"store は ``store.named`` としてアクセスできます。"

#: ../../source/python.rst:274
msgid ""
"Named stores can be created using ``python in`` blocks (or their ``init "
"python`` or ``python early`` variants), or using ``default``, ``define`` or :"
"ref:`transform <transform-statement>` statements. Variables in can be "
"imported individually using ``from store.named import variable``, and a "
"named store itself can be imported using ``from store import named``."
msgstr ""
"名前付きストアは ``python in`` (または ``init python`` や ``python early`` の"
"ようなもの) や ``default``, ``define``, :ref:`transform<transform-"
"statement>` ステートメントを使って作成できます。変数は ``from store.named "
"import variable`` で個別にインポートでき、名前付き store 自体は ``from store "
"import named`` でインポートできます。"

#: ../../source/python.rst:280
msgid ""
"Named stores can be accessed by supplying the ``in`` clause to ``python`` or "
"``init python`` (or ``python early``), all of which run the Python they "
"contain in the given named store."
msgstr ""
"名前付き store は ``python`` や ``init python`` (または ``python early``) に "
"``in`` 節を与えてアクセスでき、これらはすべて指定の名前付き store に含まれる "
"Python を実行します。"

#: ../../source/python.rst:284
msgid "For example::"
msgstr "例 ::"

#: ../../source/python.rst:310
msgid ""
"From a ``python in`` block, the default \"outer\" store can be accessed "
"using either ``renpy.store``, or ``import store``."
msgstr ""
"``python in`` ブロックからはデフォルト \"outer\" store は ``renpy.store`` や "
"``import store`` によりアクセス可能です。"

#: ../../source/python.rst:313
msgid ""
"Named stores participate in save, load, and rollback in the same way that "
"the default store does. Special namespaces such as ``persistent``, "
"``config``, ``renpy``... do not and never have supported substore creation "
"within them."
msgstr ""
"名前付きの store はデフォルトの store 同様にセーブロード、ロールバックに参加"
"します。 ``persistent``, ``config``, ``renpy`` などのような特別な名前空間はそ"
"うではなく、その中への substore 作成もサポートしません。"

#: ../../source/python.rst:322
msgid "Constant Stores"
msgstr "定数 store"

#: ../../source/python.rst:324
msgid ""
"A named store can be declared to be constant by setting a variable named "
"``_constant`` to a true value, using, for example::"
msgstr ""
"名前付きの store はその ``_constant`` という名前の変数を True に設定して定数"
"であると宣言できます。例 ::"

#: ../../source/python.rst:330
msgid ""
"When a store is constant, variables in that store are not saved, and objects "
"reachable solely from those variables do not participate in rollback."
msgstr ""
"ある store が定数であるとき、その store の変数は保存されず、それらの変数から"
"のみアクセス出来るオブジェクトはロールバックに参加しません。"

#: ../../source/python.rst:333
msgid ""
"Variables in a constant store can be changed during the init phase. It's "
"only after init (including statements like ``define``, ``transform``, etc.) "
"completes that the store must be treated as constant."
msgstr ""
"定数 store の変数は初期化時の間は変更できます。その store が定数として扱われ"
"なければいけないのは初期化 ( ``define`` や ``transfor`` ステートメントなどを"
"含め ) 完了後のみです。"

#: ../../source/python.rst:337
msgid ""
"As Ren'Py has no way of enforcing this, it is the responsibility of the "
"creator to ensure that variables in a constant store do not change after the "
"init phase."
msgstr ""
"Ren'Py にはこれを強制する方法はないので、定数 store の変数が初期化後には変更"
"されないと保証するのは制作者の責任です。"

#: ../../source/python.rst:340
msgid ""
"The reason for declaring a store constant is that each store and variable "
"incurs a small amount of overhead to support saving, loading, and rollback. "
"A constant store avoids this overhead."
msgstr ""
"store が定数であると宣言する理由は、各 store と変数にはセーブ、ロード、ロール"
"バックをサポートするためのオーバーヘッドが僅かながらあるためです。定数 store "
"はこのオーバーヘッドを回避します。"

#: ../../source/python.rst:344
msgid "The following stores are declared constant by default::"
msgstr "以下の store はデフォルトで定数として宣言されています。"

#: ../../source/python.rst:362
msgid "JSONDB"
msgstr "JSONDB"

#: ../../source/inc/jsondb:5
msgid ""
"A JSONDB is a two-level database that uses JSON to store its data It's "
"intended to be used by game developers to store data in a database that can "
"be version-controlled as part of the game script. For example, this can "
"store information associated with each say statement, that can change how a "
"say statement is displayed."
msgstr ""
"JSONDB は、 JSON を使用してデータを保存する2階層データベースです。ゲーム開発"
"者が、ゲームスクリプトの一部としてバージョン管理可能なデータベースにデータを"
"保存するのに使用することを目的としています。例えば、 say ステートメントの表示"
"方法を変更できるような、各say ステートメントに関連する情報を保存できます。"

#: ../../source/inc/jsondb:11
msgid ""
"JSONDBs are not intended for data that is changed through or because of the "
"player's actions. :doc:`persistent` or normal save files are better choices "
"for that data."
msgstr ""
"JSONDB は、プレイヤーの行動によって変化するデータには向きません。そのような"
"データには、 :doc:`persistent` や通常のセーブファイルの方が適しています。"

#: ../../source/inc/jsondb:15
msgid ""
"The database should only contain data that Python can serialize to JSON. "
"This includes lists, dictionaries (with strings as keys), strings, numbers, "
"True, False, and None. See `the Python documentation <https://docs.python."
"org/3/library/json.html#encoders-and-decoders>`__ about interoperability, "
"how data converts between the two formats, and the various associated "
"pitfalls."
msgstr ""
"データベースには、 Python が JSON にシリアライズできるデータのみを格納する必"
"要があります。これにはリスト、（文字列をキーとする）辞書、文字列、数値、 "
"True 、 False 、 None が含まれます。相互運用性や2つのフォーマット間でのデータ"
"の変換方法、関連する様々な落とし穴については、 `Python documentation "
"<https://docs.python.org/3/library/json.html#encoders-and-decoders>`__ を参照"
"してください。"

#: ../../source/inc/jsondb:22
msgid ""
"The two levels of the database are dictionaries both keyed by strings. The "
"first level is read only - when a key on the first level dictionary is "
"accessed, a second level dictionary is created, optionally with default "
"contents. The second level dictionary is read-write, and when one of the "
"keys in a second level dictionary is changed, that change is saved to the "
"database whe the game exits."
msgstr ""
"データベースの2つの階層は、どちらも文字列をキーとする辞書です。第1階層は読み"
"取り専用で、第1階層辞書のキーにアクセスすると、第2階層辞書が作成され、オプ"
"ションでデフォルトの内容を持ちます。第2階層の辞書は読み書き可能で、第2階層の"
"辞書のキーの1つが変更されると、ゲームが終了するときにその変更がデータベースに"
"保存されます。"

#: ../../source/inc/jsondb:29
msgid "Like other persistent data, JSONDBs do not participate in rollback."
msgstr "他の永続データ同様、 JSONDB はロールバックに参加しません。"

#: ../../source/inc/jsondb:31
msgid ""
"A JSONDB should be created during init (in an init python block or define "
"statement), and will automatically be saved to the disk provided at least "
"one key in the dictionary is set. For example::"
msgstr ""
"JSONDB は初期化中 ( init python ブロックや define ステートメント ) に作成され"
"るべきで、少なくとも辞書のキーが1つ設定されれば自動的にディスクに保存されま"
"す。 例 ::"

#: ../../source/inc/jsondb:37
msgid ""
"This creates a JSONDB that is stored in the file balloon.json, and has a "
"default values. The second leval values can be used as normal dictionaries::"
msgstr ""
"これは balloon.json ファイルに JSONDB を作成し、デフォルトの値を持たせます。"
"第二階層の値は通常の辞書として使用出来ます。 ::"

#: ../../source/inc/jsondb:53
msgid "The JSONDB constructor takes the following arguments:"
msgstr "JSONDB のコンストラクトは次の引数を取ります。 :"

#: ../../source/inc/jsondb:57
msgid "`filename`"
msgstr "`filename`"

#: ../../source/inc/jsondb:56
msgid ""
"The filename the database is stored in. This is relative to the game "
"directory. It's recommended that the filename end in \".json\"."
msgstr ""
"そのデータベースが保存されるファイル名です。これはゲームディレクトリーに対し"
"て相対指定です。 \".json\" でファイル名を終えることを推奨します。"

#: ../../source/inc/jsondb:63
msgid "`default`"
msgstr "`default`"

#: ../../source/inc/jsondb:60
msgid ""
"If this is not None, it should be a dictionary. When a new second level "
"dictionary is created, this object is shallow copied and used to initialized "
"the new dictionary. The new dictionary will only be saved as part of the "
"database if at least one key in it is saved."
msgstr ""
"None でなければ、辞書を指定します。新しい第二階層の辞書が作成されると、このオ"
"ブジェクトはシャローコピーされ、その新しい辞書の初期化に使用されます。新しい"
"辞書は少なくとも1つのキーが保存された場合のみ、データベースの一部として保存さ"
"れます。"

#: ../../source/python.rst:370
msgid "First and Third-Party Python Modules and Packages"
msgstr "本体、サードパーティーの Python モジュールとパッケージ"

#: ../../source/python.rst:372
msgid ""
"Ren'Py can import pure-Python modules and packages. First-party modules and "
"packages – ones written for the game – can be placed directly into the game "
"directory. Third party packages can be placed into the game/python-packages "
"directory."
msgstr ""
"Ren'Py は純粋な python モジュールとパッケージをインポートできます。ゲームのた"
"めに書かれた本体のモジュールとパッケージは game ディレクトリーに直接配置され"
"ます。サードパーティーのパッケージは game/python-packages ディレクトリーに配"
"置できます。"

#: ../../source/python.rst:377
msgid ""
"For example, to install the python-dateutil package, one can change into the "
"game's base directory, and run the command::"
msgstr ""
"例えば python-dateutil パッケージをインストールするにはゲームのベースディレク"
"トリーを自環境に合わせて次のコマンドを実行します。 ::"

#: ../../source/python.rst:382
msgid ""
"In either case, the module or package can be imported from an init python "
"block::"
msgstr ""
"モジュールとパッケージどちらでも init python ブロックからインポート出来ま"
"す。 ::"

#: ../../source/python.rst:390
msgid ""
"Python defined in .rpy files is transformed to allow rollback to work. "
"Python imported from .py files is not. As a result, objects created in "
"Python will not work with rollback, and probably should not be changed after "
"creation."
msgstr ""
".rpy ファイルで定義された Python コードは、ロールバックで動作するために変換さ"
"れます。 .py ファイルからインポートされた Python コードは変換されません。その"
"ため、 python コードで作成されたオブジェクトはロールバックで動作しないので、"
"作成後は変更するべきではありません。"

#: ../../source/python.rst:395
msgid ""
"Not all Python packages are compatible with Ren'Py. It's up to you to audit "
"the packages you install and make sure the packages will work."
msgstr ""
"すべての Python パッケージが Ren'Py と互換性があるわけではありません。インス"
"トールするパッケージを監査し、そのパッケージが動作するかどうかを確認するのは"
"あなたです。"

#~ msgid "Injecting Python"
#~ msgstr "Pythonのインジェクション"

#~ msgid ""
#~ "Python can be injected into a game at runtime by creating a file named "
#~ "``exec.py`` in the base directory. It's suggested that this file is "
#~ "created under a different name, edited, and then atomically moved into "
#~ "place."
#~ msgstr ""
#~ "ベースディレクトリに ``exec.py`` という名前のファイルを作成して、ゲーム実"
#~ "行時に python を挿入できます。このファイルは別の名前で作成、編集してから移"
#~ "動することを推奨します。"

#~ msgid ""
#~ "When Ren'Py sees a file named ``exec.py``, it will load the contents of "
#~ "the file, delete the file, and execute the contents in the game store "
#~ "using Python's ``exec``. This is always done during an interaction."
#~ msgstr ""
#~ "Ren'Pyは ``exec.py``という名前のファイルを見つけると、そのファイルの内容を"
#~ "読み込んでから削除し、 Python の ``exec`` を使ってゲームストア内でその内容"
#~ "を実行します。これは常にインタラクション中に行われます。"

#~ msgid "This is intended to support debugging tools."
#~ msgstr "これはデバッグツールのサポートを目的としています。"

#~ msgid ""
#~ "The ``define`` statement sets a single variable to a value at init time. "
#~ "For example::"
#~ msgstr ""
#~ "``define``  ステートメントは初期化時、変数に値を設定します。例えば ::"

#~ msgid "Init Offset Statement"
#~ msgstr "init offset ステートメント"

#~ msgid ""
#~ "The ``init offset`` statement sets a priority offset for all statements "
#~ "that run at init time (init, init python, define, default, screen, "
#~ "transform, style, and more). The offset applies to all following "
#~ "statements in the current block and child blocks, up to the next init "
#~ "priority statement. The statement::"
#~ msgstr ""
#~ "``init offset`` ステートメントは初期化時に実行するすべてのステートメント "
#~ "( init, init python, define, default, screen, transform, style, など ) に"
#~ "対して優先度のオフセットを設定します。オフセットは現在のブロックとコードブ"
#~ "ロック内のすべての後続のステートメントに次の優先度ステートメントが来るまで"
#~ "適応されます。例 :: "

#~ msgid "sets the priority offset to 42. In::"
#~ msgstr "このコードでは優先度のオフセットを 42 に設定しています。 ::"

#~ msgid ""
#~ "The first define statement is run at priority 2, which means it runs "
#~ "after the second define statement, and hence ``foo`` winds up with a "
#~ "value of 2."
#~ msgstr ""
#~ "最初の deffine ステートメントは優先度 2 で実行されるので 二つ目の define "
#~ "ステートメントの後に実行されます。 ``foo`` は 2 の値になります。"

#~ msgid ""
#~ "Named stores can be accessed by supplying the ``in`` clause to ``python`` "
#~ "or ``init python``, all of which run Python in a named store. Each store "
#~ "corresponds to a Python module. The default store is ``store``, while a "
#~ "named store is accessed as ``store.name``. Names in the modules can be "
#~ "imported using the Python ``from`` statement. Named stores can be created "
#~ "using ``init python in`` blocks, or using default or define statements."
#~ msgstr ""
#~ "名前付きの store は ``in`` 節を ``python`` や ``init python`` に与えるとア"
#~ "クセス可能で、コードは名前付き store で実行されます。各 store は python モ"
#~ "ジュールに対応します。デフォルトのstore は ``store`` で、名前付きの store "
#~ "は ``store.name`` でアクセスされます。モジュール内の名前は python の "
#~ "``from`` ステートメントを使用してインポート出来ます。名前付き store は "
#~ "``init python in`` ブロックや default, define ステートメントを使用して作成"
#~ "できます。"

#~ msgid "is equivalent to::"
#~ msgstr "これは以下と等価です。 ::"

#~ msgid ""
#~ "Ren'Py currently supports Python 2.7, though we strongly recommend you "
#~ "write Python that runs in Python 2 and Python 3."
#~ msgstr ""
#~ "Ren'Py は現在Python 2.7 をサポートしますが、Python2 と 3 両方で動作するよ"
#~ "うな記述を強く推奨します。"

#~ msgid ""
#~ "Ren'Py is written in the Python programmming language, and includes "
#~ "support for including python code inside Ren'Py scripts. Python support "
#~ "can be used for many things, from setting a flag to creating new "
#~ "displayables. This chapter covers ways in which Ren'Py scripts can "
#~ "directly invoke Python code, through the various python statements."
#~ msgstr ""
#~ "Ren'Py は、Python プログラミング言語で書かれており、Ren'Py スクリプトの中"
#~ "に Python のコードを埋め込むことに対応しています。Python への対応は、フラ"
#~ "グの設定から displayable の新規作成まで、様々な場面で利用できます。この章"
#~ "では、Ren'Py のスクリプトから Python コードのステートメントを直接呼び出す"
#~ "方法を説明します。"
