# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2019, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-31 16:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/udd.rst:9
msgid "Creator-Defined Displayables"
msgstr ""

#: ../../source/udd.rst:11
msgid "The most complex, but most powerful, way of customizing Ren'Py's behavior is to use a creator-defined displayable. A creator-defined displayable is allowed to take arbitrary pygame events. It can also render other displayables, and place them at arbitrary locations on the screen. This makes it suitable for creating 2D mini-games that cannot be expressed with the tools Ren'Py gives you. (But see also the section :ref:`sprites <sprites>`, which describes a higher-level way of accomplishing many of the same things.)"
msgstr ""

#: ../../source/udd.rst:20
msgid "Creator-defined displayables are programmed entirely in Python, and we encourage you to have a reasonable degree of skill at object-oriented Python programming before you begin creating one."
msgstr ""

#: ../../source/udd.rst:25
msgid "Example"
msgstr ""

#: ../../source/udd.rst:27
msgid "Here's an example of a creator-defined displayable. This displayable changes renders its child with an alpha that is determined by the distance of the mouse pointer from the center of the child. ::"
msgstr ""

#: ../../source/udd.rst:106
msgid "To use the creator-defined displayable, we can create an instance of it, and add that instance to the screen. ::"
msgstr ""

#: ../../source/udd.rst:123
msgid "renpy.Displayable"
msgstr ""

#: ../../source/udd.rst:125
msgid "A creator-defined displayable is created by subclassing the renpy.Displayable class. A creator-defined displayable must override the render method, and may override other methods as well."
msgstr ""

#: ../../source/udd.rst:129
msgid "A displayable object must be pickleable, which means it may not contain references to objects that cannot be pickled. Most notably, Render objects cannot be stored in a creator-defined displayable."
msgstr ""

#: ../../source/udd.rst:133
msgid "Since we expect you to override the methods of the displayable class, we'll present them with the `self` parameter."
msgstr ""

#: ../../source/udd.rst:138
msgid "Base class for creator-defined displayables."
msgstr ""

#: ../../source/udd.rst:142
msgid "A subclass may override the constructor, perhaps adding new parameters. If it does, it should pass all unknown keyword arguments to the renpy.Displayable constructor, with the call::"
msgstr ""

#: ../../source/udd.rst:151
msgid "Subclasses must override this, to return a :class:`renpy.Render` object. The render object determines what, if anything, is shown on the screen."
msgstr ""

#: ../../source/udd.rst:157
#: ../../source/udd.rst:230
#: ../../source/inc/udd_utility:45
msgid "`width`, `height`"
msgstr ""

#: ../../source/udd.rst:156
msgid "The amount of space available to this displayable, in pixels."
msgstr ""

#: ../../source/udd.rst:162
#: ../../source/udd.rst:194
msgid "`st`"
msgstr ""

#: ../../source/udd.rst:160
msgid "A float, the shown timebase, in seconds. The shown timebase begins when this displayable is first shown on the screen."
msgstr ""

#: ../../source/udd.rst:168
msgid "`at`"
msgstr ""

#: ../../source/udd.rst:165
msgid "A float, the animation timebase, in seconds. The animation timebase begins when an image with the same tag was shown, without being hidden. (When the displayable is shown without a tag, this is the same as the shown timebase.)"
msgstr ""

#: ../../source/udd.rst:170
msgid "The render method is called when the displayable is first shown. It can be called again if :func:`renpy.redraw` is called on this object."
msgstr ""

#: ../../source/udd.rst:176
msgid "The event method is called to pass a pygame event to the creator-defined displayable. If the event method returns a value other than None, that value is returned as the result of the interaction."
msgstr ""

#: ../../source/udd.rst:181
msgid "The event method exists on other displayables, allowing the creator-defined displayable to pass on the event."
msgstr ""

#: ../../source/udd.rst:185
msgid "`ev`"
msgstr ""

#: ../../source/udd.rst:185
msgid "An `event object <http://www.pygame.org/docs/ref/event.html>`_"
msgstr ""

#: ../../source/udd.rst:191
msgid "`x`, `y`"
msgstr ""

#: ../../source/udd.rst:188
msgid "The x and y coordinates of the event, relative to the upper-left corner of the displayable. These should be used in preference to position information found in the pygame event objects."
msgstr ""

#: ../../source/udd.rst:194
msgid "A float, the shown timebase, in seconds."
msgstr ""

#: ../../source/udd.rst:196
msgid "An event is generated at the start of each interaction, and :func:`renpy.timeout` can be used to cause another event to occur."
msgstr ""

#: ../../source/udd.rst:202
msgid "This method is called at the start of each interaction. It can be used to trigger a redraw, and probably should be used to trigger a redraw if the object participates in rollback."
msgstr ""

#: ../../source/udd.rst:208
msgid "If the displayable has child displayables, this method should be overridden to return a list of those displayables. This ensures that the per_interact methods of those displayables are called, and also allows images used by those displayables to be predicted."
msgstr ""

#: ../../source/udd.rst:215
msgid "renpy.Render"
msgstr ""

#: ../../source/udd.rst:217
msgid "Creator-defined displayables work with renpy.Render objects. Render objects are returned by calling the :func:`renpy.render` function on a displayable. A creator-defined displayable should create a Render object by calling :class:`renpy.Render` from its render method."
msgstr ""

#: ../../source/udd.rst:222
msgid "Since the render object isn't intended to be subclassed, we will omit the implicit `self` parameter."
msgstr ""

#: ../../source/udd.rst:227
msgid "Creates a new Render object."
msgstr ""

#: ../../source/udd.rst:230
msgid "The width and height of the render object, in pixels."
msgstr ""

#: ../../source/udd.rst:234
msgid "Draws another render object into this render object."
msgstr ""

#: ../../source/udd.rst:237
msgid "`source`"
msgstr ""

#: ../../source/udd.rst:237
msgid "The render object to draw."
msgstr ""

#: ../../source/udd.rst:242
msgid "`pos`"
msgstr ""

#: ../../source/udd.rst:240
msgid "The location to draw into. This is an (x, y) tuple with the coordinates being pixels relative to the upper-left corner of the target render."
msgstr ""

#: ../../source/udd.rst:245
#: ../../source/udd.rst:264
msgid "`main`"
msgstr ""

#: ../../source/udd.rst:245
msgid "A keyword-only parameter. If true, `source` will be displayed in the style inspector."
msgstr ""

#: ../../source/udd.rst:250
msgid "Renders `d` and places it into the rectangle defined by the `x`, `y`, `width`, and `height`, using Ren'Py's standard placement algorithm."
msgstr ""

#: ../../source/udd.rst:255
msgid "`x`, `y`, `width`, `height`"
msgstr ""

#: ../../source/udd.rst:254
msgid "The rectangle to place in. If `width` or `height`, when None, are the width and height of this render, respectively."
msgstr ""

#: ../../source/udd.rst:259
#: ../../source/inc/udd_utility:48
msgid "`st`, `at`"
msgstr ""

#: ../../source/udd.rst:258
msgid "The times passed to Render. If None, defaults to the times passed to the render method calling this method."
msgstr ""

#: ../../source/udd.rst:262
msgid "`render`"
msgstr ""

#: ../../source/udd.rst:262
msgid "If not None, this is used instead of rendering `d`."
msgstr ""

#: ../../source/udd.rst:265
msgid "As for .blit()."
msgstr ""

#: ../../source/udd.rst:269
msgid "Returns a canvas object. A canvas object has methods corresponding to the `pygame.draw <http://www.pygame.org/docs/ref/draw.html>`_ functions, with the first parameter (the surface) omitted."
msgstr ""

#: ../../source/udd.rst:274
msgid "Canvas objects also have a get_surface() method that returns the pygame Surface underlying the canvas."
msgstr ""

#: ../../source/udd.rst:279
msgid "Returns a (width, height) tuple giving the size of this render."
msgstr ""

#: ../../source/udd.rst:284
msgid "Returns a render consisting of a rectangle cut out of this render."
msgstr ""

#: ../../source/udd.rst:287
msgid "`rect`"
msgstr ""

#: ../../source/udd.rst:288
msgid "A (x, y, width, height) tuple."
msgstr ""

#: ../../source/udd.rst:292
msgid "Sets the zoom level of the children of this displayable in the horitzontal and vertical axes. Only the children of the displayable are zoomed â€“ the width, height, and blit coordinates are not zoomed."
msgstr ""

#: ../../source/udd.rst:299
msgid "Utility Functions"
msgstr ""

#: ../../source/udd.rst:301
msgid "These function manage the rendering process."
msgstr ""

#: ../../source/inc/udd_utility:5
msgid "This takes `d`, which may be a displayable object or a string. If it's a string, it converts that string into a displayable using the usual rules."
msgstr ""

#: ../../source/inc/udd_utility:11
msgid "If `value` is not None, immediately ends the current interaction, causing the interaction to return `value`. If `value` is None, does nothing."
msgstr ""

#: ../../source/inc/udd_utility:14
msgid "This can be called from inside the render and event methods of a creator-defined displayable."
msgstr ""

#: ../../source/inc/udd_utility:19
msgid "Loads the image manipulator `im` using the image cache, and returns a render."
msgstr ""

#: ../../source/inc/udd_utility:23
msgid "Loads the image manipulator `im` using the image cache, and returns a pygame Surface."
msgstr ""

#: ../../source/inc/udd_utility:27
msgid "Returns true if the pygame event `ev` matches `keysym`"
msgstr ""

#: ../../source/inc/udd_utility:33
msgid "`keysym`"
msgstr ""

#: ../../source/inc/udd_utility:30
msgid "One of:"
msgstr ""

#: ../../source/inc/udd_utility:32
msgid "The name of a keybinding in :var:`config.keymap`."
msgstr ""

#: ../../source/inc/udd_utility:33
msgid "A keysym, as documented in the :ref:`keymap` section."
msgstr ""

#: ../../source/inc/udd_utility:34
msgid "A list containing one or more keysyms."
msgstr ""

#: ../../source/inc/udd_utility:38
msgid "Causes a displayable to be rendered, and a renpy.Render object to be returned."
msgstr ""

#: ../../source/inc/udd_utility:42
msgid "`d`"
msgstr ""

#: ../../source/inc/udd_utility:42
msgid "The displayable to render."
msgstr ""

#: ../../source/inc/udd_utility:45
msgid "The width and height available for the displayable to render into."
msgstr ""

#: ../../source/inc/udd_utility:48
msgid "The shown and animation timebases."
msgstr ""

#: ../../source/inc/udd_utility:50
msgid "Renders returned by this object may be cached, and should not be modified once they have been retrieved."
msgstr ""

#: ../../source/inc/udd_utility:55
msgid "Causes an event to be generated before `seconds` seconds have elapsed. This ensures that the event method of a user-defined displayable will be called."
msgstr ""

#: ../../source/udd.rst:307
msgid "Causes the displayable `d` to be redrawn after `when` seconds have elapsed."
msgstr ""

