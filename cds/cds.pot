# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-27 14:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/cds.rst:7
msgid "Creator-Defined Statements"
msgstr ""

#: ../../source/cds.rst:9
msgid "Creator-Defined Statements (CDS) allow you to add your own statements to Ren'Py. This makes it possible to add things that are not supported by the current syntax of Ren'Py. CDS are more flexible than the direct Python code. Most often, CDS are used when you have a repeatable construction. For example, calling a function with one argument. Ren'Py does not know what this function does and how it should be executed, so Ren'Py does not do anything with it until execution and has an error if an exception occurs. Using the CDS allows you to check the correctness of the syntax using parse (for example, check that the argument is a valid string), to ignore incorrect data at execution (for non-critical functions, it is better to skip the execute than to throw an exception), predict displayables (if the function uses them), and give you addition information during lint (if at runtime it was ignored you can have a report here). The CDS does not guarantee that the execution will be successful, but the better you code your statement, the better Ren'Py can \"understand\" what you expect from it."
msgstr ""

#: ../../source/cds.rst:24
msgid "Creator-defined statements must be defined in a ``python early`` block. What's more, the filename containing the user-defined statement must be be loaded earlier than any file that uses it. Since Ren'Py loads files in Unicode sort order, it generally makes sense to prefix the name of any file containing a user-defined statement with 01, or some other small number."
msgstr ""

#: ../../source/cds.rst:30
msgid "A creator-defined statement cannot be used in the file in which it is defined."
msgstr ""

#: ../../source/cds.rst:32
msgid "Creator-defined statement are registered using the :func:`renpy.register_statement` function."
msgstr ""

#: ../../source/inc/statement_register:5
msgid "This registers a user-defined statement."
msgstr ""

#: ../../source/inc/statement_register:10
msgid "`name`"
msgstr ""

#: ../../source/inc/statement_register:8
msgid "This is either a space-separated list of names that begin the statement, or the empty string to define a new default statement (the default statement will replace the say statement)."
msgstr ""

#: ../../source/inc/statement_register:17
msgid "`block`"
msgstr ""

#: ../../source/inc/statement_register:13
msgid "When this is False, the statement does not expect a block. When True, it expects a block, but leaves it up to the lexer to parse that block. If the string \"script\", the block is interpreted as containing one or more Ren'Py script language statements. If the string \"possible\", the block expect condition is determined by the parse function."
msgstr ""

#: ../../source/inc/statement_register:22
msgid "`parse`"
msgstr ""

#: ../../source/inc/statement_register:20
msgid "This is a function that takes a Lexer object. This function should parse the statement, and return an object. This object is passed as an argument to all the other functions."
msgstr ""

#: ../../source/inc/statement_register:26
msgid "`lint`"
msgstr ""

#: ../../source/inc/statement_register:25
msgid "This is called to check the statement. It is passed a single argument, the object returned from parse. It should call renpy.error to report errors."
msgstr ""

#: ../../source/inc/statement_register:30
msgid "`execute`"
msgstr ""

#: ../../source/inc/statement_register:29
msgid "This is a function that is called when the statement executes. It is passed a single argument, the object returned from parse."
msgstr ""

#: ../../source/inc/statement_register:33
msgid "`execute_init`"
msgstr ""

#: ../../source/inc/statement_register:33
msgid "This is a function that is called at init time, at priority 0."
msgstr ""

#: ../../source/inc/statement_register:38
msgid "`predict`"
msgstr ""

#: ../../source/inc/statement_register:36
msgid "This is a function that is called to predict the images used by the statement. It is passed a single argument, the object returned from parse. It should return a list of displayables used by the statement."
msgstr ""

#: ../../source/inc/statement_register:49
msgid "`next`"
msgstr ""

#: ../../source/inc/statement_register:41
msgid "This is a function that is called to determine the next statement."
msgstr ""

#: ../../source/inc/statement_register:43
msgid "If `block` is not \"script\", this is passed a single argument, the object returned from the parse function. If `block` is \"script\", an additional argument is passed, an object that names the first statement in the block."
msgstr ""

#: ../../source/inc/statement_register:47
msgid "The function should return either a string giving a label to jump to, the second argument to transfer control into the block, or None to continue to the statement after this one."
msgstr ""

#: ../../source/inc/statement_register:54
msgid "`label`"
msgstr ""

#: ../../source/inc/statement_register:52
msgid "This is a function that is called to determine the label of this statement. If it returns a string, that string is used as the statement label, which can be called and jumped to like any other label."
msgstr ""

#: ../../source/inc/statement_register:60
msgid "`warp`"
msgstr ""

#: ../../source/inc/statement_register:57
msgid "This is a function that is called to determine if this statement should execute during warping. If the function exists and returns true, it's run during warp, otherwise the statement is not run during warp."
msgstr ""

#: ../../source/inc/statement_register:63
msgid "`scry`"
msgstr ""

#: ../../source/inc/statement_register:63
msgid "Used internally by Ren'Py."
msgstr ""

#: ../../source/inc/statement_register:69
msgid "`init`"
msgstr ""

#: ../../source/inc/statement_register:66
msgid "True if this statement should be run at init-time. (If the statement is not already inside an init block, it's automatically placed inside an init block.) This calls the execute function, in addition to the execute_init function."
msgstr ""

#: ../../source/inc/statement_register:73
msgid "`init_priority`"
msgstr ""

#: ../../source/inc/statement_register:72
msgid "An integer that determines the priority of initialization of the init block."
msgstr ""

#: ../../source/inc/statement_register:78
msgid "`translation_strings`"
msgstr ""

#: ../../source/inc/statement_register:76
msgid "A function that is called with the parsed block. It's expected to return a list of strings, which are then reported as being available to be translated."
msgstr ""

#: ../../source/inc/statement_register:82
msgid "`force_begin_rollback`"
msgstr ""

#: ../../source/inc/statement_register:81
msgid "This should be set to true on statements that are likely to cause the end of a fast skip, similar to ``menu`` or ``call screen``."
msgstr ""

#: ../../source/inc/statement_register:87
msgid "`post_execute`"
msgstr ""

#: ../../source/inc/statement_register:85
msgid "A function that is executed as part the next statement after this one. (Adding a post_execute function changes the contents of the RPYC file, meaning a Force Compile is necessary.)"
msgstr ""

#: ../../source/inc/statement_register:93
msgid "`post_label`"
msgstr ""

#: ../../source/inc/statement_register:90
msgid "This is a function that is called to determine the label of this the post execute statement. If it returns a string, that string is used as the statement label, which can be called and jumped to like any other label. This can be used to create a unique return point."
msgstr ""

#: ../../source/inc/statement_register:97
msgid "`predict_all`"
msgstr ""

#: ../../source/inc/statement_register:96
msgid "If True, then this predicts all sub-parses of this statement and the statement after this statement."
msgstr ""

#: ../../source/inc/statement_register:104
msgid "`predict_next`"
msgstr ""

#: ../../source/inc/statement_register:100
msgid "This is called with a single argument, the label of the statement that would run after this statement."
msgstr ""

#: ../../source/inc/statement_register:103
msgid "This should be called to predict the statements that can run after this one. It's expected to return a list of of labels or SubParse objects. This is not called if `predict_all` is true."
msgstr ""

#: ../../source/cds.rst:37
msgid "The parse method takes a Lexer object:"
msgstr ""

#: ../../source/cds.rst:43
msgid "Adds a `msg` (with the current position) in the list of detected parsing errors. This interrupts the parsing of the current statement, but does not prevent further parsing."
msgstr ""

#: ../../source/cds.rst:49
msgid "Tries to parse `thing`, and reports an error if it cannot be done."
msgstr ""

#: ../../source/cds.rst:51
msgid "If `thing` is a string, tries to parse it using :func:`match`. Otherwise, thing must be a other method on this lexer object, which is called without arguments. If `name` is not specified, the name of the method will be used in the message (or `thing` if it's a string), otherwise the `name` will be used."
msgstr ""

#: ../../source/cds.rst:59
msgid "True if the lexer is at the end of the line."
msgstr ""

#: ../../source/cds.rst:63
msgid "If we are not at the end of the line, raise an error."
msgstr ""

#: ../../source/cds.rst:67
msgid "Called to indicate this statement does not expect a block. If a block is found, raises an error. `stmt` should be a string, it will be added to the message with an error."
msgstr ""

#: ../../source/cds.rst:73
msgid "Called to indicate that the statement requires that a non-empty block is present. `stmt` should be a string, it will be added to the message with an error."
msgstr ""

#: ../../source/cds.rst:79
msgid "True if the current line has a non-empty block."
msgstr ""

#: ../../source/cds.rst:83
msgid "Matches an arbitrary regexp string."
msgstr ""

#: ../../source/cds.rst:85
msgid "All of the statements in the lexer that match things are implemented in terms of this function. They first skip whitespace, then attempt to match against the line. If the match succeeds, the matched text is returned. Otherwise, None is returned, and the state of the lexer is unchanged."
msgstr ""

#: ../../source/cds.rst:93
msgid "Matches `s` as a keyword."
msgstr ""

#: ../../source/cds.rst:97
msgid "Matches a name. This does not match built-in keywords."
msgstr ""

#: ../../source/cds.rst:101
msgid "Matches any word, including keywords. Returns the text of the matched word."
msgstr ""

#: ../../source/cds.rst:106
msgid "Matches an image name component. Unlike a word, a image name component can begin with a number."
msgstr ""

#: ../../source/cds.rst:111
msgid "Matches a Ren'Py string."
msgstr ""

#: ../../source/cds.rst:115
msgid "Matches an integer, returns a string containing the integer."
msgstr ""

#: ../../source/cds.rst:119
msgid "Matches a floating point number, returns a string containing the floating point number."
msgstr ""

#: ../../source/cds.rst:124
msgid "Matches a label name, either absolute or relative. If `declare` is true, then the global label name is set. (Note that this does not actually declare the label - the statement is required to do that by returning it from the `label` function.)"
msgstr ""

#: ../../source/cds.rst:131
msgid "Matches a simple Python expression, returns it as a string. This is often used when you expect a variable name. It is not recommended to change the result. The correct action is to evaluate the result in the future."
msgstr ""

#: ../../source/cds.rst:138
msgid "Matches a Python expression that ends in a `delim`, for example ':'. This is often used when you expect a condition until the delimiter. It is not recommended to change the result. The correct action is to evaluate the result in the future. This raises an error if end of line is reached before the delimiter."
msgstr ""

#: ../../source/cds.rst:146
msgid "This must be called before the parentheses with the arguments list, if they are not specified returns None, otherwise returns an object representing the arguments to a function call. This object has an ``evaluate`` method on it that takes an optional `scope` dictionary, and returns a tuple in which the first component is a tuple of positional arguments, and the second component is a dictionary of keyword arguments."
msgstr ""

#: ../../source/cds.rst:156
msgid "Skips whitespace, then returns the rest of the line."
msgstr ""

#: ../../source/cds.rst:160
msgid "Returns an opaque object representing the current state of the lexer."
msgstr ""

#: ../../source/cds.rst:164
msgid "When `o` is the object returned from checkpoint(), reverts the state of the lexer to what it was when checkpoint() was called. (This is used for backtracking.)"
msgstr ""

#: ../../source/cds.rst:170
msgid "Return a Lexer for the block associated with the current line."
msgstr ""

#: ../../source/cds.rst:174
msgid "In a subblock lexer, advances to the next line. This must be called before the first line, so the first line can be parsed. Returns True if we've successfully advanced to a line in the block, or False if we have advanced beyond all lines in the block."
msgstr ""

#: ../../source/cds.rst:181
msgid "When called, this parses the current line as a Ren'Py script statement, generating an error if this is not possible. This method returns an opaque object that can be returned from get_next() or passed to :func:`renpy.jump` or :func:`renpy.call`. This object should not be stored except as part of the parse result of the statement."
msgstr ""

#: ../../source/cds.rst:187
msgid "When the statement returned from this completes, control is transfered to the statement after the creator-defined statement. (Which might be the statement created using post_execute)."
msgstr ""

#: ../../source/cds.rst:193
msgid "This parses all of the remaining lines in the current block as Ren'Py script, and returns a SubParse corresponding to the first statement in the block. The block is chained together such that all statements in the block are run, and then control is transferred to the statement after this creator-defined statement."
msgstr ""

#: ../../source/cds.rst:199
msgid "Note that this parses the current block. In the more likely case that you'd like to parse the subblock of the current statement, the correct way to do that is::"
msgstr ""

#: ../../source/cds.rst:217
msgid "`empty`"
msgstr ""

#: ../../source/cds.rst:215
msgid "If True, allows an empty block to be parsed. (An empty block is equivalent to a block with a single ``pass`` statement.)"
msgstr ""

#: ../../source/cds.rst:218
msgid "If False, an empty block triggers an error."
msgstr ""

#: ../../source/cds.rst:223
msgid "This is a context decorator, used in conjunction with the with statement, that catches and reports lexer errors inside its context block, then continues after the block."
msgstr ""

#: ../../source/cds.rst:227
msgid "Here's an example of how it can be used to report multiple errors in a single subblock. ::"
msgstr ""

#: ../../source/cds.rst:253
msgid "Lint Utility Functions"
msgstr ""

#: ../../source/cds.rst:255
msgid "These functions are useful in writing lint functions."
msgstr ""

#: ../../source/inc/lint:5
msgid "Checks the text tags in s for correctness. Returns an error string if there is an error, or None if there is no error."
msgstr ""

#: ../../source/inc/lint:10
msgid "Reports `msg`, a string, as as error for the user. This is logged as a parse or lint error when approprate, and otherwise it is raised as an exception."
msgstr ""

#: ../../source/inc/lint:16
msgid "Tries to compile an expression, and writes an error to lint.txt if it fails."
msgstr ""

#: ../../source/inc/lint:22
#: ../../source/inc/lint:39
msgid "`where`"
msgstr ""

#: ../../source/inc/lint:20
#: ../../source/inc/lint:37
msgid "A string giving the location the expression is found. Used to generate an error message of the form \"Could not evaluate `expr` in `where`.\""
msgstr ""

#: ../../source/inc/lint:25
#: ../../source/inc/lint:42
msgid "`expr`"
msgstr ""

#: ../../source/inc/lint:25
msgid "The expression to try compiling."
msgstr ""

#: ../../source/inc/lint:28
#: ../../source/inc/lint:45
msgid "`additional`"
msgstr ""

#: ../../source/inc/lint:28
#: ../../source/inc/lint:45
msgid "If given, an additional line of information that is addded to the error message."
msgstr ""

#: ../../source/inc/lint:33
msgid "Tries to evaluate an expression, and writes an error to lint.txt if it fails."
msgstr ""

#: ../../source/inc/lint:42
msgid "The expression to try evaluating."
msgstr ""

#: ../../source/cds.rst:260
msgid "Example"
msgstr ""

#: ../../source/cds.rst:262
msgid "This creates a new statement ``line`` that allows lines of text to be specified without quotes. ::"
msgstr ""

#: ../../source/cds.rst:289
msgid "This can be used by writing::"
msgstr ""

