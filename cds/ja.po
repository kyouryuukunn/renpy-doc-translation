# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-23 11:09+0900\n"
"PO-Revision-Date: 2023-04-29 13:53+0900\n"
"Last-Translator: akakyouryuu <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2015-04-06 05:27+0000\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../source/cds.rst:2
msgid "Creator-Defined Statements"
msgstr "ユーザー定義ステートメント"

#: ../../source/cds.rst:4
msgid ""
"Creator-Defined Statements (CDS) allow you to add your own statements to "
"Ren'Py's scripting language. This makes it possible to add functionality "
"that is not supported by the current syntax."
msgstr ""
"ユーザー定義ステートメント (Creator-Defined Statements CDS) は独自のステート"
"メントを Ren'Py に追加出来るようにします。これにより現在の文法ではサポートさ"
"れない機能が追加出来ます。"

#: ../../source/cds.rst:8
msgid "CDS can be more flexible than the direct Python code equivalent."
msgstr "CDS は直接的な同等の Python コードより柔軟です。"

#: ../../source/cds.rst:10
msgid "For example, picking a line of dialogue at random::"
msgstr "例えば、ランダムに1行の台詞を所得します ::"

#: ../../source/cds.rst:20
msgid ""
"Ren'Py's parser does not know ahead of time what happens in the python block "
"or how it should be executed. It does not do anything with this code until "
"execution and triggers an error if an exception occurs."
msgstr ""
"Ren'Py のパーサーでは Python ブロック内で何が起こり、どのように実行されるはず"
"か予め分かりません。実行までこのコードにできることはなく、例外が発生するとエ"
"ラーとなります。"

#: ../../source/cds.rst:23
msgid "Using a CDS allows you to:"
msgstr "CDS を使用すれば次のことができます。 :"

#: ../../source/cds.rst:25
msgid ""
"Check the correctness of the parsed syntax (For example, check that the "
"items in the list sent to renpy.random.choice have valid text)"
msgstr ""
"パースされた文法の妥当性確認 (例えば、 renpy.random.choice に送られるリストの"
"要素が妥当なテキストか確認します)"

#: ../../source/cds.rst:27
msgid ""
"Ignore incorrect data at execution (For non-critical functions, it is often "
"better to skip the execution than to throw an exception)"
msgstr ""
"実行時の不正なデータの無視 (クリティカルでない関数に対しては、例外を投げるよ"
"りも実行をスキップする方がしばしばよいです)"

#: ../../source/cds.rst:29
msgid "Predict Displayables (If the function uses them)"
msgstr "Displayable の予測 (関数が使用する場合)"

#: ../../source/cds.rst:31
msgid ""
"Give you addition information during :ref:`lint` (If at runtime an error was "
"ignored you can have a report here)."
msgstr ""
":ref:`lint` 実行中の追加情報の掲示 (実行時エラーが無視されるなら、ここでレ"
"ポートとして受け取られます)"

#: ../../source/cds.rst:33
msgid "For example, the above behaviour, but written as a CDS::"
msgstr "例えば、上記のような動作は CDS では次のように書けます。 ::"

#: ../../source/cds.rst:66
msgid "``random`` is now available as a statement::"
msgstr "``random`` がステートメントとして利用できるようになります。 ::"

#: ../../source/cds.rst:75
msgid ""
"Using a CDS does not guarantee that the execution will be successful, but "
"the better you code your statement, the better Ren'Py can \"understand\" "
"what you expect from it."
msgstr ""
"CDS の使用は実行の安全を保証しませんが、あなたのステートメントのコードが良け"
"れば、その分 Ren'Py はあなたがそれに何を期待しているか \"理解\" できます。"

#: ../../source/cds.rst:81
msgid "Usage"
msgstr "使用方"

#: ../../source/cds.rst:83
msgid "Creator-Defined Statements (CDS) must conform to the following rules:"
msgstr ""
"ユーザー定義ステートメント (CDS) は次のルールに準拠しなければなりません :"

#: ../../source/cds.rst:85
msgid "They must be defined in a ``python early`` block."
msgstr "``python early`` ブロックで定義されなければならない"

#: ../../source/cds.rst:87
msgid "They cannot be used in the same file in which they are defined."
msgstr ""
"ユーザー定義ステートメントはそれが定義されたファイル内では使用不能です。"

#: ../../source/cds.rst:89
msgid ""
"The file containing the CDS must be loaded earlier than any file that uses "
"it. (Since Ren'Py loads files in the Unicode sort order of their path, it "
"generally makes sense to prefix the name of any file containing a CDS with "
"01 or some other small number.)"
msgstr ""
"CDS を含むファイルはそれを使用するどのファイルよりも先にロードされる必要があ"
"ります( Ren'Py のファイルロードはそのパスのユニコーン順なので、 CDS を含む"
"ファイル名に 01 やその他小さな数値の接頭辞を付けると良いです)"

#: ../../source/cds.rst:93
msgid ""
"Creator-Defined Statements are registered using the :func:`renpy."
"register_statement` function. This functions takes other functions that "
"perform operations on the content of the CDS."
msgstr ""
"ユーザー定義ステートメントは :func:`renpy.register_statement` 関数を使用して"
"登録されます。この関数は CDS 内の処理を実行する他の関数を受け取ります。"

#: ../../source/cds.rst:96
msgid ""
"For example, a new statement named ``line`` that allows lines of text to be "
"specified without quotes."
msgstr ""
"ここでは新しいステートメント ``line`` を作成し、クォーテーションを付けずにテ"
"キストを指定できるようにしています。"

#: ../../source/cds.rst:103
msgid ""
"The parse function will be sent the lexed content for parsing. The execute "
"function should run an operation on the parsed content. The lint function "
"should report any errors in the parsed content."
msgstr ""
"parse 関数には、パースのための字句解析されたコンテンツが送られます。 execute "
"関数はパースされたコンテンツに対して操作を実行するべきです。 lint 関数は、"
"パースされたコンテンツにエラーがあればそれを報告します。"

#: ../../source/cds.rst:139
msgid "API Reference"
msgstr "API リファレンス"

#: ../../source/inc/statement_register:5
msgid "This registers a user-defined statement."
msgstr "これはユーザー定義ステートメントを登録します。"

#: ../../source/inc/statement_register:10
msgid "`name`"
msgstr "`name`"

#: ../../source/inc/statement_register:8
msgid ""
"This is either a space-separated list of names that begin the statement, or "
"the empty string to define a new default statement (the default statement "
"will replace the say statement)."
msgstr ""
"これはステートメントを開始する名前のスペース区切りのリストか、または空の文字"
"列にして新しいデフォルトステートメントを定義します ( デフォルトステートメント"
"は say ステートメントを置き換えるでしょう )。"

#: ../../source/inc/statement_register:17
msgid "`block`"
msgstr "`block`"

#: ../../source/inc/statement_register:13
msgid ""
"When this is False, the statement does not expect a block. When True, it "
"expects a block, but leaves it up to the lexer to parse that block. If the "
"string \"script\", the block is interpreted as containing one or more Ren'Py "
"script language statements. If the string \"possible\", the block expect "
"condition is determined by the parse function."
msgstr ""
"False なら、ステートメントはブロックを使用しません。 True ならブロックを使用"
"し、 そのブロックの解釈は lexer に任せます。文字列 \"script\" なら、ブロック"
"は一つ以上の Ren'Py スクリプト言語を含むものとして解釈されれます。文字列 "
"\"possible\" なら、パース関数でブロックを使用するか決定します。"

#: ../../source/inc/statement_register:22
msgid "`parse`"
msgstr "`parse`"

#: ../../source/inc/statement_register:20
msgid ""
"This is a function that takes a Lexer object. This function should parse the "
"statement, and return an object. This object is passed as an argument to all "
"the other functions."
msgstr ""
"これは Lexer オブジェクトを引数に受け取る関数です。この関数はステートメントを"
"解析し、任意のオブジェクトを返すべきです。このオブジェクトは他のすべての関数"
"に引数として渡されます。"

#: ../../source/inc/statement_register:26
msgid "`lint`"
msgstr "`lint`"

#: ../../source/inc/statement_register:25
msgid ""
"This is called to check the statement. It is passed a single argument, the "
"object returned from parse. It should call renpy.error to report errors."
msgstr ""
"これはステートメントをチェックするために呼び出され、 parse から返されたオブ"
"ジェクトを引数として渡されます。 :func:`renpy.error` を呼び出してエラーを報告"
"するとよいでしょう。"

#: ../../source/inc/statement_register:30
msgid "`execute`"
msgstr "`execute`"

#: ../../source/inc/statement_register:29
msgid ""
"This is a function that is called when the statement executes. It is passed "
"a single argument, the object returned from parse."
msgstr ""
"これはステートメントが実行されると呼び出される関数で、 parse から返されたオブ"
"ジェクトを引数として渡されます。"

#: ../../source/inc/statement_register:34
msgid "`execute_init`"
msgstr "`execute_init`"

#: ../../source/inc/statement_register:33
#, fuzzy
msgid ""
"This is a function that is called at init time, at priority 0. It is passed "
"a single argument, the object returned from parse."
msgstr ""
"これはステートメントが実行されると呼び出される関数で、 parse から返されたオブ"
"ジェクトを引数として渡されます。"

#: ../../source/inc/statement_register:39
msgid "`predict`"
msgstr "`predict`"

#: ../../source/inc/statement_register:37
msgid ""
"This is a function that is called to predict the images used by the "
"statement. It is passed a single argument, the object returned from parse. "
"It should return a list of displayables used by the statement."
msgstr ""
"これはステートメントに使用される画像を予測するために呼び出される関数で、 "
"parse から返されたオブジェクトを引数として渡されます。 ステートメントに使用さ"
"れる displayable のリストを返すべきです。"

#: ../../source/inc/statement_register:52
msgid "`next`"
msgstr "`next`"

#: ../../source/inc/statement_register:42
msgid "This is a function that is called to determine the next statement."
msgstr "これは次のステートメントを決定するために呼び出される関数です。"

#: ../../source/inc/statement_register:44
msgid ""
"If `block` is not \"script\", this is passed a single argument, the object "
"returned from the parse function. If `block` is \"script\", an additional "
"argument is passed, an object that names the first statement in the block."
msgstr ""
"`block` が \"script\" でないなら、これには parse 関数から返されたオブジェクト"
"が引数に渡されます。 `block` が \"script\" ならそのブロックの最初のステートメ"
"ントの名前のオブジェクトが追加の引数に渡されます。"

#: ../../source/inc/statement_register:48
#, fuzzy
msgid ""
"The function should return either a string giving a label to jump to, the "
"second argument to transfer control into the block, or None to continue to "
"the statement after this one. It can also return the result of :meth:`Lexer."
"renpy_statement` or :meth:`Lexer.renpy_block` when called in the `parse` "
"function."
msgstr ""
"この関数はジャンプ先のラベルを指定する文字列、ブロックへ制御を移すなら第二引"
"数、この後のステートメントに制御を移すなら None を返すべきです。"

#: ../../source/inc/statement_register:57
msgid "`label`"
msgstr "`label`"

#: ../../source/inc/statement_register:55
msgid ""
"This is a function that is called to determine the label of this statement. "
"If it returns a string, that string is used as the statement label, which "
"can be called and jumped to like any other label."
msgstr ""
"ステートメントのラベルを決定する関数です。返した文字列がステートメントのラベ"
"ルとして使用され、その他のラベル同様に呼び出しやジャンプが出来ます。"

#: ../../source/inc/statement_register:63
msgid "`warp`"
msgstr "`warp`"

#: ../../source/inc/statement_register:60
msgid ""
"This is a function that is called to determine if this statement should "
"execute during warping. If the function exists and returns true, it's run "
"during warp, otherwise the statement is not run during warp."
msgstr ""
"ステートメントがワープ中に実行されるかを決定する関数です。関数が存在し、 "
"True を返せばワープ中に実行され、そうでなければ実行されません。"

#: ../../source/inc/statement_register:66
msgid "`scry`"
msgstr "`scry`"

#: ../../source/inc/statement_register:66
msgid "Used internally by Ren'Py."
msgstr "Ren'Py 内部で使用されます。"

#: ../../source/inc/statement_register:75
msgid "`init`"
msgstr "`init`"

#: ../../source/inc/statement_register:69
msgid ""
"True if this statement should be run at init-time. (If the statement is not "
"already inside an init block, it's automatically placed inside an init "
"block.)"
msgstr ""
"このステートメントが初期化時にのみ実行されるべきなら True にします ( ステート"
"メントが init ブロック内になければ自動的に init ブロックに配置されます)。"

#: ../../source/inc/statement_register:73
msgid ""
"You probably don't want this if you have an `execute_init` function, as "
"wrapping the statement in an init block will cause the `execute_init` and "
"`execute` functions to be called at the same time."
msgstr ""
"ステートメントを init ブロックに含めると、`execute_init` と `execute` 関数が"
"同時に呼び出されるため、 `execute_init` 関数があるなら恐らくこれは望まないで"
"しょう。"

#: ../../source/inc/statement_register:79
msgid "`init_priority`"
msgstr "`init_priority`"

#: ../../source/inc/statement_register:78
msgid ""
"An integer that determines the priority of initialization of the init block "
"created by `init` and `execute_init` function."
msgstr ""
"`init` と `execute_init` 関数によって作成される init ブロックの初期化優先順位"
"を決定する整数です。"

#: ../../source/inc/statement_register:84
msgid "`translation_strings`"
msgstr "`translation_strings`"

#: ../../source/inc/statement_register:82
msgid ""
"A function that is called with the parsed block. It's expected to return a "
"list of strings, which are then reported as being available to be translated."
msgstr ""
"パースされたブロックを引数に呼び出される関数で、翻訳可能として報告される文字"
"列のリストを返します。"

#: ../../source/inc/statement_register:88
msgid "`force_begin_rollback`"
msgstr "`force_begin_rollback`"

#: ../../source/inc/statement_register:87
msgid ""
"This should be set to true on statements that are likely to cause the end of "
"a fast skip, similar to ``menu`` or ``call screen``."
msgstr ""
"これは ``menu`` や ``call screen``  のようなファストスキップを停止するステー"
"トメントでは  True にするべきです。"

#: ../../source/inc/statement_register:93
msgid "`post_execute`"
msgstr "`post_execute`"

#: ../../source/inc/statement_register:91
msgid ""
"A function that is executed as part the next statement after this one. "
"(Adding a post_execute function changes the contents of the RPYC file, "
"meaning a Force Compile is necessary.)"
msgstr ""
"次のステートメントの一部として実行される関数です( post_execute 関数の追加によ"
"り RPYC ファイルの内容が変化するため、強制コンパイルが必要になります )。"

#: ../../source/inc/statement_register:99
msgid "`post_label`"
msgstr "`post_label`"

#: ../../source/inc/statement_register:96
msgid ""
"This is a function that is called to determine the label of this the post "
"execute statement. If it returns a string, that string is used as the "
"statement label, which can be called and jumped to like any other label. "
"This can be used to create a unique return point."
msgstr ""
"post_execute ステートメントのラベルを決定する関数です。返した文字列がステート"
"メントのラベルとして使用され、その他のラベル同様に呼び出しやジャンプが出来ま"
"す。これを使用して他と被らないリターンポイントを作成できます。"

#: ../../source/inc/statement_register:103
msgid "`predict_all`"
msgstr "`predict_all`"

#: ../../source/inc/statement_register:102
msgid ""
"If True, then this predicts all sub-parses of this statement and the "
"statement after this statement."
msgstr ""
"True なら、このステートメントと次のステートメントのすべての sub-parse を予測"
"します。"

#: ../../source/inc/statement_register:111
msgid "`predict_next`"
msgstr "`predict_next`"

#: ../../source/inc/statement_register:106
msgid ""
"This is called with a single argument, the label of the statement that would "
"run after this statement."
msgstr ""
"これはこのステートメントの次のステートメントのラベルを引数とする関数です。"

#: ../../source/inc/statement_register:109
msgid ""
"This should be called to predict the statements that can run after this one. "
"It's expected to return a list of of labels or SubParse objects. This is not "
"called if `predict_all` is true."
msgstr ""
"これは次に実行するステートメントを予測するために呼び出されるべきです。ラベル"
"か SubParse オブジェクトのリストを返します。 predict_all が True だと呼び出さ"
"れません。"

#: ../../source/inc/statement_register:119
#, fuzzy
msgid "`execute_default`"
msgstr "`execute_init`"

#: ../../source/inc/statement_register:114
msgid ""
"This is a function that is called at the same time the default statements "
"are run - after the init phase, but before the game starts; when the a save "
"is loaded; after rollback; before lint; and potentially at other times."
msgstr ""

#: ../../source/inc/statement_register:119
#, fuzzy
msgid "This is called with a single argument, the object returned from parse."
msgstr ""
"これはステートメントが実行されると呼び出される関数で、 parse から返されたオブ"
"ジェクトを引数として渡されます。"

#: ../../source/inc/statement_register:152
msgid "`reachable`"
msgstr ""

#: ../../source/inc/statement_register:122
#, fuzzy
msgid ""
"This is a function that is called to allow this statement to customize how "
"it participates in lint's reachability analysis."
msgstr ""
"これはステートメントが実行されると呼び出される関数で、 parse から返されたオブ"
"ジェクトを引数として渡されます。"

#: ../../source/inc/statement_register:125
msgid ""
"By default, a statement's custom block, sub-parse blocks created with Lexer."
"renpy_block(), and the statement after the statement are reachable if the "
"statement itself is reachable. The statement is also reachable if it has a "
"label function."
msgstr ""

#: ../../source/inc/statement_register:130
msgid ""
"This can be customized by providing a reachable function. This is a function "
"that takes five arguments (in the following, a \"label\" may be a string or "
"an opaque object):"
msgstr ""

#: ../../source/inc/statement_register:134
msgid "The object returned by the parse function."
msgstr ""

#: ../../source/inc/statement_register:135
msgid "A boolean that is true if the statement is reachable."
msgstr ""

#: ../../source/inc/statement_register:136
#, fuzzy
msgid "The label of the statement."
msgstr "マッチされた単語のテキストです。"

#: ../../source/inc/statement_register:137
msgid "The label of the next statement, or None if there is no next statement."
msgstr ""

#: ../../source/inc/statement_register:138
msgid ""
"If `block` is set to \"script\", the label of the first statement in the "
"block, or None if there is no block."
msgstr ""

#: ../../source/inc/statement_register:141
msgid "It's expected to return a set that may contain:"
msgstr ""

#: ../../source/inc/statement_register:143
msgid "A label or subparse object of a statement that is reachable."
msgstr ""

#: ../../source/inc/statement_register:144
msgid ""
"True, to indicate that this statement should not be reported by lint, but is "
"not intrinsically reachable. (It will become reachable if it is reported "
"reachable by another statement.)"
msgstr ""

#: ../../source/inc/statement_register:147
msgid "None, which is ignored."
msgstr ""

#: ../../source/inc/statement_register:149
msgid ""
"This function may be called multiple times with both value of is_reachable, "
"to allow the statement to customize its behavior based on whether it's "
"reachable or not. (For example, the next statement may only be reachable if "
"this statement is.)"
msgstr ""

#: ../../source/inc/statement_register:156
msgid ""
"Using the empty string as the name to redefine the say statement is usually "
"a bad idea. That is because when replacing a Ren'Py native statement, its "
"behavior depends on the :doc:`statement_equivalents`. In the case of the say "
"statement, these equivalents do not support the `id` and translation "
"systems. As a result, a game redefining the default statement will not be "
"able to use these features (short of reimplementing them entirely)."
msgstr ""

#: ../../source/cds.rst:145
msgid "Lexer object"
msgstr "Lexer オブジェクト"

#: ../../source/cds.rst:147
msgid ""
"A custom statement's parse function takes an instance of a Lexer object."
msgstr ""
"Lexer オブジェクトのインスタンスを受け取ってカスタムステートメントをパースす"
"る関数です。"

#: ../../source/cds.rst:0
msgid "パラメータ"
msgstr ""

#: ../../source/cds.rst:153
msgid "Message to add to the list of detected parsing errors."
msgstr "検出したパースエラーのリストに追加されるメッセージです。"

#: ../../source/cds.rst:155
msgid ""
"Add `msg` (with the current position) to the list of detected parsing "
"errors. This interrupts the parsing of the current statement, but does not "
"prevent further parsing."
msgstr ""
"検出されたパースエラーのリストに(現在位置とともに) `msg` を追加します。これは"
"現在のステートメントのパースを停止しますが、以降のパースは妨げません。"

#: ../../source/cds.rst:161
msgid "Try to parse `thing` and report an error if it cannot be done."
msgstr "`thing` のパースを試み、出来なければエラーを返します。"

#: ../../source/cds.rst:163
msgid "If `thing` is a string, try to parse it using :func:`match`."
msgstr ""
"`thing` が文字列なら、 :func:`match` を使用してそれをパースしようとします。"

#: ../../source/cds.rst:165
msgid ""
"Otherwise, thing must be another method on this lexer object which is called "
"without arguments."
msgstr ""
"そうでなければ、 thing はこの lexer オブジェクトの引数無しで呼び出される他の"
"メソッドでなければいけません。"

#: ../../source/cds.rst:168
msgid ""
"If `name` is not specified, the name of the method will be used in the "
"message (or `thing` if it's a string), otherwise `name` will be used."
msgstr ""
"`name` が指定されなければ、メソッド名が (文字列であるなら `thing` が) メッ"
"セージに使用され、そうでないければ `name` が使用されます。"

#: ../../source/cds.rst:0
msgid "戻り値"
msgstr ""

#: ../../source/cds.rst:173
msgid "True if the lexer is at the end of the line, else False."
msgstr ""
"lexerが行の末端に達していれば True を返し、そうでなければ False を返します。"

#: ../../source/cds.rst:0
msgid "戻り値の型"
msgstr ""

#: ../../source/cds.rst:178
msgid "If not at the end of the line, raise an error."
msgstr "行の末端に達していなければエラーを投げます。"

#: ../../source/cds.rst:182
msgid ""
"Called to indicate this statement does not expect a block. If a block is "
"found, raise an error. `stmt` should be a string, it will be added to the "
"message with an error."
msgstr ""
"このステートメントがブロックを使用しないと示すために呼び出されます。ブロック"
"が発見されると、例外が投げられます。 `stmt` はエラーとともにメッセージに追加"
"される文字列です。"

#: ../../source/cds.rst:188
msgid ""
"Called to indicate that the statement requires that a non-empty block is "
"present. `stmt` should be a string, it will be added to the message with an "
"error."
msgstr ""
"このステートメントが空でないブロックを必要とする示すために呼び出されます。 "
"`stmt` はエラーとともにメッセージに追加される文字列です。"

#: ../../source/cds.rst:194
msgid "True if the current line has a non-empty block, else False."
msgstr "現在行に空でないブロックがあれば True 、そうでなければ False です。"

#: ../../source/cds.rst:199
msgid "Match an arbitrary regexp string."
msgstr "任意の正規表現文字列にマッチします。"

#: ../../source/cds.rst:201
msgid ""
"All of the statements in the lexer that match things are implemented in "
"terms of this function. They first skip whitespace, then attempt to match "
"against the line. If the match succeeds, the matched text is returned. "
"Otherwise, None is returned, and the state of the lexer is unchanged."
msgstr ""
"何かをマッチさせる lexer のすべてのステートメントは、この関数と同様な方法で実"
"装されています。最初に空白をスキップし、その行に対してマッチするかを試みま"
"す。マッチが成功すればマッチしたテキストが返され、そうでなければ None が返さ"
"れ、 Lexer は変更されません。"

#: ../../source/cds.rst:209
msgid "Match `s` as a keyword."
msgstr "キーワードとして `s` にマッチします。"

#: ../../source/cds.rst:213
msgid "Match a name. This does not match built-in keywords."
msgstr "名前にマッチしますが組み込みのキーワードにはマッチしません。"

#: ../../source/cds.rst:217
msgid "The text of the matched word."
msgstr "マッチされた単語のテキストです。"

#: ../../source/cds.rst:220
msgid "Match any word, including keywords."
msgstr "キーワードを含むどのような単語にもマッチします。"

#: ../../source/cds.rst:224
msgid ""
"Match an image name component. Unlike a word, an image name component can "
"begin with a number."
msgstr "画像名にマッチします。単語と違い画像名は数字で始められます。"

#: ../../source/cds.rst:229
msgid "Match a Ren'Py string."
msgstr "文字列にマッチします。"

#: ../../source/cds.rst:233
msgid "String containing the found integer."
msgstr "整数を含む文字列"

#: ../../source/cds.rst:236
msgid "Match an integer."
msgstr "整数にマッチします。"

#: ../../source/cds.rst:240
msgid "String containing the found floating point number."
msgstr "浮動小数点を含む文字列"

#: ../../source/cds.rst:243
msgid "Match a floating point number."
msgstr "浮動小数にマッチします。"

#: ../../source/cds.rst:247
msgid ""
"Match a label name, either absolute or relative. If `declare` is true, then "
"the global label name is set. (Note that this does not actually declare the "
"label - the statement is required to do that by returning it from the "
"`label` function.)"
msgstr ""
"ラベル名または、absolute, relative にマッチします。 `declare` が True なら、"
"グローバルラベルが設定されます ( ステートメントは `label` 関数からラベルを返"
"す必要あるためにそうしているだけで、これはは実際にはラベルを宣言しないことに"
"注意してください)。"

#: ../../source/cds.rst:254
msgid ""
"Match a simple Python expression, returns it as a string. This is often used "
"when you expect a variable name. It is not recommended to change the result. "
"The correct action is to evaluate the result in the future."
msgstr ""
"単純式にマッチし、それを文字列として返します。これはしばしば変数名を期待する"
"時に使用されます。結果の変更は推奨されません。正しいアクションは future(訳"
"注: python3互換モジュールのこと?) で結果を評価することです。"

#: ../../source/cds.rst:261
msgid ""
"Match a Python expression that ends in a `delim`, for example ':'. This is "
"often used when you expect a condition until the delimiter. It is not "
"recommended to change the result. The correct action is to evaluate the "
"result in the future. This raises an error if end of line is reached before "
"the delimiter."
msgstr ""
"':' のような `delim` で終わる Python 式にマッチします。これはしばしばデリミタ"
"までを条件として期待する場合に使用されます。結果の変更は推奨されません。正し"
"いアクションは future(訳注: python3互換モジュールのこと?) で結果を評価するこ"
"とです。デリミタの前に行端に達すればエラーを投げます。"

#: ../../source/cds.rst:269
msgid ""
"This must be called before the parentheses with the arguments list, if they "
"are not specified returns None, otherwise returns an object representing the "
"arguments to a function call. This object has an ``evaluate`` method on it "
"that takes an optional `scope` dictionary, and returns a tuple in which the "
"first component is a tuple of positional arguments, and the second component "
"is a dictionary of keyword arguments."
msgstr ""
"これは引数リストの丸括弧の前に呼び出されなければなりません。引数リストが確認"
"されなければ None を返し、そうでなければ引数を表すオブジェクトを関数呼び出し"
"に渡します。このオブジェクトには `scope` 辞書を省略可能な引数にとる  "
"``evalute`` メソッドがあり、1番目が位置引数のタプル、二番目がキーワード引数の"
"辞書であるタプルを返します。"

#: ../../source/cds.rst:279
msgid "Skip whitespace, then return the rest of the line."
msgstr "空白をスキップし、行の残りを返します。"

#: ../../source/cds.rst:283
msgid "Return an opaque object representing the current state of the lexer."
msgstr "現在の lexer の状態を表現する opaque オブジェクトを返します。"

#: ../../source/cds.rst:287
msgid ""
"When `o` is the object returned from checkpoint(), reverts the state of the "
"lexer to what it was when checkpoint() was called. (This is used for "
"backtracking.)"
msgstr ""
"`o` が checkpoint() から返されたオブジェクトなら、 lexer の状態を "
"checkpoint() が呼び出されたときにまで戻します ( これはバックトラッキングのた"
"めに使用されます )。"

#: ../../source/cds.rst:293
msgid "A Lexer for the block associated with the current line."
msgstr "現在行と対応するブロックに対する Lexer"

#: ../../source/cds.rst:297
msgid ""
"In a subblock lexer, advance to the next line. This must be called before "
"the first line, so the first line can be parsed. Return True if we've "
"successfully advanced to a line in the block, or False if we have advanced "
"beyond all lines in the block."
msgstr ""
"サブブロック lexer 内で次の行に解析を進めます。一行目を解析できるようにするた"
"めに、一行目よりも前で呼び出される必要があります。そのブロック内の行に進めれ"
"ば、 True を返し、末端を越えていれば False を返します。"

#: ../../source/cds.rst:304
#, fuzzy
msgid ""
"When called, this parses the current line as a Ren'Py script statement, "
"generating an error if this is not possible. This method returns an opaque "
"object that can be returned from the `next` function passed to :func:`renpy."
"register_statement`, or passed to :func:`renpy.jump` or :func:`renpy.call`. "
"This object should not be stored except as part of the parse result of the "
"statement."
msgstr ""
"Ren'Py スクリプトステートメントとして現在行をパースし、不可能ならエラーを生成"
"します。このメソッドは get_next() から返されたり :func:`renpy.jump` 、 :func:"
"`renpy.call` に渡される opaque オブジェクトを返します。このオブジェクトはス"
"テートメントのパース結果としてを除いて保存されるべきではありません。"

#: ../../source/cds.rst:311
msgid ""
"When the statement returned from this completes, control is transferred to "
"the statement after the creator-defined statement. (Which might be the "
"statement created using post_execute)."
msgstr ""
"ステートメントがこの処理を完了すると、制御はユーザー定義ステートメントの次の"
"ステートメント( post_execute を使用して作成されたステートメントもありえます)"
"に渡されます。"

#: ../../source/cds.rst:317
msgid ""
"Parse all of the remaining lines in the current block as Ren'Py script, and "
"return a SubParse corresponding to the first statement in the block. The "
"block is chained together such that all statements in the block are run, and "
"then control is transferred to the statement after this creator-defined "
"statement."
msgstr ""
"これは現在ブロックの残りの行を Ren'Py スクリプトとしてパースし、ブロックの最"
"初のステートメントに対応する SubParse を返します。そのブロック内で実行される"
"すべてのステートメントとともにブロックが処理されると、制御はこのユーザー定義"
"ステートメントの次のステートメントに渡されます。"

#: ../../source/cds.rst:323
msgid ""
"Note that this parses the current block. In the more likely case that you'd "
"like to parse the subblock of the current statement, the correct way to do "
"that is::"
msgstr ""
"これは現在のブロックをパースすることに注意してください。。現在のステートメン"
"トのサブブロックをパースしたい場合は、以下のようにしてください。"

#: ../../source/cds.rst:340
msgid "`empty`"
msgstr "`empty`"

#: ../../source/cds.rst:338
msgid ""
"If True, allows an empty block to be parsed. (An empty block is equivalent "
"to a block with a single ``pass`` statement.)"
msgstr ""
"True なら、空のブロックもパースされます( 空のブロックは ``pass`` ステートメン"
"トのみのブロックに相当します)。"

#: ../../source/cds.rst:341
msgid "If False, an empty block triggers an error."
msgstr "False なら、空のブロックでエラーとなります。"

#: ../../source/cds.rst:345
msgid ""
"This is a context decorator, used in conjunction with the with statement, "
"that catches and reports lexer errors inside its context block, then "
"continues after the block."
msgstr ""
"これは with ステートメントと共に使用され、そのコンテキストブロック内で Lexer "
"エラーをキャッチしてレポートし、次のブロックに続ける context decorator です。"

#: ../../source/cds.rst:349
msgid ""
"Here's an example of how it can be used to report multiple errors in a "
"single subblock. ::"
msgstr ""
"こちらは1つのサブブロック内での複数のエラーをどのようにレポートするかの例で"
"す。 ::"

#: ../../source/cds.rst:371
msgid "Lint Utility Functions"
msgstr "Lint 用ユーティリティー関数"

#: ../../source/cds.rst:373
msgid "These functions are useful when writing lint functions."
msgstr "これらの関数は lint 関数を記述するのに便利です。"

#: ../../source/inc/lint:5
msgid ""
"Checks the text tags in s for correctness. Returns an error string if there "
"is an error, or None if there is no error."
msgstr ""
"s 内部のテキストタグが正しいかチェックします。エラーがあればエラー文字列を、"
"なければ None を返します。"

#: ../../source/inc/lint:10
msgid ""
"Reports `msg`, a string, as as error for the user. This is logged as a parse "
"or lint error when approprate, and otherwise it is raised as an exception."
msgstr "ユーザーに対して文字列 `msg` をエラーとして表示します。"

#: ../../source/inc/lint:16
msgid ""
"Tries to compile an expression, and writes an error to lint.txt if it fails."
msgstr "式をコンパイルし、エラーがあればそれを lint.txt に書き出します。"

#: ../../source/inc/lint:22 ../../source/inc/lint:39
msgid "`where`"
msgstr "`where`"

#: ../../source/inc/lint:20 ../../source/inc/lint:37
msgid ""
"A string giving the location the expression is found. Used to generate an "
"error message of the form \"Could not evaluate `expr` in `where`.\""
msgstr ""
"式が見つかる場所を指定する文字列です。 \"`where` で  `expr` を評価できませ"
"ん。 \" のような形式でエラーメッセージを生成するために使用されます。"

#: ../../source/inc/lint:25 ../../source/inc/lint:42
msgid "`expr`"
msgstr "`expr`"

#: ../../source/inc/lint:25
msgid "The expression to try compiling."
msgstr "コンパイルを試みる式です。"

#: ../../source/inc/lint:28 ../../source/inc/lint:45
msgid "`additional`"
msgstr "`additional`"

#: ../../source/inc/lint:28 ../../source/inc/lint:45
msgid ""
"If given, an additional line of information that is addded to the error "
"message."
msgstr "指定すると、エラーメッセージへの追加情報となる行になります。"

#: ../../source/inc/lint:33
msgid ""
"Tries to evaluate an expression, and writes an error to lint.txt if it fails."
msgstr "式の評価を試み、 失敗すると lint.txt にエラーを書き込みます。"

#: ../../source/inc/lint:42
msgid "The expression to try evaluating."
msgstr "評価を試みる式です。"

#~ msgid "This is a function that is called at init time, at priority 0."
#~ msgstr "これは初期化時に優先度 0 で呼び出される関数です。"

#~ msgid ""
#~ "The file containing the CDS must be loaded earlier than any file that "
#~ "uses it."
#~ msgstr ""
#~ "CDS を含むファイルはそれを使用するどのファイルよりも先にロードされなければ"
#~ "いけない。"

#~ msgid "Parameters"
#~ msgstr "パラメーター"

#~ msgid "Returns"
#~ msgstr "返り値"

#~ msgid "Return type"
#~ msgstr "返り値型"

#~ msgid ""
#~ "Creator-Defined Statements (CDS) allow you to add your own statements to "
#~ "Ren'Py. This makes it possible to add things that are not supported by "
#~ "the current syntax of Ren'Py. CDS are more flexible than the direct "
#~ "Python code. Most often, CDS are used when you have a repeatable "
#~ "construction. For example, calling a function with one argument. Ren'Py "
#~ "does not know what this function does and how it should be executed, so "
#~ "Ren'Py does not do anything with it until execution and has an error if "
#~ "an exception occurs. Using the CDS allows you to check the correctness of "
#~ "the syntax using parse (for example, check that the argument is a valid "
#~ "string), to ignore incorrect data at execution (for non-critical "
#~ "functions, it is better to skip the execute than to throw an exception), "
#~ "predict displayables (if the function uses them), and give you addition "
#~ "information during lint (if at runtime it was ignored you can have a "
#~ "report here). The CDS does not guarantee that the execution will be "
#~ "successful, but the better you code your statement, the better Ren'Py can "
#~ "\"understand\" what you expect from it."
#~ msgstr ""
#~ "ユーザー定義ステートメント (CDS) は独自のステートメントを Ren'Py に追加出"
#~ "来るようにします。これにより現在の Ren'Py の文法ではサポートされない機能が"
#~ "追加出来ます。CDS はダイレクトな python コードより柔軟です。ほとんどの場"
#~ "合、繰り返し構造があるときに使用できます。例えば決まった1つの引数で関数を"
#~ "呼ぶときです。 Ren'Py はこの関数が何をして、どのように実行されるべきか分か"
#~ "らないため、 実行まで何もせず、例外が出たらエラーとなります。CDSの使用によ"
#~ "り parse を使用して文法の妥当性の確認(引数が妥当な文字列かなど)や実行時に"
#~ "不正なデータの無視(致命的でないエラーでは、例外を投げるよりその実行をス"
#~ "キップした方がよいです)、(使用するなら) displayable の予想、Lint 時の追加"
#~ "情報の掲示(実行時に無視させてもこちらで情報を得られます)が出来ます。CDS は"
#~ "実行の成功は保証しませんが、ステートメントのコーティングを改善し、Ren'Py "
#~ "に何がしたいかを「理解」させられます。"

#~ msgid ""
#~ "Creator-defined statements must be defined in a ``python early`` block. "
#~ "What's more, the filename containing the user-defined statement must be "
#~ "be loaded earlier than any file that uses it. Since Ren'Py loads files in "
#~ "Unicode sort order, it generally makes sense to prefix the name of any "
#~ "file containing a user-defined statement with 01, or some other small "
#~ "number."
#~ msgstr ""
#~ "ユーザー定義ステートメントは `python early` ブロックで定義され、さらにそれ"
#~ "を定義するファイルはそれを使用するどのファイルよりも先にロードされる必要が"
#~ "あります。 Ren'Py はユニコード順にファイルをロードするので一般的にはユー"
#~ "ザー定義ステートメントを含めるファイル名は  01  か、それより小さい数字が接"
#~ "頭辞に付きます。"

#~ msgid "The parse method takes a Lexer object:"
#~ msgstr "parse メソッドは Lexer オブジェクトを受け取ります。"

#~ msgid "Example"
#~ msgstr "例"

#~ msgid "This can be used by writing::"
#~ msgstr "これは以下のように記述して使用出来ます。 ::"

#, fuzzy
#~ msgid "Matches a simple Python expression, returns it as a string."
#~ msgstr "単純式にマッチし、文字列としてそれを返します。"

#~ msgid ""
#~ "This is called to determine the next statement. It is passed a single "
#~ "object, the argument returned from parse. It should either return a "
#~ "label, or return None if execution should continue to the next statement."
#~ msgstr ""
#~ "これを呼び出して次のステートメントを決定します。これには parse から返され"
#~ "たオブジェクトが引数として渡されます。ラベルか、次のステートメントに処理を"
#~ "移すなら None を返すべきです。"

#~ msgid "True if this takes a block, false otherwise."
#~ msgstr "これがブロックを取るなら True 、そうでなければ False です。"
