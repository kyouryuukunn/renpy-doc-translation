# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-27 14:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/displaying_images.rst:8
msgid "Displaying Images"
msgstr ""

#: ../../source/displaying_images.rst:10
msgid "The defining aspect of a visual novel, lending its name to the form, are the visuals. Ren'Py contains four statements that control the display of images, and a model that determines the order in which the images are displayed. This makes it convenient to display images in a manner that is suitable for use in visual novels and other storytelling games."
msgstr ""

#: ../../source/displaying_images.rst:16
msgid "The four statements that work with images are:"
msgstr ""

#: ../../source/displaying_images.rst:18
msgid "``image`` - defines a new image."
msgstr ""

#: ../../source/displaying_images.rst:19
msgid "``show`` - shows an image on a layer."
msgstr ""

#: ../../source/displaying_images.rst:20
msgid "``scene`` - clears a layer, and optionally shows an image on that layer."
msgstr ""

#: ../../source/displaying_images.rst:21
msgid "``hide`` - removes an image from a layer."
msgstr ""

#: ../../source/displaying_images.rst:23
msgid "As abrupt changes of image can be disconcerting to the user, Ren'Py has the ``with`` statement, which allows effects to be applied when the scene is changed."
msgstr ""

#: ../../source/displaying_images.rst:29
msgid "Concepts"
msgstr ""

#: ../../source/displaying_images.rst:32
msgid "Image"
msgstr ""

#: ../../source/displaying_images.rst:34
msgid "An image is something that can be show to the screen using the show statement. An image consists of a name and a displayable. When the image is shown on a layer, the displayable associated with it is displayed on that layer."
msgstr ""

#: ../../source/displaying_images.rst:39
msgid "An :dfn:`image name` consists of one or more names, separated by spaces. The first component of the image name is called the :dfn:`image tag`. The second and later components of the name are the :dfn:`image attributes`."
msgstr ""

#: ../../source/displaying_images.rst:44
msgid "For example, take the image name ``mary beach night happy``. The image tag is ``mary``, while the image attributes are ``beach``, ``night``, and ``happy``."
msgstr ""

#: ../../source/displaying_images.rst:48
msgid "A displayable is something that can be shown on the screen. The most common thing to show is a static image, which can be specified by giving the filename of the image, as a string. In the example above, we might use \"mary_beach_night_happy.png\" as the filename. However, an image may refer to :ref:`any displayable Ren'Py supports <displayables>`, not just static images. Thus, the same statements that are used to display images can also be used for animations, solid colors, and the other types of displayables."
msgstr ""

#: ../../source/displaying_images.rst:58
msgid "Layer"
msgstr ""

#: ../../source/displaying_images.rst:60
msgid "A layer is a list of displayables that are shown on the screen. Ren'Py supports multiple layers, including user-defined layers. The order of the layers is fixed within a game (controlled by the :var:`config.layers` variable), while the order of displayables within a layer is controlled by the order in which the scene and show statements are called, and the properties given to those statements."
msgstr ""

#: ../../source/displaying_images.rst:67
msgid "The following layers are defined as part of Ren'Py:"
msgstr ""

#: ../../source/displaying_images.rst:72
msgid "master"
msgstr ""

#: ../../source/displaying_images.rst:70
msgid "This is the default layer that is used by the scene, show, and hide statements. It's generally used for backgrounds and character sprites."
msgstr ""

#: ../../source/displaying_images.rst:76
msgid "transient"
msgstr ""

#: ../../source/displaying_images.rst:75
msgid "The default layer used by ui functions. This layer is cleared at the end of each interaction."
msgstr ""

#: ../../source/displaying_images.rst:79
msgid "screens"
msgstr ""

#: ../../source/displaying_images.rst:79
msgid "This layer is used by the screen system."
msgstr ""

#: ../../source/displaying_images.rst:84
msgid "overlay"
msgstr ""

#: ../../source/displaying_images.rst:82
msgid "The default layer used when a ui function is called from within an overlay function. This layer is cleared when an interaction is restarted."
msgstr ""

#: ../../source/displaying_images.rst:86
msgid "Additional layers can be defined by updating :var:`config.layers`, and the various other layer-related config variables. Using :func:`renpy.show_layer_at`, one or more transforms can be applied to a layer."
msgstr ""

#: ../../source/displaying_images.rst:92
msgid "Defining Images"
msgstr ""

#: ../../source/displaying_images.rst:94
msgid "There are two ways to define images. You can either place an image file in the image directory, or an image can be defined using the image statement. The former is simple, as it involves placing properly named files in a directory, while the latter a allows more control over how the image is defined, and allows images that are not image files."
msgstr ""

#: ../../source/displaying_images.rst:100
msgid "Images defined using the image statement take precedence over those defined by the image directory."
msgstr ""

#: ../../source/displaying_images.rst:106
msgid "Images Directory"
msgstr ""

#: ../../source/displaying_images.rst:108
msgid "The image directory is named \"images\", and is placed under the game directory. When a file with the .jpg or .png extension is placed underneath this directory, the extension is stripped, the rest of the filename is forced to lowercase, and the resulting filename is used as the image name if an image with that name has not been previously defined."
msgstr ""

#: ../../source/displaying_images.rst:114
msgid "This process takes place in all directories underneath the image directory. For example, all of these files will define the image ``eileen happy``::"
msgstr ""

#: ../../source/displaying_images.rst:124
msgid "Image Statement"
msgstr ""

#: ../../source/displaying_images.rst:126
msgid "The ``image`` statement is used to define an image. An image statement consists of a single logical line beginning with the keyword ``image``, followed by an image name, an equals sign ``=``, and a displayable. For example::"
msgstr ""

#: ../../source/displaying_images.rst:140
msgid "When an image is not directly in the game directory, you'll need to give the directories underneath it. For example, if the image is in game/eileen/happy.png, then you can write::"
msgstr ""

#: ../../source/displaying_images.rst:146
msgid "The image statement is run at init time, before the menus are shown or the start label runs. When not contained inside an ``init`` block, image statements are run as if they were placed inside an ``init`` block of priority 500."
msgstr ""

#: ../../source/displaying_images.rst:151
msgid "See also the :ref:`ATL variant of the image statement. <atl-image-statement>`"
msgstr ""

#: ../../source/displaying_images.rst:157
msgid "Show Statement"
msgstr ""

#: ../../source/displaying_images.rst:159
msgid "The ``show`` statement is used to display an image on a layer. A show statement consists of a single logical line beginning with the keyword ``show``, followed by an image name, followed by zero or more properties."
msgstr ""

#: ../../source/displaying_images.rst:164
msgid "If the show statement is given the exact name of an existing image, that image is the one that is shown. Otherwise, Ren'Py will attempt to find a unique image that:"
msgstr ""

#: ../../source/displaying_images.rst:168
msgid "Has the same tag as the one specified in the show statement."
msgstr ""

#: ../../source/displaying_images.rst:169
msgid "Has all of the attributes given in the show statement."
msgstr ""

#: ../../source/displaying_images.rst:170
msgid "If an image with the same tag is already showing, shares the largest number of attributes with that image."
msgstr ""

#: ../../source/displaying_images.rst:173
msgid "If a unique image cannot be found, an exception occurs."
msgstr ""

#: ../../source/displaying_images.rst:175
msgid "If an image with the same image tag is already showing on the layer, the new image replaces it. Otherwise, the image is placed above all other images in the layer. (That is, closest to the user.) This order may be modified by the ``zorder`` and ``behind`` properties."
msgstr ""

#: ../../source/displaying_images.rst:180
msgid "The show statement does not cause an interaction to occur. For the image to actually be displayed to the user, a statement that causes an interaction (like the say, menu, pause, and with statements) must be run."
msgstr ""

#: ../../source/displaying_images.rst:185
msgid "The show statement takes the following properties:"
msgstr ""

#: ../../source/displaying_images.rst:190
msgid "``as``"
msgstr ""

#: ../../source/displaying_images.rst:188
msgid "The ``as`` property takes a name. This name is used in place of the image tag when the image is shown. This allows the same image to be on the screen twice."
msgstr ""

#: ../../source/displaying_images.rst:201
msgid "``at``"
msgstr ""

#: ../../source/displaying_images.rst:193
msgid "The ``at`` property takes one or more comma-separated simple expressions. Each expression must evaluate to a transform. The transforms are applied to the image in left-to-right order."
msgstr ""

#: ../../source/displaying_images.rst:198
msgid "If no at clause is given, Ren'Py will retain any existing transform that has been applied to the image. If no transform exists, the image will be displayed using the :var:`default` transform."
msgstr ""

#: ../../source/displaying_images.rst:206
msgid "``behind``"
msgstr ""

#: ../../source/displaying_images.rst:204
msgid "Takes a comma-separated list of one or more names. Each name is taken as an image tag. The image is shown behind all images with the given tags that are currently being shown."
msgstr ""

#: ../../source/displaying_images.rst:209
#: ../../source/displaying_images.rst:316
msgid "``onlayer``"
msgstr ""

#: ../../source/displaying_images.rst:209
msgid "Takes a name. Shows the image on the named layer."
msgstr ""

#: ../../source/displaying_images.rst:215
msgid "``zorder``"
msgstr ""

#: ../../source/displaying_images.rst:212
msgid "Takes an integer. The integer specifies the relative ordering of images within a layer, with larger numbers being closer to the user. This isn't generally used by Ren'Py games, but can be useful when porting visual novels from other engines."
msgstr ""

#: ../../source/displaying_images.rst:217
msgid "Assuming we have the following images defined::"
msgstr ""

#: ../../source/displaying_images.rst:223
msgid "Some example show statements are::"
msgstr ""

#: ../../source/displaying_images.rst:245
msgid "**Show Expression.** A variant of the show statement replaces the image name with the keyword ``expression``, followed by a simple expression. The expression must evaluate to a displayable, and the displayable is shown on the layer. To hide the displayable, a tag must be given with the as statement."
msgstr ""

#: ../../source/displaying_images.rst:252
#: ../../source/displaying_images.rst:318
#: ../../source/inc/image_func:177
msgid "For example::"
msgstr ""

#: ../../source/displaying_images.rst:256
msgid "**Show Layer.** The show layer statement allows one to apply a transform or ATL transform to an entire layer (such as \"master\"), using syntax like::"
msgstr ""

#: ../../source/displaying_images.rst:262
msgid "or::"
msgstr ""

#: ../../source/displaying_images.rst:267
msgid "To stop applying transforms to the layer, use::"
msgstr ""

#: ../../source/displaying_images.rst:275
msgid "Scene Statement"
msgstr ""

#: ../../source/displaying_images.rst:277
msgid "The ``scene`` statement removes all displayables from a layer, and then shows an image on that layer. It consists of the keyword ``scene``, followed by an image name, followed by zero or more properties. The image is shown in the same way as in the show statement, and the scene statement takes the same properties as the show statement."
msgstr ""

#: ../../source/displaying_images.rst:283
msgid "The scene statement is often used to show an image on the background layer. For example::"
msgstr ""

#: ../../source/displaying_images.rst:288
msgid "**Scene Expression.** Like the show statement, the scene statement can take expressions instead of image names."
msgstr ""

#: ../../source/displaying_images.rst:292
msgid "**Clearing a layer.** When the image name is omitted entirely, the scene statement clears all displayables from a layer without showing another displayable."
msgstr ""

#: ../../source/displaying_images.rst:300
msgid "Hide Statement"
msgstr ""

#: ../../source/displaying_images.rst:302
msgid "The ``hide`` statement removes an image from a layer. It consists of the keyword ``hide``, followed by an image name, followed by an optional property. The hide statement takes the image tag from the image name, and then hides any image on the layer with that tag."
msgstr ""

#: ../../source/displaying_images.rst:307
msgid "Hide statements are rarely necessary. If a sprite represents a character, then a hide statement is only necessary when the character leaves the scene. When the character changes her emotion, it is preferable to use the show statement instead, as the show statement will automatically replace an image with the same tag."
msgstr ""

#: ../../source/displaying_images.rst:313
msgid "The hide statement takes the following property:"
msgstr ""

#: ../../source/displaying_images.rst:316
msgid "Takes a name. Hides the image from the named layer."
msgstr ""

#: ../../source/displaying_images.rst:324
msgid "You should never write::"
msgstr ""

#: ../../source/displaying_images.rst:329
msgid "Instead, just write::"
msgstr ""

#: ../../source/displaying_images.rst:337
msgid "With Statement"
msgstr ""

#: ../../source/displaying_images.rst:339
msgid "The ``with`` statement is used to apply a transition effect when the scene is changed, making showing and hiding images less abrupt. The with statement consists of the keyword ``with``, followed by a simple expression that evaluates either to a transition object or the special value ``None``."
msgstr ""

#: ../../source/displaying_images.rst:345
msgid "The transition effect is applied between the contents of the screen at the end of the previous interaction (with transient screens and displayables hidden), and the current contents of the scene, after the show and hide statements have executed."
msgstr ""

#: ../../source/displaying_images.rst:350
msgid "The with statement causes an interaction to occur. The duration of this interaction is controlled by the user, and the user can cause it to terminate early."
msgstr ""

#: ../../source/displaying_images.rst:354
msgid "For a full list of transitions that can be used, see the chapter on :ref:`transitions <transitions>`."
msgstr ""

#: ../../source/displaying_images.rst:357
msgid "An example of the with statement is::"
msgstr ""

#: ../../source/displaying_images.rst:366
msgid "This causes two transitions to occur. The first with statement uses the ``dissolve`` transition to change the screen from what was previously shown to the washington background. (The ``dissolve`` transition is, by default, defined as a .5 second dissolve.)"
msgstr ""

#: ../../source/displaying_images.rst:371
msgid "The second transition occurs after the Eileen and Lucy images are shown. It causes a dissolve from the scene consisting solely of the background to the scene consisting of all three images – the result is that the two new images appear to dissolve in simultaneously."
msgstr ""

#: ../../source/displaying_images.rst:379
msgid "With None"
msgstr ""

#: ../../source/displaying_images.rst:381
msgid "In the above example, there are two dissolves. But what if we wanted the background to appear instantly, followed by a dissolve of the two characters? Simply omitting the first with statement would cause all three images to dissolve in – we need a way to say that the first should be show instantly."
msgstr ""

#: ../../source/displaying_images.rst:387
msgid "The with statement changes behavior when given the special value ``None``. The ``with None`` statement causes an abbreviated interaction to occur, without changing what the user sees. When the next transition occurs, it will start from the scene as it appears at the end of this abbreviated interaction."
msgstr ""

#: ../../source/displaying_images.rst:393
msgid "For example, in::"
msgstr ""

#: ../../source/displaying_images.rst:402
msgid "Only a single transition occurs, from the washington background to the scene consisting of all three images."
msgstr ""

#: ../../source/displaying_images.rst:406
msgid "With Clause of Scene, Show, and Hide Statements"
msgstr ""

#: ../../source/displaying_images.rst:408
msgid "The show, scene, and hide statements can take an optional ``with`` clause, which allows a transition to be combined with showing or hiding an image. This clause follows the statements at the end of the same logical line. It begins with the keyword ``with``, followed by a simple expression."
msgstr ""

#: ../../source/displaying_images.rst:414
msgid "The with clause is equivalent to preceding the line with a ``with None`` statement, and following it by a :ref:`with statement <with-statement>` containing the text of the with clause. For example::"
msgstr ""

#: ../../source/displaying_images.rst:421
msgid "is equivalent to::"
msgstr ""

#: ../../source/displaying_images.rst:432
msgid "Hide and Show Window"
msgstr ""

#: ../../source/displaying_images.rst:434
msgid "The ``window`` statement is used to control if a window is shown when a character is not speaking (for example, during transitions and pauses). The ``window show`` statement causes the window to be shown, while the ``window hide`` statement hides the window."
msgstr ""

#: ../../source/displaying_images.rst:439
msgid "If the optional transition is given, it's used to show and hide the window. If not given, it defaults to :var:`config.window_show_transition` and :var:`config.window_hide_transition`. Giving None as the transition prevents it from occurring."
msgstr ""

#: ../../source/displaying_images.rst:444
msgid "The window itself is displayed by calling :var:`config.empty_window`. It defaults to having the narrator say an empty string. ::"
msgstr ""

#: ../../source/displaying_images.rst:463
msgid "Image Functions"
msgstr ""

#: ../../source/inc/image_func:5
msgid "Determines if `name` can be used to show an image. This interprets `name` as a tag and attributes. This is combined with the attributes of the currently-showing image with `tag` on `layer` to try to determine a unique image to show. If a unique image can be show, returns the name of that image as a tuple. Otherwise, returns None."
msgstr ""

#: ../../source/inc/image_func:13
msgid "`tag`"
msgstr ""

#: ../../source/inc/image_func:12
msgid "The image tag to get attributes from. If not given, defaults to the first component of `name`."
msgstr ""

#: ../../source/inc/image_func:15
#: ../../source/inc/image_func:49
#: ../../source/inc/image_func:73
#: ../../source/inc/image_func:163
msgid "`layer`"
msgstr ""

#: ../../source/inc/image_func:16
#: ../../source/inc/image_func:50
#: ../../source/inc/image_func:164
msgid "The layer to check. If None, uses the default layer for `tag`."
msgstr ""

#: ../../source/inc/image_func:20
msgid "Checks to see if there is a unique image with the given tag and attributes. If there is, returns the attributes in order. Otherwise, returns None."
msgstr ""

#: ../../source/inc/image_func:26
msgid "Copies images beginning with one prefix to images beginning with another. For example::"
msgstr ""

#: ../../source/inc/image_func:31
msgid "will create an image beginning with \"eileen2\" for every image beginning with \"eileen\". If \"eileen happy\" exists, \"eileen2 happy\" will be created."
msgstr ""

#: ../../source/inc/image_func:37
msgid "`old`"
msgstr ""

#: ../../source/inc/image_func:36
msgid "A space-separated string giving the components of the old image name."
msgstr ""

#: ../../source/inc/image_func:40
msgid "`new`"
msgstr ""

#: ../../source/inc/image_func:40
msgid "A space-separated string giving the components of the new image name."
msgstr ""

#: ../../source/inc/image_func:45
msgid "Return a tuple giving the image attributes for the image `tag`. If the image tag has not had any attributes associated since the last time it was hidden, returns `if_hidden`."
msgstr ""

#: ../../source/inc/image_func:54
msgid "Returns a list of image tags that have been defined."
msgstr ""

#: ../../source/inc/image_func:58
msgid "Returns the set of image tags on `layer` that are currently hidden, but still have attribute information associated with them."
msgstr ""

#: ../../source/inc/image_func:63
msgid "If an image with `tag` exists on `layer`, returns the bounding box of that image. Returns None if the image is not found."
msgstr ""

#: ../../source/inc/image_func:66
msgid "The bounding box is an (x, y, width, height) tuple. The components of the tuples are expressed in pixels, and may be floating point numbers."
msgstr ""

#: ../../source/inc/image_func:71
msgid "`width`, `height`"
msgstr ""

#: ../../source/inc/image_func:70
msgid "The width and height of the area that contains the image. If None, defaults the width and height of the screen, respectively."
msgstr ""

#: ../../source/inc/image_func:74
msgid "If None, uses the default layer for `tag`."
msgstr ""

#: ../../source/inc/image_func:78
msgid "Returns a list of image tags, ordered in a way that makes sense to present to the user."
msgstr ""

#: ../../source/inc/image_func:84
msgid "`attributes`"
msgstr ""

#: ../../source/inc/image_func:82
msgid "If present, only attributes that are compatible with the given attributes are considered. (Compatible means that the attributes can be in a single image at the same time.)"
msgstr ""

#: ../../source/inc/image_func:87
msgid "`sort`"
msgstr ""

#: ../../source/inc/image_func:87
msgid "If not None, the returned list of attributes is sorted. This is a function that should be used as a tiebreaker."
msgstr ""

#: ../../source/inc/image_func:92
msgid "This gets the placement of displayable d. There's very little warranty on this information, as it might change when the displayable is rendered, and might not exist until the displayable is first rendered."
msgstr ""

#: ../../source/inc/image_func:96
msgid "This returns an object with the following fields, each corresponding to a style property:"
msgstr ""

#: ../../source/inc/image_func:99
msgid "pos"
msgstr ""

#: ../../source/inc/image_func:100
msgid "xpos"
msgstr ""

#: ../../source/inc/image_func:101
msgid "ypos"
msgstr ""

#: ../../source/inc/image_func:102
msgid "anchor"
msgstr ""

#: ../../source/inc/image_func:103
msgid "xanchor"
msgstr ""

#: ../../source/inc/image_func:104
msgid "yanchor"
msgstr ""

#: ../../source/inc/image_func:105
msgid "offset"
msgstr ""

#: ../../source/inc/image_func:106
msgid "xoffset"
msgstr ""

#: ../../source/inc/image_func:107
msgid "yoffset"
msgstr ""

#: ../../source/inc/image_func:108
msgid "subpixel"
msgstr ""

#: ../../source/inc/image_func:112
msgid "If an image with the same name has been registered with renpy.register_image, returns it. Otherwise, returns None."
msgstr ""

#: ../../source/inc/image_func:117
msgid "Returns the tag corresponding to the currently speaking character (the `image` argument given to that character). Returns None if no character is speaking or the current speaking character does not have a corresponding image tag."
msgstr ""

#: ../../source/inc/image_func:124
msgid "Returns the set of image tags that are currently being shown on `layer`. If sort is true, returns a list of the tags from back to front."
msgstr ""

#: ../../source/inc/image_func:129
msgid "Return true if an image with `name` exists, and false if no such image exists."
msgstr ""

#: ../../source/inc/image_func:134
msgid "`name`"
msgstr ""

#: ../../source/inc/image_func:133
msgid "Either a string giving an image name, or a tuple of strings giving the name components."
msgstr ""

#: ../../source/inc/image_func:137
msgid "`exact`"
msgstr ""

#: ../../source/inc/image_func:137
msgid "Returns true if and only if an image with the exact name exists - parameterized matches are not included."
msgstr ""

#: ../../source/inc/image_func:142
msgid "Returns a list of images that have been added to Ren'Py, as a list of strings with spaces between the name components."
msgstr ""

#: ../../source/inc/image_func:147
msgid "Returns True if the named image has been seen at least once on the user's system. An image has been seen if it's been displayed using the show statement, scene statement, or :func:`renpy.show` function. (Note that there are cases where the user won't actually see the image, like a show immediately followed by a hide.)"
msgstr ""

#: ../../source/inc/image_func:155
msgid "Returns true if an image with the same tag as `name` is showing on `layer`."
msgstr ""

#: ../../source/inc/image_func:161
msgid "`image`"
msgstr ""

#: ../../source/inc/image_func:159
msgid "May be a string giving the image name or a tuple giving each component of the image name. It may also be a string giving only the image tag."
msgstr ""

#: ../../source/inc/image_func:168
msgid "This function takes one or more displayables as arguments. It causes Ren'Py to predict those displayables during every interaction until the displayables are removed by :func:`renpy.stop_predict`."
msgstr ""

#: ../../source/inc/image_func:172
msgid "If a displayable name is a string containing one or more \\* characters, the asterisks are used as a wildcard pattern. If there is at least one . in the string, the pattern is matched against filenames, otherwise it is matched against image names."
msgstr ""

#: ../../source/inc/image_func:181
msgid "starts predicting all images with the name eileen, while::"
msgstr ""

#: ../../source/inc/image_func:185
msgid "matches all files starting with concert in the images directory."
msgstr ""

#: ../../source/inc/image_func:189
msgid "This function takes one or more displayables as arguments. It causes Ren'Py to stop predicting those displayables during every interaction."
msgstr ""

#: ../../source/inc/image_func:192
msgid "Wildcard patterns can be used as described in :func:`renpy.start_predict`."
msgstr ""

