# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-28 19:28+0900\n"
"PO-Revision-Date: 2021-01-01 13:38+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2014-06-21 06:27+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/conditional.rst:7
msgid "Conditional Statements"
msgstr "条件分岐用ステートメント"

#: ../../source/conditional.rst:9
msgid ""
"Ren'Py includes several statements that can alter control flow based on "
"expression values. This is in addition to the :ref:`jump <jump-statement>`, :"
"ref:`call <call-statement>` and :ref:`return <return-statement>` statements, "
"which transfer control unconditionally."
msgstr ""
"Ren'Py には式の値に応じて制御フローを変更するいくつかのステートメントがありま"
"す (これは条件とは関係なしに制御を移動する :ref:`jump <jump-statement>`, :"
"ref:`call <call-statement>`, :ref:`return <return-statement>` ステートメント"
"の発展版です)。"

#: ../../source/conditional.rst:14
msgid ""
"Note that is pages discusses statements that can be used inside Ren'Py "
"script. Python embedded in a Ren'Py game uses the Python while, if, and for "
"statements, but can't embed Ren'Py script statements."
msgstr ""
"ここで紹介されているステートメントは Ren'Py スクリプトで利用できるものです。"
"Ren'Py のゲームに組み込まれた Python のコードでは、Python の while、if、for "
"ステートメントを利用できますが、Ren'Py スクリプトのコードでは利用できません。"

#: ../../source/conditional.rst:21
msgid "If Statement"
msgstr "if ステートメント"

#: ../../source/conditional.rst:23
msgid ""
"The ``if`` statement conditionally executes a block of statements if a "
"Python expression is true. It consists of an ``if`` clause, zero or more "
"``elif`` clauses, and an optional ``else`` clause."
msgstr ""
"``if`` ステートメントは python 式が True ならブロックを実行します。これは 1 "
"つの ``if`` 節と 0 以上の ``elif`` 節、任意の ``else`` 節からできています。"

#: ../../source/conditional.rst:27
msgid ""
"Each clause should be on its own logical line, followed by a block of "
"statements. The if and elif clauses are followed by an expression, while all "
"clauses end with a colon ``:``."
msgstr ""
"各節はステートメントのブロックが続く論理行上になければなりません。 if と "
"elif 節には式が続き、全ての節はコロン ``:`` で終ります。"

#: ../../source/conditional.rst:31
msgid "Examples are::"
msgstr "例::"

#: ../../source/conditional.rst:47
msgid ""
"The expressions in the if statement are evaluated in order, from first to "
"last. When an expression evaluates to true, the block corresponding to that "
"statement is executed. When control reaches the end of the block, it "
"proceeds to the statement following the if statement."
msgstr ""
"if ステートメントの式は順番に最初から最後まで評価されます。式が True に評価さ"
"れると、そのステートメントに対応するブロックが実行されます。制御がそのブロッ"
"クの終端に達すると if ステートメントの後のステートメントに進みます。"

#: ../../source/conditional.rst:53
msgid ""
"If all expressions evaluate to false, the block associated with the ``else`` "
"clause is executed, if the ``else`` clause is present."
msgstr ""
"全ての式の評価が False で、 ``else`` 節が存在するなら ``else`` 節に関連付けら"
"れたブロックが実行されます。"

#: ../../source/conditional.rst:60
msgid "While Statement"
msgstr "while ステートメント"

#: ../../source/conditional.rst:62
msgid ""
"The ``while`` statement executes a block of statements while an expression "
"evaluates True. For example::"
msgstr ""
"``while`` ステートメントは式の評価が True である限りブロックを実行します。"
"例 ::"

#: ../../source/conditional.rst:89
msgid ""
"The expression is evaluated when while statement is first reached, and then "
"each time control reaches the end of the block. When the expression returns "
"a false value, the statement after the while statement is executed."
msgstr ""
"式は while ステートメントに最初に到達したときと、そのブロックの終端に制御が到"
"達する度に評価されます。式が False を返すと while ステートメントの後のステー"
"トメントが実行されます。"

#: ../../source/conditional.rst:93
msgid ""
"Ren'Py does not have continue, break, or for statements. Continue and break "
"statements can be replaced by jumps to labels placed before or after the "
"while loop, respectively. The first example of a while loop, above, shows "
"how a while loop can replace a simple for statement. The second shows how it "
"can replace a for statement which iterates through a list (also known as a "
"foreach statement in other programming languages)."
msgstr ""
"Ren'Py は continue, break, for ステートメントを持ちません。 continue と "
"break ステートメントはそれぞれ while ループの前と後に配置されたラベルへのジャ"
"ンプで置き換えられます。上記の while ループの最初の例はどのように while ルー"
"プで for ステートメントを置き換えるかを示しています。二つ目ではどのように(他"
"の言語では foreach ステートメントとして知られる)リストをイテレートする for ス"
"テートメントを置き換えるかを示しています。"

#: ../../source/conditional.rst:104
msgid "Pass Statement"
msgstr "pass ステートメント"

#: ../../source/conditional.rst:106
msgid ""
"The ``pass`` statement can be used when a block is required, but no "
"statement is suitable. It does nothing."
msgstr ""
"``pass`` ステートメントはブロックが必要だけれど適切なステートメントがないとき"
"に使用出来ます。これは何もしません。"

#: ../../source/conditional.rst:109
msgid "For example::"
msgstr "例 ::"
