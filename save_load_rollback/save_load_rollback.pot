# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-30 21:47+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/save_load_rollback.rst:6
msgid "Saving, Loading, and Rollback"
msgstr ""

#: ../../source/save_load_rollback.rst:8
msgid "Ren'Py has support for saving game state, loading game state, and rolling back to a previous game state. Although implemented in a slightly different fashion, rollback can be thought of as saving the game at the start of each statement that interacts with the user, and loading saves when the user rolls back."
msgstr ""

#: ../../source/save_load_rollback.rst:17
msgid "While we usually attempt to keep save compatibility between releases, this compatibility is not guaranteed. We may decide to break save-compatibility if doing so provides a sufficiently large benefit."
msgstr ""

#: ../../source/save_load_rollback.rst:22
msgid "What is Saved"
msgstr ""

#: ../../source/save_load_rollback.rst:24
msgid "Ren'Py attempts to save the game state. This includes both internal state and Python state."
msgstr ""

#: ../../source/save_load_rollback.rst:27
msgid "The internal state consists of all aspects of Ren'Py that are intented to change once the game has started, and includes:"
msgstr ""

#: ../../source/save_load_rollback.rst:30
msgid "The current statement, and all statements that can be returned to."
msgstr ""

#: ../../source/save_load_rollback.rst:31
msgid "The images and displayables that are being shown."
msgstr ""

#: ../../source/save_load_rollback.rst:32
msgid "The screens being shown, and the values of variables within those screens."
msgstr ""

#: ../../source/save_load_rollback.rst:34
msgid "The music that Ren'Py is playing."
msgstr ""

#: ../../source/save_load_rollback.rst:35
msgid "The list of nvl-mode text blocks."
msgstr ""

#: ../../source/save_load_rollback.rst:37
msgid "The Python state consists of the variables in the store that have changed since the game began, and all objects reachable from those variables. Note that it's the change to the variables that matters – changes to fields in objects will not cause those objects to be saved."
msgstr ""

#: ../../source/save_load_rollback.rst:42
msgid "In this example::"
msgstr ""

#: ../../source/save_load_rollback.rst:51
msgid "only `b` will be saved. A will not be saved because it does not change once the game begins. `O` is not saved because it does not change – the object it refers to changes, but the variable itself does not."
msgstr ""

#: ../../source/save_load_rollback.rst:57
msgid "What isn't Saved"
msgstr ""

#: ../../source/save_load_rollback.rst:59
msgid "Python variables that are not changed before the game begins will not be saved. This can be a major problem if a variable that is saved and one that is refer to the same object. (Alias the object.) In this example::"
msgstr ""

#: ../../source/save_load_rollback.rst:73
msgid "`a` and `b` are aliased. Saving and loading may break this aliasing, causing `a` and `b` to refer to different objects. Since this can be very confusing, it's best to avoid aliasing saved and unsaved variables. (This is rare to encounter directly, but might come up when an unsaved variable and saved field alias.)"
msgstr ""

#: ../../source/save_load_rollback.rst:79
msgid "There are several other kinds of state that isn't saved:"
msgstr ""

#: ../../source/save_load_rollback.rst:84
msgid "control flow path"
msgstr ""

#: ../../source/save_load_rollback.rst:82
msgid "Ren'Py only saves the current statement, and the statement it needs to return to. It doesn't remember how it got there. Importantly, statements (including variable assignments) that are added to the game won't run."
msgstr ""

#: ../../source/save_load_rollback.rst:89
msgid "mappings of image names to displayables"
msgstr ""

#: ../../source/save_load_rollback.rst:87
msgid "Since this mapping is not saved, the image may change to a new image when the game loads again. This allows an image to change to a new file as the game evolves."
msgstr ""

#: ../../source/save_load_rollback.rst:95
msgid "configuration variables, styles, and style properties"
msgstr ""

#: ../../source/save_load_rollback.rst:92
msgid "Configuration variables and styles aren't saved as part of the game. Therefore, they should only be changed in ``init`` blocks, and left alone once the game has started."
msgstr ""

#: ../../source/save_load_rollback.rst:98
msgid "Where Ren'Py Saves"
msgstr ""

#: ../../source/save_load_rollback.rst:100
msgid "Saves occur at the start of a Ren'Py statement in the outermost interaction context."
msgstr ""

#: ../../source/save_load_rollback.rst:103
msgid "What's important here is to note that saving occurs at the **start** of a statement. If a load or rollback occurs in the middle of a statement that interacts multiple times, the state will be the state that was active when the statement began."
msgstr ""

#: ../../source/save_load_rollback.rst:108
msgid "This can be a problem in Python-defined statements. In::"
msgstr ""

#: ../../source/save_load_rollback.rst:120
msgid "if the user saves and loads in the middle, the loop will begin anew. Using Ren'Py script – rather than Python – to loop avoids this problem.::"
msgstr ""

#: ../../source/save_load_rollback.rst:133
msgid "What Ren'Py can Save"
msgstr ""

#: ../../source/save_load_rollback.rst:135
msgid "Ren'Py uses the Python pickle system to save game state. This module can save:"
msgstr ""

#: ../../source/save_load_rollback.rst:138
msgid "Basic types, such as True, False, None, int, str, float, complex, str, and Unicode objects."
msgstr ""

#: ../../source/save_load_rollback.rst:139
msgid "Compound types, like lists, tuples, sets, and dicts."
msgstr ""

#: ../../source/save_load_rollback.rst:140
msgid "Creator-defined objects, classes, functions, methods, and bound methods. For pickling these functions to succeed, they must remain available under their original names."
msgstr ""

#: ../../source/save_load_rollback.rst:143
msgid "Character, Displayable, Transform, and Transition objects."
msgstr ""

#: ../../source/save_load_rollback.rst:145
msgid "There are certain types that cannot be pickled:"
msgstr ""

#: ../../source/save_load_rollback.rst:147
msgid "Render objects."
msgstr ""

#: ../../source/save_load_rollback.rst:148
msgid "Iterator objects."
msgstr ""

#: ../../source/save_load_rollback.rst:149
msgid "File-like objects."
msgstr ""

#: ../../source/save_load_rollback.rst:150
msgid "Inner functions and lambdas."
msgstr ""

#: ../../source/save_load_rollback.rst:152
msgid "By default, Ren'Py uses the cPickle module to save the game. Setting :var:`config.use_cpickle` will make Ren'Py use the pickle module instead. This makes the game slower, but is better at reporting save errors."
msgstr ""

#: ../../source/save_load_rollback.rst:158
msgid "Save Functions and Variables"
msgstr ""

#: ../../source/save_load_rollback.rst:160
msgid "There is one variable that is used by the high-level save system:"
msgstr ""

#: ../../source/save_load_rollback.rst:164
msgid "This is a string that is stored with each save. It can be used to give a name to the save, to help users tell them apart."
msgstr ""

#: ../../source/save_load_rollback.rst:167
msgid "There are a number of high-level save actions and functions defined in the :ref:`screen actions <screen-actions>`. In addition, there are the following low-level save and load actions."
msgstr ""

#: ../../source/save_load_rollback.rst:175
msgid "Retaining Data After Load"
msgstr ""

#: ../../source/save_load_rollback.rst:177
msgid "When a game is loaded, the state of the game is reset (using the rollback system described below) to the state of the game when the current statement began executing."
msgstr ""

#: ../../source/save_load_rollback.rst:181
msgid "In some cases, this may not be desirable. For example, when a screen allows editing of a value, we may want to retain that value when the game is loaded. When renpy.retain_after_load is called, data will not be reverted when a game is saved and loaded before the end of the next checkpointed interaction."
msgstr ""

#: ../../source/save_load_rollback.rst:187
msgid "Note that while data is not changed, control is reset to the start of the current statement. That statement will execute again, with the new data in place at the start of the statement."
msgstr ""

#: ../../source/save_load_rollback.rst:191
#: ../../source/save_load_rollback.rst:408
msgid "For example::"
msgstr ""

#: ../../source/save_load_rollback.rst:209
msgid "Rollback"
msgstr ""

#: ../../source/save_load_rollback.rst:211
msgid "Rollback allows the user to revert the game to an earlier state in much the same way as undo/redo systems that are available in most modern applications. While the system takes care of maintaining the visuals and game variables during rollback events, there are several things that should be considered while creating a game."
msgstr ""

#: ../../source/save_load_rollback.rst:218
msgid "Supporting Rollback and Roll Forward"
msgstr ""

#: ../../source/save_load_rollback.rst:220
msgid "Most Ren'Py statements automatically support rollback and roll forward. If you call :func:`ui.interact` directly, you'll need to add support for rollback and roll-forward yourself. This can be done using the following structure::"
msgstr ""

#: ../../source/save_load_rollback.rst:237
msgid "It's important that your game does not interact with the user after renpy.checkpoint has been called. (If you do, the user may not be able to rollback.)"
msgstr ""

#: ../../source/save_load_rollback.rst:243
msgid "Blocking Rollback"
msgstr ""

#: ../../source/save_load_rollback.rst:247
msgid "Blocking rollback is a user-unfriendly thing to do. If a user mistakenly clicks on an unintended choice, he or she will be unable to correct their mistake. Since rollback is equivalent to saving and loading, your users will be forced to save more often, breaking game engagement."
msgstr ""

#: ../../source/save_load_rollback.rst:252
msgid "It is possible to disable rollback in part or in full. If rollback is not wanted at all, it can simply be turned off through the :var:`config.rollback_enabled` option."
msgstr ""

#: ../../source/save_load_rollback.rst:256
msgid "More common is a partial block of rollback. This can be achieved by the :func:`renpy.block_rollback` function. When called, it will instruct Ren'Py not to roll back before that point. For example::"
msgstr ""

#: ../../source/save_load_rollback.rst:277
msgid "When the label no_return is reached, Ren'Py won't allow a rollback back to the menu."
msgstr ""

#: ../../source/save_load_rollback.rst:282
msgid "Fixing Rollback"
msgstr ""

#: ../../source/save_load_rollback.rst:284
msgid "Fixing rollback provides for an intermediate choice between unconstrained rollback and blocking rollback entirely. Rollback is allowed, but the user is not allowed to make changes to their decisions. Fixing rollback is done with the :func:`renpy.fix_rollback` function, as shown in the following example::"
msgstr ""

#: ../../source/save_load_rollback.rst:306
msgid "Now, after the fix_rollback function is called, it will still be possible for the user to roll back to the menu. However, it will not be possible to make a different choice."
msgstr ""

#: ../../source/save_load_rollback.rst:310
msgid "There are some caveats to consider when designing a game for fix_rollback. Ren'Py will automatically take care of locking any data that is given to :func:`checkpoint`. However, due to the generic nature of Ren'Py, it is possible to write Python that bypasses this and changes things in ways that may have unpredictable results. It is up to the game designer to block rollback at problematic locations or write additional Python to deal with it."
msgstr ""

#: ../../source/save_load_rollback.rst:318
msgid "The internal user interaction options for menus, :func:`renpy.input` and :func:`renpy.imagemap` are designed to fully work with fix_rollback."
msgstr ""

#: ../../source/save_load_rollback.rst:322
msgid "Styling Fixed Rollback"
msgstr ""

#: ../../source/save_load_rollback.rst:324
msgid "Because fix_rollback changes the functionality of menus and imagemaps, it is advisable to reflect this in the appearance. To do this, it is important to understand how the widget states of the menu buttons are changed. There are two modes that can be selected through the :var:`config.fix_rollback_without_choice` option."
msgstr ""

#: ../../source/save_load_rollback.rst:330
msgid "The default option will set the chosen option to \"selected\", thereby activating the style properties with the \"selected\\_\" prefix. All other buttons will be made insensitive and show using the properties with the \"insensitive\\_\" prefix. Effectively this leaves the menu with a single selectable choice."
msgstr ""

#: ../../source/save_load_rollback.rst:336
msgid "When the :var:`config.fix_rollback_without_choice` option is set to False, all buttons are made insensitive. This means that the chosen option will use the \"selected_insensitive\\_\" prefix for the style properties while the other buttons use properties with the \"insensitive\\_\" prefix."
msgstr ""

#: ../../source/save_load_rollback.rst:343
msgid "Fixed Rollback and Custom Screens"
msgstr ""

#: ../../source/save_load_rollback.rst:345
msgid "When writing custom Python routines that must play nice with the fix_rollback system there are a few simple things to know. First of all the :func:`renpy.in_fixed_rollback` function can be used to determine whether the game is currently in fixed rollback state. Second, when in fixed rollback state, :func:`ui.interact` will always return the supplied roll_forward data regardless of what action was performed. This effectively means that when the :func:`ui.interact`/:func:`renpy.checkpoint` functions are used, most of the work is done."
msgstr ""

#: ../../source/save_load_rollback.rst:354
msgid "To simplify the creation of custom screens, two actions are provided to help with the most common uses. The :func:`ui.ChoiceReturn` action returns the value when the button it is attached to is clicked. The :func:`ui.ChoiceJump` action can be used to jump to a script label. However, this action only works properly when the screen is called trough a ``call screen`` statement."
msgstr ""

#: ../../source/save_load_rollback.rst:361
#: ../../source/save_load_rollback.rst:375
msgid "Example::"
msgstr ""

#: ../../source/save_load_rollback.rst:399
msgid "Rollback-blocking and -fixing Functions"
msgstr ""

#: ../../source/save_load_rollback.rst:404
msgid "NoRollback"
msgstr ""

