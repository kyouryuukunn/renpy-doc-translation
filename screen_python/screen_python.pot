# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2019, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-31 16:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/screen_python.rst:6
msgid "Screens and Python"
msgstr ""

#: ../../source/screen_python.rst:8
msgid "Ren'Py supports defining screens in Python, as well as in the Ren'Py screen language. A Python screen is created by supplying a screen function to the :func:`renpy.define_screen` function. It can then be used like it was any other screen."
msgstr ""

#: ../../source/screen_python.rst:13
msgid "The screen function should have parameters corresponding to the scope variables it expects, and it should ignore extra keyword arguments. (That is, it should have `**kwargs` at the end of its parameter list.) It is then expected to call the UI functions to add displayables to the screen.The screen function is called whenever an interaction starts or restarts."
msgstr ""

#: ../../source/screen_python.rst:20
msgid "To ensure that this restarting is seamless to the user (and not causing things to reset), it's important that every call to a UI function supply the `id` argument. As a screen is re-created, Ren'Py will update each displayable with the contents of the old displayable with the same id. Ids are generated automatically by the screen language, but when doing things by hand, they must be manually specified."
msgstr ""

#: ../../source/screen_python.rst:30
msgid "UI Functions are deprecated and not recommended."
msgstr ""

#: ../../source/screen_python.rst:32
msgid "Here's an example Python screen::"
msgstr ""

#: ../../source/screen_python.rst:49
msgid "Screen Functions"
msgstr ""

#: ../../source/screen_python.rst:51
msgid "The following functions support the definition, display, and hiding of screens."
msgstr ""

#: ../../source/inc/screens:5
msgid "The programmatic equivalent of the call screen statement."
msgstr ""

#: ../../source/inc/screens:7
msgid "This shows `_screen_name` as a screen, then causes an interaction to occur. The screen is hidden at the end of the interaction, and the result of the interaction is returned."
msgstr ""

#: ../../source/inc/screens:11
msgid "Positional arguments, and keyword arguments that do not begin with _ are passed to the screen."
msgstr ""

#: ../../source/inc/screens:14
msgid "If the keyword argument `_with_none` is false, \"with None\" is not run at the end of end of the interaction."
msgstr ""

#: ../../source/inc/screens:17
msgid "If the keyword argument `_mode` in kwargs, it will be mode of this interaction, otherwise it will be \"screen\" mode."
msgstr ""

#: ../../source/inc/screens:22
msgid "Defines a screen with `name`, which should be a string."
msgstr ""

#: ../../source/inc/screens:30
msgid "`function`"
msgstr ""

#: ../../source/inc/screens:25
msgid "The function that is called to display the screen. The function is called with the screen scope as keyword arguments. It should ignore additional keyword arguments."
msgstr ""

#: ../../source/inc/screens:29
msgid "The function should call the ui functions to add things to the screen."
msgstr ""

#: ../../source/inc/screens:35
msgid "`modal`"
msgstr ""

#: ../../source/inc/screens:33
msgid "A string that, when evaluated, determines of the created screen should be modal. A modal screen prevents screens underneath it from receiving input events."
msgstr ""

#: ../../source/inc/screens:41
msgid "`zorder`"
msgstr ""

#: ../../source/inc/screens:38
msgid "A string that, when evaluated, should be an integer. The integer controls the order in which screens are displayed. A screen with a greater zorder number is displayed above screens with a lesser zorder number."
msgstr ""

#: ../../source/inc/screens:46
msgid "`tag`"
msgstr ""

#: ../../source/inc/screens:44
msgid "The tag associated with this screen. When the screen is shown, it replaces any other screen with the same tag. The tag defaults to the name of the screen."
msgstr ""

#: ../../source/inc/screens:50
msgid "`predict`"
msgstr ""

#: ../../source/inc/screens:49
msgid "If true, this screen can be loaded for image prediction. If false, it can't. Defaults to true."
msgstr ""

#: ../../source/inc/screens:52
msgid "`variant`"
msgstr ""

#: ../../source/inc/screens:53
msgid "String. Gives the variant of the screen to use."
msgstr ""

#: ../../source/inc/screens:57
msgid "Returns the ScreenDisplayable with the given `name` on layer. `name` is first interpreted as a tag name, and then a screen name. If the screen is not showing, returns None."
msgstr ""

#: ../../source/inc/screens:61
msgid "This can also take a list of names, in which case the first screen that is showing is returned."
msgstr ""

#: ../../source/inc/screens:64
msgid "This function can be used to check if a screen is showing::"
msgstr ""

#: ../../source/inc/screens:73
msgid "From the `screen` on `layer`, returns the widget with `id`. Returns None if the screen doesn't exist, or there is no widget with that id on the screen."
msgstr ""

#: ../../source/inc/screens:79
msgid "Returns the properties for the widget with `id` in the `screen` on `layer`. If `screen` is None, returns the properties for the current screen. This can be used from Python or property code inside a screen."
msgstr ""

#: ../../source/inc/screens:84
msgid "Note that this returns a dictionary containing the widget properties, and so to get an individual property, the dictionary must be accessed."
msgstr ""

#: ../../source/inc/screens:89
msgid "The programmatic equivalent of the hide screen statement."
msgstr ""

#: ../../source/inc/screens:91
msgid "Hides the screen with `tag` on `layer`."
msgstr ""

#: ../../source/inc/screens:95
msgid "Returns true if Ren'Py is currently predicting the screen."
msgstr ""

#: ../../source/inc/screens:99
msgid "The programmatic equivalent of the show screen statement."
msgstr ""

#: ../../source/inc/screens:101
msgid "Shows the named screen. This takes the following keyword arguments:"
msgstr ""

#: ../../source/inc/screens:103
msgid "`_screen_name`"
msgstr ""

#: ../../source/inc/screens:104
msgid "The name of the screen to show."
msgstr ""

#: ../../source/inc/screens:105
msgid "`_layer`"
msgstr ""

#: ../../source/inc/screens:106
msgid "The layer to show the screen on."
msgstr ""

#: ../../source/inc/screens:109
msgid "`_zorder`"
msgstr ""

#: ../../source/inc/screens:108
msgid "The zorder to show the screen on. If not specified, defaults to the zorder associated with the screen. It that's not specified, it is 0 by default."
msgstr ""

#: ../../source/inc/screens:113
msgid "`_tag`"
msgstr ""

#: ../../source/inc/screens:112
msgid "The tag to show the screen with. If not specified, defaults to the tag associated with the screen. It that's not specified, defaults to the name of the screen."
msgstr ""

#: ../../source/inc/screens:117
msgid "`_widget_properties`"
msgstr ""

#: ../../source/inc/screens:116
msgid "A map from the id of a widget to a property name -> property value map. When a widget with that id is shown by the screen, the specified properties are added to it."
msgstr ""

#: ../../source/inc/screens:121
msgid "`_transient`"
msgstr ""

#: ../../source/inc/screens:120
msgid "If true, the screen will be automatically hidden at the end of the current interaction."
msgstr ""

#: ../../source/inc/screens:123
msgid "Non-keyword arguments, and keyword arguments that do not begin with an underscore, are passed to the screen."
msgstr ""

#: ../../source/inc/screens:128
msgid "Causes Ren'Py to start predicting the screen named `_screen_name` will be shown with the given arguments. This replaces  any previous prediction of `_screen_name`. To stop predicting a screen, call :func:`renpy.stop_predict_screen`."
msgstr ""

#: ../../source/inc/screens:134
msgid "Causes Ren'Py to stop predicting the screen named `name` will be shown."
msgstr ""

#: ../../source/inc/screens:138
msgid "Returns true if a `name` is a screen variant that can be chosen by Ren'Py. See :ref:`screen-variants` for more details. This function can be used as the condition in a Python if statement to set up the appropriate styles for the selected screen variant."
msgstr ""

#: ../../source/inc/screens:143
msgid "`name` can also be a list of variants, in which case this function returns True if any of the variants is selected."
msgstr ""

#: ../../source/screen_python.rst:57
msgid "UI Functions"
msgstr ""

#: ../../source/screen_python.rst:61
msgid "The implementation of Ren'Py has changed, and UI functions that create displayables can now be far slower than their screen language equivalents."
msgstr ""

#: ../../source/screen_python.rst:65
msgid "The UI functions are Python equivalents of the screen language statements. For each screen language statement, there is a ui function with the same name. For example, ui.text corresponds to the text statement, and ui.add corresponds to the add statement."
msgstr ""

#: ../../source/screen_python.rst:70
msgid "There is a simple mapping between screen language parameters and arguments and Python arguments. Screen language parameters become positional arguments, while properties become keyword arguments. For example, the screen language statement: ::"
msgstr ""

#: ../../source/screen_python.rst:77
msgid "becomes: ::"
msgstr ""

#: ../../source/screen_python.rst:81
msgid "(It really should have an `id` parameter added.)"
msgstr ""

#: ../../source/screen_python.rst:83
msgid "There are three groups of UI functions, corresponding to the number of children they take."
msgstr ""

#: ../../source/screen_python.rst:89
msgid "The following UI functions do not take any children."
msgstr ""

#: ../../source/screen_python.rst:91
msgid "ui.add"
msgstr ""

#: ../../source/screen_python.rst:92
msgid "ui.bar"
msgstr ""

#: ../../source/screen_python.rst:93
msgid "ui.imagebutton"
msgstr ""

#: ../../source/screen_python.rst:94
msgid "ui.input"
msgstr ""

#: ../../source/screen_python.rst:95
msgid "ui.key"
msgstr ""

#: ../../source/screen_python.rst:96
msgid "ui.label"
msgstr ""

#: ../../source/screen_python.rst:97
msgid "ui.null"
msgstr ""

#: ../../source/screen_python.rst:98
msgid "ui.text"
msgstr ""

#: ../../source/screen_python.rst:99
msgid "ui.textbutton"
msgstr ""

#: ../../source/screen_python.rst:100
msgid "ui.timer"
msgstr ""

#: ../../source/screen_python.rst:101
msgid "ui.vbar"
msgstr ""

#: ../../source/screen_python.rst:102
msgid "ui.hotspot"
msgstr ""

#: ../../source/screen_python.rst:103
msgid "ui.hotbar"
msgstr ""

#: ../../source/screen_python.rst:104
msgid "ui.spritemanager"
msgstr ""

#: ../../source/screen_python.rst:106
msgid "The following UI functions take a single child. They must be given that child – use :func:`ui.null` if the child is missing."
msgstr ""

#: ../../source/screen_python.rst:109
msgid "ui.button"
msgstr ""

#: ../../source/screen_python.rst:110
msgid "ui.frame"
msgstr ""

#: ../../source/screen_python.rst:111
msgid "ui.transform"
msgstr ""

#: ../../source/screen_python.rst:112
msgid "ui.window"
msgstr ""

#: ../../source/screen_python.rst:113
msgid "ui.drag"
msgstr ""

#: ../../source/screen_python.rst:115
msgid "The following UI functions take multiple children. They continue taking children until :func:`ui.close` is called."
msgstr ""

#: ../../source/screen_python.rst:118
msgid "ui.fixed"
msgstr ""

#: ../../source/screen_python.rst:119
msgid "ui.grid"
msgstr ""

#: ../../source/screen_python.rst:120
msgid "ui.hbox"
msgstr ""

#: ../../source/screen_python.rst:121
msgid "ui.side"
msgstr ""

#: ../../source/screen_python.rst:122
msgid "ui.vbox"
msgstr ""

#: ../../source/screen_python.rst:123
msgid "ui.imagemap"
msgstr ""

#: ../../source/screen_python.rst:124
msgid "ui.draggroup"
msgstr ""

#: ../../source/screen_python.rst:126
msgid "There are a few UI functions that do not correspond to screen language statements, as they correspond to concepts that are not present in the screen language."
msgstr ""

#: ../../source/inc/ui:5
msgid "Adjustment objects represent a value that can be adjusted by a bar or viewport. They contain information about the value, the range of the value, and how to adjust the value in small steps and large pages."
msgstr ""

#: ../../source/inc/ui:10
msgid "The following parameters correspond to fields or properties on the adjustment object:"
msgstr ""

#: ../../source/inc/ui:14
msgid "`range`"
msgstr ""

#: ../../source/inc/ui:14
msgid "The range of the adjustment, a number."
msgstr ""

#: ../../source/inc/ui:17
msgid "`value`"
msgstr ""

#: ../../source/inc/ui:17
msgid "The value of the adjustment, a number."
msgstr ""

#: ../../source/inc/ui:24
msgid "`step`"
msgstr ""

#: ../../source/inc/ui:20
msgid "The step size of the adjustment, a number. If None, then defaults to 1/10th of a page, if set. Otherwise, defaults to the 1/20th of the range."
msgstr ""

#: ../../source/inc/ui:24
msgid "This is used when scrolling a viewport with the mouse wheel."
msgstr ""

#: ../../source/inc/ui:31
msgid "`page`"
msgstr ""

#: ../../source/inc/ui:27
msgid "The page size of the adjustment. If None, this is set automatically by a viewport. If never set, defaults to 1/10th of the range."
msgstr ""

#: ../../source/inc/ui:31
msgid "It's can be used when clicking on a scrollbar."
msgstr ""

#: ../../source/inc/ui:33
msgid "The following parameters control the behavior of the adjustment."
msgstr ""

#: ../../source/inc/ui:41
msgid "`adjustable`"
msgstr ""

#: ../../source/inc/ui:36
msgid "If True, this adjustment can be changed by a bar. If False, it can't."
msgstr ""

#: ../../source/inc/ui:39
msgid "It defaults to being adjustable if a `changed` function is given or if the adjustment is associated with a viewport, and not adjustable otherwise."
msgstr ""

#: ../../source/inc/ui:45
msgid "`changed`"
msgstr ""

#: ../../source/inc/ui:44
msgid "This function is called with the new value when the value of the adjustment changes."
msgstr ""

#: ../../source/inc/ui:49
msgid "`ranged`"
msgstr ""

#: ../../source/inc/ui:48
msgid "This function is called with the adjustment object when the range of the adjustment is set by a viewport."
msgstr ""

#: ../../source/inc/ui:59
msgid "`force_step`"
msgstr ""

#: ../../source/inc/ui:52
msgid "If True and this adjustment changes by dragging associated viewport or a bar, value will be changed only if the drag reached next step. If \"release\" and this adjustment changes by dragging associated viewport or a bar, after the release, value will be rounded to the nearest step. If False, this adjustment will changes by dragging, ignoring the step value."
msgstr ""

#: ../../source/inc/ui:63
msgid "Changes the value of the adjustment to `value`, updating any bars and viewports that use the adjustment."
msgstr ""

#: ../../source/inc/ui:69
msgid "Specifies a transform that is applied to the next displayable to be created. This is largely obsolete, as all UI functions now take an `at` argument."
msgstr ""

#: ../../source/inc/ui:75
msgid "Closes a displayable created with by a UI function. When a displayable is closed, we add new displayables to its parent, or to the layer if no displayable is open."
msgstr ""

#: ../../source/inc/ui:81
msgid "Do not add the next displayable to any later or container. Use this if you want to assign the result of a ui function to a variable."
msgstr ""

#: ../../source/inc/ui:86
msgid "Causes an interaction with the user, and returns the result of that interaction. This causes Ren'Py to redraw the screen and begin processing input events. When a displayable returns a value in response to an event, that value is returned from ui.interact, and the interaction ends."
msgstr ""

#: ../../source/inc/ui:91
msgid "This function is rarely called directly. It is usually called by other parts of Ren'Py, including the say statement, menu statement, with statement, pause statement, call screen, :func:`renpy.input`, among many other functions. However, it can be called directly if necessary."
msgstr ""

#: ../../source/inc/ui:96
msgid "When an interaction ends, the transient layer and all screens shown with transient=True are cleared from the scene lists."
msgstr ""

#: ../../source/inc/ui:99
msgid "The following arguments are documented. As other, undocumented arguments exist for Ren'Py's internal use, please pass all arguments as keyword arguments."
msgstr ""

#: ../../source/inc/ui:107
msgid "`roll_forward`"
msgstr ""

#: ../../source/inc/ui:104
msgid "The information that will be returned by this function when a roll forward occurs. (If None, the roll forward is ignored.) This should usually be passed the result of the :func:`renpy.roll_forward_info` function."
msgstr ""

#: ../../source/inc/ui:109
msgid "`mouse`"
msgstr ""

#: ../../source/inc/ui:110
msgid "The style of mouse cursor to use during this function."
msgstr ""

#: ../../source/inc/ui:114
msgid "Adds displayables to the layer named `name`. The later must be closed with :func:`ui.close`."
msgstr ""

#: ../../source/inc/ui:119
msgid "Assigns the displayable `d` the screen widget id `id_`, as if it had been created by a screen statement with that id."
msgstr ""

#: ../../source/screen_python.rst:133
msgid "Actions"
msgstr ""

#: ../../source/screen_python.rst:135
msgid "Many of the displayables created in the screen language take actions as arguments. An action is one of three things:"
msgstr ""

#: ../../source/screen_python.rst:138
msgid "A callable Python object (like a function or bound method) that takes no arguments."
msgstr ""

#: ../../source/screen_python.rst:140
msgid "An object of a class that inherits from the Action class."
msgstr ""

#: ../../source/screen_python.rst:141
msgid "A list of other Actions."
msgstr ""

#: ../../source/screen_python.rst:143
msgid "The advantage to inheriting from the Action class is that it allows you to override the methods that determine when a button should be sensitive, and when it is selected."
msgstr ""

#: ../../source/screen_python.rst:149
msgid "To define a new action, inherit from this class. Override the methods in this class to change the behavior of the action."
msgstr ""

#: ../../source/screen_python.rst:154
msgid "This is the method that is called when the action is activated. In many cases, returning a non-None value from the action will cause the current interaction to end."
msgstr ""

#: ../../source/screen_python.rst:158
#: ../../source/screen_python.rst:233
msgid "This method must be overridden, as the default method will raise NotImplemented (and hence cause Ren'Py to report an error)."
msgstr ""

#: ../../source/screen_python.rst:164
msgid "This is called to determine if the button with this action should be sensitive. It should return true if the button is sensitive."
msgstr ""

#: ../../source/screen_python.rst:168
msgid "Note that __call__ can be called, even if this returns False."
msgstr ""

#: ../../source/screen_python.rst:170
msgid "The default implementation returns True."
msgstr ""

#: ../../source/screen_python.rst:174
msgid "This should return true if the button should be rendered as a selected button, and false otherwise."
msgstr ""

#: ../../source/screen_python.rst:177
msgid "The default implemention returns False."
msgstr ""

#: ../../source/screen_python.rst:181
#: ../../source/screen_python.rst:248
msgid "This gets a default tooltip for this button, if a specific tooltip is not assigned. It should return the tooltip value, or None if a tooltip is not known."
msgstr ""

#: ../../source/screen_python.rst:185
#: ../../source/screen_python.rst:252
msgid "This defaults to returning None."
msgstr ""

#: ../../source/screen_python.rst:189
msgid "This method is called once at the start of each interaction, and then is called periodically thereafter. If it returns a number, it will be called before that many seconds elapse, but it might be called sooner."
msgstr ""

#: ../../source/screen_python.rst:194
msgid "The main use of this is to call :func:`renpy.restart_interaction` if the value of get_selected or get_sensitive should change."
msgstr ""

#: ../../source/screen_python.rst:198
msgid "It takes one argument:"
msgstr ""

#: ../../source/screen_python.rst:201
msgid "`st`"
msgstr ""

#: ../../source/screen_python.rst:201
msgid "The number of seconds since the screen or displayable this action is associated with was first shown."
msgstr ""

#: ../../source/screen_python.rst:206
msgid "When the action is used as the `hovered` parameter to a button (or similar object), this method is called when the object loses focus."
msgstr ""

#: ../../source/screen_python.rst:209
msgid "To run an action from Python, use :func:`renpy.run`."
msgstr ""

#: ../../source/inc/run:5
msgid "Returns true if `action` indicates it is selected, or false otherwise."
msgstr ""

#: ../../source/inc/run:9
msgid "Returns true if `action` indicates it is sensitive, or False otherwise."
msgstr ""

#: ../../source/inc/run:13
msgid "Run an action or list of actions. A single action is called with no arguments, a list of actions is run in order using this function, and None is ignored."
msgstr ""

#: ../../source/inc/run:17
msgid "Returns the result of the first action to return a value."
msgstr ""

#: ../../source/screen_python.rst:214
msgid "BarValues"
msgstr ""

#: ../../source/screen_python.rst:216
msgid "When creating a bar, vbar, or hotbar, a BarValue object can be supplied as the `value` property. Methods on the BarValue object are called to get the adjustment and styles."
msgstr ""

#: ../../source/screen_python.rst:223
msgid "To define a new BarValue, inherit from this class and override some of the methods."
msgstr ""

#: ../../source/screen_python.rst:228
msgid "This method is called to get an adjustment object for the bar. It should create the adjustment with :func:`ui.adjustment`, and then return the object created this way."
msgstr ""

#: ../../source/screen_python.rst:239
msgid "This is used to determine the style of bars that use this value. It should return a tuple of two style names or style objects. The first is used for a bar, and the second for vbar."
msgstr ""

#: ../../source/screen_python.rst:244
msgid "This defaults to (\"bar\", \"vbar\")."
msgstr ""

#: ../../source/screen_python.rst:256
msgid "This is called when a BarValue replaces another BarValue, such as when a screen is updated. It can be used to update this BarValue from the other. It is called before get_adjustment."
msgstr ""

#: ../../source/screen_python.rst:260
msgid "Note that `other` is not necessarily the same type as `self`."
msgstr ""

#: ../../source/screen_python.rst:264
msgid "This method is called once at the start of each interaction. If it returns a number of seconds, it will be called before that many seconds elapse, but it might be called sooner. It is called after get_adjustment."
msgstr ""

#: ../../source/screen_python.rst:269
msgid "It can be used to update the value of the bar over time, like :func:`AnimatedValue` does. To do this, get_adjustment should store the adjustment, and periodic should call the adjustment's changed method."
msgstr ""

#: ../../source/screen_python.rst:275
msgid "InputValue"
msgstr ""

#: ../../source/screen_python.rst:277
msgid "When creating an input, an InputValue object can be supplied as the `value` property. Methods on the InputValue object are called to get and set the text, determine if the input is editable, and handle the enter key being pressed."
msgstr ""

#: ../../source/screen_python.rst:284
msgid "To define a new InputValue, inherit from this class, override some or all of the methods, and set the value of the default field."
msgstr ""

#: ../../source/screen_python.rst:294
msgid "If true, the input is eligible to be editable by default. (That is, it may be given the caret when the screen is shown.)"
msgstr ""

#: ../../source/screen_python.rst:299
msgid "Returns the default text of the input. This must be implemented."
msgstr ""

#: ../../source/screen_python.rst:303
msgid "Called when the text of the input is changed, with the new text. This must be implemented."
msgstr ""

#: ../../source/screen_python.rst:308
msgid "Called when the user presses enter. If this returns a non-None value, that value is returned from the interacton. This may also raise renpy.IgnoreEvent() to ignore the press. Otherwise, the enter-press is propagated to other displayables."
msgstr ""

#: ../../source/screen_python.rst:313
msgid "The following actions are available as methods on InputValue:"
msgstr ""

#: ../../source/screen_python.rst:317
msgid "Returns an action that enables text editing on the input."
msgstr ""

#: ../../source/screen_python.rst:321
msgid "Returns an action that disables text editing on the input."
msgstr ""

#: ../../source/screen_python.rst:325
msgid "Returns an action that toggles text editing on the input."
msgstr ""

#: ../../source/screen_python.rst:331
msgid "Creator-Defined Screen Language Statements"
msgstr ""

#: ../../source/screen_python.rst:333
msgid "Ren'Py supports defining custom screen language statements. Creator-defined screen language statements are wrappers for the screen language :ref:`use statement <sl-use>`. Positional arguments remain positional arguments, properties become keyword arguments, and if the statement takes a block, so does the use statement. For example, the custom screen language statement::"
msgstr ""

#: ../../source/screen_python.rst:344
msgid "becomes::"
msgstr ""

#: ../../source/screen_python.rst:349
msgid "Creator-defined screen language statements must be registered in a ``python early`` block. What's more, the filename containing the creator-defined statement must be be loaded earlier than any file that uses it. Since Ren'Py loads files in Unicode sort order, it generally makes sense to prefix the name of any file registering a user-defined statement with 01, or some other small number."
msgstr ""

#: ../../source/screen_python.rst:355
msgid "Creator-defined screen language statements are registered with the renpy.register_sl_statement function:"
msgstr ""

#: ../../source/inc/custom_sl:5
msgid "Registers a screen language statement that creates a displayable."
msgstr ""

#: ../../source/inc/custom_sl:9
#: ../../source/inc/custom_sl:100
msgid "`name`"
msgstr ""

#: ../../source/inc/custom_sl:8
msgid "The name of the screen language statement, a string containing a Ren'Py keyword. This keyword is used to introduce the new statement."
msgstr ""

#: ../../source/inc/custom_sl:20
msgid "`displayable`"
msgstr ""

#: ../../source/inc/custom_sl:12
msgid "This is a function that, when called, returns a displayable object. All position arguments, properties, and style properties are passed as arguments to this function. Other keyword arguments are also given to this function, a described below."
msgstr ""

#: ../../source/inc/custom_sl:17
msgid "This must return a Displayable. If it returns multiple displayables, the _main attribute of the outermost displayable should be set to the \"main\" displayable - the one that children should be added to."
msgstr ""

#: ../../source/inc/custom_sl:26
msgid "`style`"
msgstr ""

#: ../../source/inc/custom_sl:23
msgid "The base name of the style of this displayable. If the style property is not given, this will have the style prefix added to it. The computed style is passed to the `displayable` function as the ``style`` keyword argument."
msgstr ""

#: ../../source/inc/custom_sl:38
msgid "`nchildren`"
msgstr ""

#: ../../source/inc/custom_sl:29
msgid "The number of children of this displayable. One of:"
msgstr ""

#: ../../source/inc/custom_sl:31
msgid "0"
msgstr ""

#: ../../source/inc/custom_sl:32
msgid "The displayable takes no children."
msgstr ""

#: ../../source/inc/custom_sl:34
msgid "1"
msgstr ""

#: ../../source/inc/custom_sl:34
msgid "The displayable takes 1 child. If more than one child is given, the children are placed in a Fixed."
msgstr ""

#: ../../source/inc/custom_sl:38
msgid "\"many\""
msgstr ""

#: ../../source/inc/custom_sl:37
msgid "The displayable takes more than one child."
msgstr ""

#: ../../source/inc/custom_sl:40
msgid "The following arguments should be passed in using keyword arguments:"
msgstr ""

#: ../../source/inc/custom_sl:44
msgid "`replaces`"
msgstr ""

#: ../../source/inc/custom_sl:43
msgid "If true, and the displayable replaces a prior displayable, that displayable is passed as a parameter to the new displayable."
msgstr ""

#: ../../source/inc/custom_sl:47
msgid "`default_keywords`"
msgstr ""

#: ../../source/inc/custom_sl:47
msgid "The default set of keyword arguments to supply to the displayable."
msgstr ""

#: ../../source/inc/custom_sl:50
msgid "`default_properties`"
msgstr ""

#: ../../source/inc/custom_sl:50
msgid "If true, the ui and position properties are added by default."
msgstr ""

#: ../../source/inc/custom_sl:52
msgid "Returns an object that can have positional arguments and properties added to it by calling the following methods. Each of these methods returns the object it is called on, allowing methods to be chained together."
msgstr ""

#: ../../source/inc/custom_sl:59
msgid "Adds a positional argument with `name`"
msgstr ""

#: ../../source/inc/custom_sl:63
msgid "Adds a property with `name`. Properties are passed as keyword arguments."
msgstr ""

#: ../../source/inc/custom_sl:68
msgid "Adds a family of properties, ending with `name` and prefixed with the various style property prefixes. For example, if called with (\"size\"), this will define size, idle_size, hover_size, etc."
msgstr ""

#: ../../source/inc/custom_sl:74
msgid "Adds a family of properties with names consisting of `prefix`, a style property prefix, and `name`. For example, if called with a prefix of `text_` and a name of `size`, this will create text_size, text_idle_size, text_hover_size, etc."
msgstr ""

#: ../../source/inc/custom_sl:81
msgid "Adds a group of properties, prefixed with `prefix`. `Group` may be one of the strings:"
msgstr ""

#: ../../source/inc/custom_sl:84
msgid "\"bar\""
msgstr ""

#: ../../source/inc/custom_sl:85
msgid "\"box\""
msgstr ""

#: ../../source/inc/custom_sl:86
msgid "\"button\""
msgstr ""

#: ../../source/inc/custom_sl:87
msgid "\"position\""
msgstr ""

#: ../../source/inc/custom_sl:88
msgid "\"text\""
msgstr ""

#: ../../source/inc/custom_sl:89
msgid "\"window\""
msgstr ""

#: ../../source/inc/custom_sl:91
msgid "These correspond to groups of :ref:`style-properties`. Group can also be \"ui\", in which case it adds the :ref:`common ui properties <common-properties>`."
msgstr ""

#: ../../source/inc/custom_sl:96
msgid "Registers a custom screen language statement with Ren'Py."
msgstr ""

#: ../../source/inc/custom_sl:99
msgid "This must be a word. It's the name of the custom screen language statement."
msgstr ""

#: ../../source/inc/custom_sl:103
msgid "`positional`"
msgstr ""

#: ../../source/inc/custom_sl:103
msgid "The number of positional parameters this statement takes."
msgstr ""

#: ../../source/inc/custom_sl:107
msgid "`children`"
msgstr ""

#: ../../source/inc/custom_sl:106
msgid "The number of children this custom statement takes. This should be 0, 1, or \"many\", which means zero or more."
msgstr ""

#: ../../source/inc/custom_sl:110
msgid "`screen`"
msgstr ""

#: ../../source/inc/custom_sl:110
msgid "The screen to use. If not given, defaults to `name`."
msgstr ""

#: ../../source/inc/custom_sl:112
msgid "Returns an object that can have positional arguments and properties added to it. This object has the same .add_ methods as the objects returned by :class:`renpy.register_sl_displayable`."
msgstr ""

#: ../../source/screen_python.rst:360
msgid "As an example of a creator-defined screen language statement, here's an implementation of the ``titledwindow`` statement given above. First, the statement must be registered in a ``python early`` block in a file that is loaded early – a name like 01custom.rpy will often load soon enough. The registration call looks like::"
msgstr ""

#: ../../source/screen_python.rst:370
msgid "Then, we define a screen that implements the custom statement. This screen can be defined in any file. One such screen is::"
msgstr ""

