# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2022, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-20 00:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/lifecycle.rst:6
msgid "Lifecycle of a Ren'Py game"
msgstr ""

#: ../../source/lifecycle.rst:8
msgid "When launching a Ren'Py game, be it from the executable or from the launcher, it follows a series of steps up until the point where it is closed. This page exposes the various phases of this lifecycle, and various related statements."
msgstr ""

#: ../../source/lifecycle.rst:13
msgid "Boot Time"
msgstr ""

#: ../../source/lifecycle.rst:15
msgid "There are a lot of things happening before the game window appears. This is the boot time. The only thing that's possibly visible at that point is the :ref:`presplash <presplash>`."
msgstr ""

#: ../../source/lifecycle.rst:21
msgid "Script Parsing Phase"
msgstr ""

#: ../../source/lifecycle.rst:23
msgid "To read the games's code, Ren'Py reads each of the game's ``.rpy`` (and ``_ren.py``) files one by one, in the unicode order of their filepaths. That's the \"parsing\" phase, or \"early\" phase."
msgstr ""

#: ../../source/lifecycle.rst:26
msgid "The first creator-written code being executed is what's written in ``python early`` blocks. These are executed after the file they're in has been read and parsed, but before the next file gets read. This is why statements which modify how parsing works, like :doc:`cds`, :ref:`creator-defined-sl` or new custom :ref:`warpers`, must be written in ``python early`` blocks."
msgstr ""

#: ../../source/lifecycle.rst:32
msgid "The ``init python early`` syntax is sometimes encountered, but it's redundant and doesn't change anything in how the code gets executed."
msgstr ""

#: ../../source/lifecycle.rst:38
msgid "Init Phase"
msgstr ""

#: ../../source/lifecycle.rst:40
msgid "After parsing/early phase, the \"init\" phase starts. Several statements are executed at that time, including the :ref:`init-python-statement`, the :ref:`define-statement`, the :ref:`transform-statement`, the :ref:`image-statement`, the :ref:`screen-statement`, and the :doc:`style <style>` statement. The init phase is divided in successive epochs, or init priorities, from -999 to 999. Contrary to what the term may imply, epochs of lower priority are executed before epochs of higher priority."
msgstr ""

#: ../../source/lifecycle.rst:49
msgid "By default, these statements are executed at init offset 0. However, they can be offset using the :ref:`init-offset-statement` or by other means. The :ref:`image-statement` is an exception to both of these rules, as it executes at an init priority of 500 by default, and the init offset statement adds or substracts from this 500, rather than replacing it."
msgstr ""

#: ../../source/lifecycle.rst:54
msgid "Automatic image definition from the :ref:`image-directory` occurs at init priority 0."
msgstr ""

#: ../../source/lifecycle.rst:56
msgid "Note that while the :ref:`default <default-statement>` statements are not executed at init time, the priority of the statements influences the order in which they will be executed, relative to one another."
msgstr ""

#: ../../source/lifecycle.rst:63
msgid "Init Offset Statement"
msgstr ""

#: ../../source/lifecycle.rst:65
msgid "The ``init offset`` statement sets a priority offset for all statements that run at init time. It should be placed at the top of the file, and it applies to all following statements in the current block and child blocks, up to the next init priority statement. The statement::"
msgstr ""

#: ../../source/lifecycle.rst:72
msgid "sets the priority offset to 42. In::"
msgstr ""

#: ../../source/lifecycle.rst:82
msgid "The first define statement is run at priority 2, which means it runs after the second define statement, and hence ``foo`` winds up with a value of 2."
msgstr ""

#: ../../source/lifecycle.rst:87
msgid "Script Execution"
msgstr ""

#: ../../source/lifecycle.rst:89
msgid "This is what happens once the game window becomes visible. This is when normal Ren'Py statements execute, and when the rules described in :doc:`label` apply. This is also the time when the variables from :ref:`default statements <default-statement>` are set for the first time - as opposed to :ref:`define statements <define-statement>` which are set at init time."
msgstr ""

#: ../../source/lifecycle.rst:94
msgid "Config variables should not be changed once normal game execution starts."
msgstr ""

#: ../../source/lifecycle.rst:97
msgid "Splashscreen"
msgstr ""

#: ../../source/lifecycle.rst:99
msgid "If it exists, the :ref:`splashscreen <adding-a-splashscreen>` label is executed until it returns."
msgstr ""

#: ../../source/lifecycle.rst:101
msgid "A splashscreen is only displayed once per time Ren'Py is run, and is skipped when script execution restarts."
msgstr ""

#: ../../source/lifecycle.rst:105
msgid "Main Menu"
msgstr ""

#: ../../source/lifecycle.rst:107
msgid "If it exists, the ``before_main_menu`` label is executed. Then, once it returns, the :ref:`main_menu <main-menu-screen>` screen is shown, unless a ``main_menu`` label exists, in which case it is executed instead. See :ref:`special-labels` for more information."
msgstr ""

#: ../../source/lifecycle.rst:111
msgid "The main menu itself is run in it's own :ref:`context <context>`.  Ren'Py can leave this context by calling the :class:`Start` action, which also jumps to a label, or the ``start`` label if none is specified. Returning from the ``main_menu`` label also enters the in-game phase at the ``start`` label, while loading a game enters the in-game phase at the spot where the game was saved."
msgstr ""

#: ../../source/lifecycle.rst:117
msgid "In-Game Phase"
msgstr ""

#: ../../source/lifecycle.rst:119
msgid "This is the phase in which an actual playthrough of the game occurs, and this is the mode in which players generally spend most of their time. This phase continues until the game quits, or the game restarts and the player returns to the main menu."
msgstr ""

#: ../../source/lifecycle.rst:123
msgid "During the in-game phase, the :class:`ShowMenu` action can be used to display a screen in a new context."
msgstr ""

#: ../../source/lifecycle.rst:126
msgid "The In-game phase continues until either the player quits or restarts the game to return to the main menu. The game may be restarted by returning when no call is on the stack, as explained explained in :doc:`label`. The game may also be restarted by the :class:`MainMenu` action or the :func:`renpy.full_restart` function."
msgstr ""

#: ../../source/lifecycle.rst:132
msgid "When the game restarts, all non-persistent data is reset to what it was at the end of the script execution phase, and then the script execution phase begins again, skipping the splashscreen."
msgstr ""

