# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2022, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-11 10:11+0900\n"
"PO-Revision-Date: 2025-02-18 20:29+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/lifecycle.rst:3
msgid "Lifecycle of a Ren'Py game"
msgstr "Ren'Py ゲームのライフサイクル"

#: ../../source/lifecycle.rst:5
msgid ""
"When launching a Ren'Py game, be it from the executable or from the "
"launcher, it follows a series of steps up until the point where it is "
"closed. This page exposes the various phases of this lifecycle, and various "
"related statements."
msgstr ""
"Ren'Py のゲームを起動するとき、それが実行ファイルからであれランチャーからであ"
"れ、閉じるまで一連のステップをたどります。このページでは、このライフサイクル"
"のさまざまなフェーズと、それに関連するさまざまなステートメントを公開します。"

#: ../../source/lifecycle.rst:10
msgid "Boot Time"
msgstr "ブートタイム"

#: ../../source/lifecycle.rst:12
msgid ""
"There are a lot of things happening before the game window appears. This is "
"the boot time. The only thing that's possibly visible at that point is the :"
"ref:`presplash <presplash>`."
msgstr ""
"ゲームウィンドウが表示されるまでに、さまざまなことが起こっています。これが"
"ブートタイムです。この時点で見える可能性があるのは、 :ref:`presplash "
"<presplash>` だけです。"

#: ../../source/lifecycle.rst:18
msgid "Script Parsing Phase"
msgstr "スクリプト解析フェーズ"

#: ../../source/lifecycle.rst:20
msgid ""
"To read the game's code, Ren'Py reads each of the game's ``.rpy`` (and "
"``_ren.py``) files one by one. That's the \"parsing\" phase, or \"early\" "
"phase. The order that files are read in is:"
msgstr ""
"ゲームのコードを読むために、 Ren'Py はゲームの ``.rpy`` (と ``_ren.py``) ファ"
"イルを一つずつ読み込みます。これが \"解析\"フェーズ、または \"初期 \"フェーズ"
"です。ファイルの読み込み順は次の通りです。 :"

#: ../../source/lifecycle.rst:23
msgid ""
"Files inside :file`renpy/common` are loaded using  using the full path, in "
"unicode order."
msgstr ""
":file`renpy/common` 内部のファイルはユニコード順にフルパスを使用して読み込ま"
"れます。"

#: ../../source/lifecycle.rst:25
msgid ""
"Only if :file:`game/libs/libs.txt` exists, files in game/libs are loaded "
"using the filename only, in unicode order. (In this order, :file:`game/libs/"
"plants/aloe.rpy` will load before :file:`game/libs/animals/zebra.rpy`.)"
msgstr ""
":file:`game/libs/libs.txt` がある場合のみ、 game/libs 内のファイルはそのファ"
"イル名のみユニコード順に読み込まれます (この順番では、 :file:`game/libs/"
"plants/aloe.rpy` は :file:`game/libs/animals/zebra.rpy` の前に読み込まれま"
"す)。"

#: ../../source/lifecycle.rst:28
msgid ""
"Files in :file:`game` are loaded using the full path, in unicode order. (In "
"this order, :file:`game/animals/zebra.rpy` will load before :file:`game/"
"plants/aloe.rpy`.)"
msgstr ""
":file:`game` のファイルはユニコード順に完全パスで読み込まれます (この順序で"
"は :file:`game/animals/zebra.rpy` は :file:`game/plants/aloe.rpy` の前に読み"
"込まれます)。"

#: ../../source/lifecycle.rst:31
msgid ""
"Only if :file:`game/mods/mods.txt` exists, files in game/mods are loaded "
"using the filename only, in unicode order. (In this order, :file:`game/mods/"
"plants/aloe.rpy` will load before :file:`game/mods/animals/zebra.rpy`.)"
msgstr ""
":file:`game/mods/mods.txt` がある場合のみ、 game/mods 内のファイルはそのファ"
"イル名のみがユニコード順で読み込まれます(この順番では :file:`game/mods/"
"plants/aloe.rpy` は :file:`game/mods/animals/zebra.rpy` の前に読み込まれま"
"す)。"

#: ../../source/lifecycle.rst:34
msgid "The precise order of file loading mostly affects :doc:`cds`."
msgstr "ファイル読み込みの正確な順序は主に :doc:`cds` に影響します。"

#: ../../source/lifecycle.rst:36
msgid ""
"The first creator-written code being executed is what's written in ``python "
"early`` blocks. These are executed after the file they're in has been read "
"and parsed, but before the next file gets read. This is why statements which "
"modify how parsing works, like :doc:`cds`, :ref:`creator-defined-sl` or new "
"custom :ref:`warpers`, must be written in ``python early`` blocks."
msgstr ""
"最初に実行されるクリエイターが書いたコードは、 ``python early`` ブロックに書"
"かれたものです。これらのブロックは、そのファイルが読み込まれてパースされた"
"後、次のファイルが読み込まれる前に実行されます。このため、 :doc:`cds` や :"
"ref:`creator-defined-sl` 、新しいカスタムの :ref:`warpers` など、解析の方法を"
"変更するようなステートメントは ``python early`` ブロックで記述しなければなら"
"ないのです。"

#: ../../source/lifecycle.rst:42
msgid ""
"The ``init python early`` syntax is sometimes encountered, but it's "
"redundant and doesn't change anything in how the code gets executed compared "
"to ``python early``."
msgstr ""
"``init python early`` という構文に出会うことがありますが、これは冗長で、 "
"``python early`` に対してコードがどのように実行されるかは何も変わりません。"

#: ../../source/lifecycle.rst:48
msgid "Init Phase"
msgstr "初期化フェーズ"

#: ../../source/lifecycle.rst:50
msgid ""
"After parsing/early phase, the \"init\" phase starts. Several statements are "
"executed at that time, including the :ref:`init-python-statement`, the :ref:"
"`define-statement`, the :ref:`transform-statement`, the :ref:`image-"
"statement`, the :ref:`screen-statement`, and the :doc:`style <style>` "
"statement."
msgstr ""
"解析/初期フェーズの後、\"初期化\" フェーズが開始されます。このとき、 :ref:"
"`init-python-statement` や :ref:`define-statement` , :ref:`transform-"
"statement` , :ref:`image-statement`, :ref:`screen-statement`, :doc:`style "
"<style>` ステートメントなどのいくつかのステートメントが実行されます。"

#: ../../source/lifecycle.rst:55
msgid ""
"The init phase is divided in successive epochs, or init priorities. Contrary "
"to what the term may imply, epochs of lower priority are executed before "
"epochs of higher priority. It is suggested that games use init priorities of "
"-99 to 99. Libraries and mods can use from -999 to -100 and 100 to 999. Init "
"priorities outside of the range -999 to 999 are reserved for Ren'Py's "
"internal use."
msgstr ""
"初期化フェーズは -999 から 999 までの連続したエポック、つまり初期化の優先順位"
"に分割されます。この用語が意味するところとは逆に、低い優先順位のエポックが高"
"い優先順位のエポックより先に実行されます。ゲームでは -99 から 99 までの優先度"
"の使用を勧めます。 ライブラリーと mod では -999 から -100, 100 から 999 の使"
"用を勧めます。-999 から 999 外の優先度は Ren'Py 内部で予約されています。"

#: ../../source/lifecycle.rst:63
msgid ""
"By default, these statements are executed at init offset 0. However, they "
"can be offset using the :ref:`init-offset-statement` or by other means. The :"
"ref:`image-statement` is an exception to both of these rules, as it executes "
"at an init priority of 500 by default, and the init offset statement adds or "
"substracts from this 500, rather than replacing it."
msgstr ""
"デフォルトでは、これらのステートメントは init offset 0 で実行されます。 しか"
"し、 :ref:`init-offset-statement` や他の方法でオフセットできます。 :ref:"
"`image-statement` はこれらのルールの例外で、デフォルトでは init 優先度 500 で"
"実行され、 init offset ステートメントはこの 500 を置き換えるのではなく、追加"
"したり減算したりします。"

#: ../../source/lifecycle.rst:68
msgid ""
"Automatic image definition from the :ref:`image-directory` occurs at init "
"priority 0."
msgstr ":ref:`image-directory` からの自動画像定義は優先度0で行われます。"

#: ../../source/lifecycle.rst:70
msgid ""
"Note that while the :ref:`default <default-statement>` statements are not "
"executed at init time, the priority of the statements influences the order "
"in which they will be executed, relative to one another."
msgstr ""
":ref:`default <default-statement>` ステートメントは初期化時には実行されません"
"が、ステートメントの優先順位は、それらが実行される順序に影響を与えることに注"
"意してください。"

#: ../../source/lifecycle.rst:77
msgid "Init Offset Statement"
msgstr "init offset ステートメント"

#: ../../source/lifecycle.rst:79
msgid ""
"The ``init offset`` statement sets a priority offset for all statements that "
"run at init time. It should be placed at the top of the file, and it applies "
"to all following statements in the current block and child blocks, up to the "
"next init priority statement. The statement::"
msgstr ""
"``init offset`` ステートメントは、初期化時に実行されるすべてのステートメント"
"に優先順位のオフセットを設定します。これはファイルの先頭に置かれるべきもの"
"で、現在のブロックと子ブロックにある、次の init priority ステートメントに続く"
"すべてのステートメントに適用されます。 ::"

#: ../../source/lifecycle.rst:86
msgid "sets the priority offset to 42. In::"
msgstr "このコードでは優先度のオフセットを 42 に設定しています。 ::"

#: ../../source/lifecycle.rst:96
msgid ""
"The first define statement is run at priority 2, which means it runs after "
"the second define statement, and hence ``foo`` winds up with a value of 2."
msgstr ""
"最初の deffine ステートメントは優先度 2 で実行されるので 二つ目の define ス"
"テートメントの後に実行されます。 ``foo`` は 2 の値になります。"

#: ../../source/lifecycle.rst:101
msgid "Script Execution"
msgstr "スクリプトの実行"

#: ../../source/lifecycle.rst:103
msgid ""
"This is what happens once the game window becomes visible. This is when "
"normal Ren'Py statements execute, and when the rules described in :doc:"
"`label` apply. This is also the time when the variables from :ref:`default "
"statements <default-statement>` are set for the first time - as opposed to :"
"ref:`define statements <define-statement>` which are set at init time."
msgstr ""
"これは、ゲームウィンドウが表示されるようになると起こることです。通常は "
"Ren'Py のステートメントが実行されるときであり、 :doc:`label` で説明されている"
"ルールが適用されます。 :ref:`define statements <define-statement>` からの変数"
"が初期化時に設定されるのとは対照的に、 :ref:`default ステートメント <default-"
"statement>` からの変数が最初に設定されるときでもあります。"

#: ../../source/lifecycle.rst:108
msgid ""
"Config variables should not be changed once normal game execution starts."
msgstr "通常のゲーム実行開始後は、設定変数を変更しないでください。"

#: ../../source/lifecycle.rst:111
msgid "Splashscreen"
msgstr "スプラッシュスクリーン"

#: ../../source/lifecycle.rst:113
msgid ""
"If it exists, the :ref:`splashscreen <adding-a-splashscreen>` label is "
"executed until it returns."
msgstr ""
"あれば :ref:`splashscreen <adding-a-splashscreen>` ラベルが処理が返るまで実行"
"されます。"

#: ../../source/lifecycle.rst:115
msgid ""
"A splashscreen is only displayed once per time Ren'Py is run, and is skipped "
"when script execution restarts."
msgstr ""
"スプラッシュスクリーンは Ren'Py が実行されるたびに一度だけ表示され、スクリプ"
"トの実行が再開されたときにはスキップされます。"

#: ../../source/lifecycle.rst:119
msgid "Main Menu"
msgstr "メインメニュー"

#: ../../source/lifecycle.rst:121
msgid ""
"If it exists, the ``before_main_menu`` label is executed. Then, once it "
"returns, the :ref:`main_menu <main-menu-screen>` screen is shown, unless a "
"``main_menu`` label exists, in which case it is executed instead. See :ref:"
"`special-labels` for more information."
msgstr ""
"あれば ``before_main_menu`` ラベルが実行されます。その後処理が返ると、 "
"``main_menu`` ラベルがあればそれが実行され、なければ :ref:`main_menu <main-"
"menu-screen>` スクリーンが表示されます。詳細は :ref:`special-labels` を参照し"
"てください。"

#: ../../source/lifecycle.rst:125
msgid ""
"The main menu itself is run in its own :ref:`context <context>`. Ren'Py can "
"leave this context by calling the :class:`Start` action, which also jumps to "
"a label or to the ``start`` label if none is specified. Returning from the "
"``main_menu`` label also enters the in-game phase at the ``start`` label, "
"while loading a game enters the in-game phase at the spot where the game was "
"saved."
msgstr ""
"メインメニュー自体は、 :ref:`context <context>` の中で実行されます。 Ren'Py "
"は :class:`Start` アクションを呼び出してこのコンテキストを抜けだせ、このアク"
"ションはラベル、もしくは何も指定されていない場合は ``start`` ラベルにジャンプ"
"します。 ``main_menu`` ラベルから処理を返しても、 ``start`` ラベルからゲーム"
"フェーズに入り、一方ゲームをロードすると、ゲームが保存された場所からゲーム"
"フェーズに入ります。"

#: ../../source/lifecycle.rst:131
msgid "In-Game Phase"
msgstr "ゲームフェーズ"

#: ../../source/lifecycle.rst:133
msgid ""
"This is the phase in which an actual playthrough of the game occurs, and "
"this is the mode in which players generally spend most of their time. This "
"phase continues until the game quits, or the game restarts and the player "
"returns to the main menu."
msgstr ""
"ゲームを実際にプレイするフェーズであり、一般的にプレイヤーが最も多くの時間を"
"費やすモードです。これはゲームが終了するか、ゲームが再開し、メインメニューに"
"戻るまで続きます。"

#: ../../source/lifecycle.rst:137
msgid ""
"During the in-game phase, the :class:`ShowMenu` action can be used to "
"display a screen in a new context."
msgstr ""
"ゲームフェーズの間、 :class:`ShowMenu` アクションを使用して、新しいコンテキス"
"トでスクリーンを表示できます。"

#: ../../source/lifecycle.rst:140
msgid ""
"The In-game phase continues until either the player quits or restarts the "
"game to return to the main menu. The game may be restarted by returning when "
"no call is on the stack, as explained explained in :doc:`label`. The game "
"may also be restarted by the :class:`MainMenu` action or the :func:`renpy."
"full_restart` function."
msgstr ""
"ゲームフェーズは、プレイヤーがゲームを終了するか、ゲームを再開してメインメ"
"ニューに戻るまで継続します。ゲームは :doc:`label` で説明したように、スタック"
"上にコールがないときに処理を返して再開できます。また、 :class:`MainMenu` アク"
"ションや :func:`renpy.full_restart` 関数によってもゲームを再開できることがあ"
"ります。"

#: ../../source/lifecycle.rst:146
msgid ""
"When the game restarts, all non-persistent data is reset to what it was at "
"the end of the script execution phase, and then the script execution phase "
"begins again, skipping the splashscreen."
msgstr ""
"ゲームが再開すると、すべての非永続的データはリセットされ、スクリプトの実行"
"フェーズの終わりの状態に戻り、スクリプトの実行フェーズがスプラッシュスクリー"
"ンをスキップして再び始まります。"
