# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-07 09:10+0900\n"
"PO-Revision-Date: 2023-09-09 10:32+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2015-03-29 05:43+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/label.rst:4
msgid "Labels & Control Flow"
msgstr "ラベルと制御フロー"

#: ../../source/label.rst:9
msgid "Label Statement"
msgstr "label ステートメント"

#: ../../source/label.rst:11
msgid ""
"Label statements allow the given name to be assigned to a program point. "
"They exist solely to be called or jumped to, either from Ren'Py script, "
"Python functions, or from screens. ::"
msgstr ""
"label ステートメントは指定された名前にプログラム的な位置を代入します。それら"
"は単に Ren'Py スクリプトや python 関数、スクリーンから呼び出されたり、ジャン"
"プされたりするために存在します。 ::"

#: ../../source/label.rst:22
msgid ""
"A label statement may have a block associated with it. In that case, control "
"enters the block whenever the label statement is reached, and proceeds with "
"the statement after the label statement whenever the end of the block is "
"reached."
msgstr ""
"label ステートメントはそれに関連づけられたブロックを持つでしょう。その場合そ"
"の labe ステートメントに到達すると制御はそのブロックに入り、そのブロックの終"
"端に到達すると label ステートメントの次のステートメントに移ります。"

#: ../../source/label.rst:26
msgid ""
"There are two kinds of labels: *global* and *local* labels. Global labels "
"live in one global scope shared across all project files and thus should "
"have unique names per game. A local label on the other hand refer to a "
"global label, so several local labels in the game can have the same name, "
"provided they are related to different global labels. To declare a local "
"label, prefix its name with a period ``.``, and put it under a global label "
"which it will belong to. For example::"
msgstr ""
"二種類のラベル *global* と *local* があります。グローバルはプロジェクトファイ"
"ルのすべてに渡るグローバルスコープに置かれ、ゲーム毎に固有な名前を持つべきで"
"す。一方ローカルラベルはグローバルラベルを参照するため、異なるグローバルラベ"
"ルに関連付けられていればゲーム内のいくつかのローカルラベルが同じ名前を持てま"
"す。それが宣言されたグローバルラベルのスコープ内部に論理的に配置されます。"
"local label を宣言するには接頭辞 ``.`` を名前につけて参加するグローバルラベル"
"の下に置いてください。例 ::"

#: ../../source/label.rst:43
msgid ""
"Local labels can be referenced directly inside the same global label they "
"are declared in, or by their full name, consisting of global and local name "
"parts::"
msgstr ""
"ローカルラベルはそれが宣言されたのと同じグローバルラベル内なら直接に、そうで"
"なければグローバルとローカルネームからなるフルネームで参照出来ます。 : ::"

#: ../../source/label.rst:50
msgid ""
"The label statement may take an optional list of parameters. These "
"parameters are processed as described in :pep:`570`, with two exceptions:"
msgstr ""
"label ステートメントは任意でパラメーターのリストを受け取ります。これらのパラ"
"メーターは :pep:`570` で記述されたとおりに処理されますが、2つの例外がありま"
"す :"

#: ../../source/label.rst:53
msgid "The values of default parameters are evaluated at call time."
msgstr "デフォルトパラメーターの値は呼び出し時に評価されます。"

#: ../../source/label.rst:54
msgid "The variables are dynamically, rather than lexically, scoped."
msgstr "変数は静的スコープではなく、動的スコープです。"

#: ../../source/label.rst:56
msgid ""
"When a variable is dynamically scoped, its value lasts until a return "
"statement following the label. It doesn't generally make sense to have a "
"label with parameters that is reached by a jump or a previous statement. For "
"an example of labels with parameters, see the :ref:`call statement <call-"
"statement>`."
msgstr ""
"変数が動的スコープならば、その値はそのラベルに続く return ステートメントまで"
"残ります。基本的にジャンプや前のステートメントから到達するラベルのパラメー"
"ターは無効です。パラメーターつきラベルの例として、 :ref:`call statement "
"<call-statement>` を参照してください。"

#: ../../source/label.rst:66
msgid "Jump Statement"
msgstr "jump ステートメント"

#: ../../source/label.rst:68
msgid "The jump statement is used to transfer control to the given label."
msgstr "jump ステートメントを使用して指定のラベルに制御を移します。"

#: ../../source/label.rst:70
msgid ""
"If the ``expression`` keyword is present, the expression following it is "
"evaluated, and the string so computed is used as the label name of the "
"statement to jump to. If the ``expression`` keyword is not present, the "
"label name of the statement to jump to must be explicitly given."
msgstr ""
"``expression`` キーワードがあればそれに続く式が評価され、算出された文字列が"
"ジャンプ先のラベル名に使用されます。 ``expression`` キーワードがなければジャ"
"ンプ先のラベル名は明示的に指定されなければなりません。"

#: ../../source/label.rst:75 ../../source/label.rst:102
msgid ""
"A local label name can be passed, either with ``expression`` or without, and "
"either with the global label prepended (\"global_label.local_label\"), or "
"starting with a dot (\".local_label\")."
msgstr ""
"ローカルラベル名は ``expression`` と一緒に渡すか、 ``expression`` なしでグ"
"ローバルラベルの接頭辞(\"global_label.local_label\") またはドット( . )をつけ"
"て (\".local_label\") 渡せます。"

#: ../../source/label.rst:79
msgid ""
"Unlike call, jump does not push the next statement onto a stack. As a "
"result, there's no way to return to where you've jumped from. ::"
msgstr ""
"call とは異なり、jump は次のステートメントをスタックにプッシュしません。この"
"ため、ジャンプ元に戻る方法はありません。::"

#: ../../source/label.rst:91
msgid "Call Statement"
msgstr "call ステートメント"

#: ../../source/label.rst:93
msgid ""
"The call statement is used to transfer control to the given label. It also "
"pushes the next statement onto the call stack, allowing the return statement "
"to return control to the statement following the call."
msgstr ""
"call ステートメントを使用して指定のラベルに制御を移します。これは同時に次のス"
"テートメントをコールスタックにプッシュし、 return ステートメントで制御を "
"call ステートメントの次のステートメントに返せるようにします。"

#: ../../source/label.rst:97
msgid ""
"If the ``expression`` keyword is present, the expression following it is "
"evaluated, and the string so computed is used as the name of the label to "
"call. If the ``expression`` keyword is not present, the name of the "
"statement to call must be explicitly given."
msgstr ""
"``expression`` キーワードが与えられると、これに続く式が評価され、得られた文字"
"列をラベルの名前として呼び出します。``expression`` キーワードが与えられない場"
"合は、呼び出すステートメントの名前を明示的に指定する必要があります。"

#: ../../source/label.rst:106
msgid ""
"If the optional ``from`` clause is present, it has the effect of including a "
"label statement with the given name as the statement immediately following "
"the call statement. An explicit label helps to ensure that saved games with "
"return stacks can return to the proper place when loaded on a changed script."
msgstr ""
"オプションである ``from`` 節が与えられていれば、指定された名前のラベルステー"
"トメントをその call ステートメントの直後に続くステートメントとします。ラベル"
"の明示はコールスタックを保存したゲームデータがスクリプトを変更した後にロード"
"されても適切な場所に返れるようにします。"

#: ../../source/label.rst:111
msgid ""
"The call statement may take arguments, which are processed as described in :"
"pep:`448`."
msgstr ""
"call ステートメントには引数も受け取られ、それらは :pep:`448` に記述されたとお"
"りに処理されます。"

#: ../../source/label.rst:113
msgid ""
"When using a call expression with an arguments list, the ``pass`` keyword "
"must be inserted between the expression and the arguments list. Otherwise, "
"the arguments list will be parsed as part of the expression, not as part of "
"the call. ::"
msgstr ""
"引数リストつきの call expression を使用するには ``pass`` キーワードが式と引数"
"リストの間に入らなければなりません。そうでなければ引数リストは call ステート"
"メントではなく式の一部と解釈されます。 ::"

#: ../../source/label.rst:141
msgid ""
"Publishing a game without ``from`` clauses for each ``call`` statement is "
"dangerous, if you intend to publish updates of the game later on. If no such "
"clauses are added, and if you edit the file containing the ``call`` "
"instruction, there is a potential risk for saves made inside the called "
"label to become broken."
msgstr ""
"後でゲームの更新を公開するつもりならば、各 ``call`` ステートメントに対して "
"``from`` 節なしでゲームを公開するのは危険です。そのような節が追加されていない"
"と、 その``call`` を含むファイルを編集すると呼び出されたラベル内で作成された"
"セーブが壊れる可能性があります。"

#: ../../source/label.rst:147
msgid ""
"Using the \"Add from clauses to calls\" option when building a game's "
"distribution can solve that issue."
msgstr ""
"\"Add from clauses to calls\" オプションを使用して、ゲームの配布物をビルドす"
"るときにその問題を解決できます。"

#: ../../source/label.rst:153
msgid "Return Statement"
msgstr "return ステートメント"

#: ../../source/label.rst:155
msgid ""
"The ``return`` statement pops the top statement off of the call stack, and "
"transfers control to it. If the call stack is empty, the return statement "
"restarts Ren'Py, returning control to the main menu."
msgstr ""
"``return`` ステートメントはコールスタックの一番上のステートメントをポップし、"
"制御をそのステートメントに移します。コールスタックが空の場合、return ステート"
"メントは Ren'Py をリセットしてメインメニューに戻します。"

#: ../../source/label.rst:159
msgid ""
"If the optional expression is given to return, it is evaluated, and it's "
"result is stored in the ``_return`` variable. This variable is dynamically "
"scoped to each context."
msgstr ""
"任意の式が return に指定されると、それは評価され、その結果が _return 変数に保"
"存されます。この変数は各コンテキストに対して動的スコープに属します。"

#: ../../source/label.rst:166
msgid "Special Labels"
msgstr "特別なラベル"

#: ../../source/label.rst:168
msgid "The following labels are used by Ren'Py:"
msgstr "以下のラベルは Ren'Py 本体で使用されます。 :"

#: ../../source/label.rst:171
msgid "``start``"
msgstr "``start``"

#: ../../source/label.rst:171
msgid "By default, Ren'Py jumps to this label when the game starts."
msgstr "デフォルトでは Ren'Py はゲーム開始時にこのラベルにジャンプします。"

#: ../../source/label.rst:175
msgid "``quit``"
msgstr "``quit``"

#: ../../source/label.rst:174
msgid ""
"If it exists, this label is called in a new context when the user quits the "
"game."
msgstr ""
"存在すればこのラベルはユーザーがゲーム終了時に新しいコンテキストで呼び出され"
"ます。"

#: ../../source/label.rst:182
msgid "``after_load``"
msgstr "``after_load``"

#: ../../source/label.rst:178
msgid ""
"If it exists, this label is called when a game is loaded. It can be use to "
"fix data when the game is updated. If data is changed by this label, :func:"
"`renpy.block_rollback` should be called to prevent those changes from being "
"reverted inf the player rolls back past the load point."
msgstr ""
"このラベルがあれば、ゲームのロード時に呼び出されます。ゲームが更新されたとき"
"にデータを修正するために使用できます。このラベルでデータを変更するなら、 :"
"func:'renpy.block_rollback' を呼び出してプレーヤーがロードポイントを超えて"
"ロールバックしてこれらの変更が元に戻らないようにする必要があります。"

#: ../../source/label.rst:186
msgid "``splashscreen``"
msgstr "``splashscreen``"

#: ../../source/label.rst:185
msgid ""
"If it exists, this label is called when the game is first run, before "
"showing the main menu. Please see :ref:`Adding a Splashscreen <adding-a-"
"splashscreen>`."
msgstr ""
"存在すればこのラベルはゲームが起動されるたときにメインメニューより前に呼び出"
"されます。 :ref:`スプラッシュスクリーン追加 <adding-a-splashscreen>` も参照し"
"てください。"

#: ../../source/label.rst:191
msgid "``before_main_menu``"
msgstr "``before_main_menu``"

#: ../../source/label.rst:189
msgid ""
"If it exists, this label is called before the main menu. It is used in rare "
"cases to set up the main menu, for example by starting a movie playing in "
"the background."
msgstr ""
"存在すればこのラベルはメインメニューより前に呼び出されます。メインメニューを"
"用意、例えばバックグラウンドでムービーを再生するような特別な場合に使用されま"
"す。"

#: ../../source/label.rst:200
msgid "``main_menu``"
msgstr "``main_menu``"

#: ../../source/label.rst:194
msgid ""
"If it exists, this label is called instead of the main menu. If it returns, "
"Ren'Py will start the game at the ``start`` label. For example, the "
"following will immediately start the game without displaying the main "
"menu. ::"
msgstr ""
"もし存在すればこのラベルはメインメニューの代わりに呼び出されます。制御を返す"
"と Ren'Py は ``start`` ラベルからゲームを開始します。例えば以下のコードではメ"
"インメニューを表示せずに即座にゲームを開始します。 ::"

#: ../../source/label.rst:204
msgid "``after_warp``"
msgstr "``after_warp``"

#: ../../source/label.rst:203
msgid ""
"If it is existed, this label is called after a warp but before the warped-to "
"statement executes. Please see :ref:`Warping to a line <warping_to_a_line>`."
msgstr ""
"存在すればこのラベルはワープ後にワープ先のステートメントが実行される前に呼び"
"出されます。 :ref:`行ワープ <warping_to_a_line>` を参照してください。"

#: ../../source/label.rst:210
msgid "``hide_windows``"
msgstr "``hide_windows``"

#: ../../source/label.rst:207
msgid ""
"If it exists, this label is called when the player hides the windows with "
"the right mouse button or the H key. If this returns true, the hide is "
"cancelled (it's assumed the hide has occurred). Otherwise, the hide "
"continues."
msgstr ""
"存在すればこのラベルはプレイヤーが右クリックや H キーででウィンドウを非表示し"
"たときに呼び出されます。これが True を返せば、その非表示は (非表示が既に実行"
"された後) キャンセルされ、そうで無ければその非表示が続きます。"

#: ../../source/label.rst:213
msgid "Labels & Control Flow Functions"
msgstr "ラベルと制御フロー関数"

#: ../../source/inc/label:5
msgid ""
"Returns the depth of the call stack of the current context - the number of "
"calls that have run without being returned from or popped from the call "
"stack."
msgstr ""
"現在のコンテキストのコールスタックの深さ、つまり呼び出し先から返らないでいる"
"か、コールスタックからポップされた呼び出しの数を返します。"

#: ../../source/inc/label:11
msgid ""
"This can be given one or more variable names as arguments. This makes the "
"variables dynamically scoped to the current call. When the call returns, the "
"variables will be reset to the value they had when this function was called."
msgstr ""
"これには 1つ以上の変数名が引数として指定できます。これによりそれらの変数を動"
"的に現在の呼び出しに対するスコープにします。その呼び出しが返ると、変数はこの"
"関数が呼び出されたときの値にリセットされます。"

#: ../../source/inc/label:15
msgid ""
"If the variables are given as keyword arguments, the value of the argument "
"is assigned to the variable name."
msgstr ""
"変数はキーワード引数として渡され、引数の値はその変数名に代入されました。"

#: ../../source/inc/label:18
msgid "Example calls are::"
msgstr "呼び出し例 ::"

#: ../../source/inc/label:25
msgid ""
"Returns the set of all labels defined in the program, including labels "
"defined for internal use in the libraries."
msgstr ""
"ライブラリー内部で使用するために定義されたラベルを含め、プログラムで定義され"
"たすべてのラベルを返します。"

#: ../../source/inc/label:30
msgid ""
"Returns a list giving the current return stack. The return stack is a list "
"of statement names."
msgstr ""
"現在のリターンスタックのリストを返します。リターンスタックはステートメント名"
"のリストです。"

#: ../../source/inc/label:33
msgid ""
"The statement names will be strings (for labels), or opaque tuples (for non-"
"label statements)."
msgstr ""
"ステートメント名は文字列 (ラベル) か不明瞭なタプル ( ラベルのないステートメン"
"ト ) です。"

#: ../../source/inc/label:38
msgid ""
"Returns true if `name` is a valid label in the program, or false otherwise."
msgstr ""
"`name` がそのプログラム内での正しいラベルなら True を、そうでなければ False "
"を返します。"

#: ../../source/inc/label:42
msgid "`name`"
msgstr "`name`"

#: ../../source/inc/label:42
msgid ""
"Should be a string to check for the existence of a label. It can also be an "
"opaque tuple giving the name of a non-label statement."
msgstr ""
"ラベルの存在をチェックするためには文字列であるべきです。ラベルのないステート"
"メントの名前を指定する不明瞭なタプルも可能です。"

#: ../../source/inc/label:47
msgid ""
"Marks the named label as if it has been already executed on the current "
"user's system."
msgstr ""
"その名前のラベルを現在のユーザーがすでに実行しているものとしてマークします。"

#: ../../source/inc/label:52
msgid ""
"Marks the named label as if it has not been executed on the current user's "
"system yet."
msgstr ""
"その名前のラベルを現在のユーザーではまだ実行していないものとしてマークしま"
"す。"

#: ../../source/inc/label:57
msgid ""
"Pops the current call from the call stack, without returning to the "
"location. Also reverts the values of :func:`dynamic <renpy.dynamic>` "
"variables, the same way the Ren'Py return statement would."
msgstr ""
"元の場所には戻らずにコールスタックから現在の呼び出しを捨てます。Ren'Py の "
"return ステートメントと同じように、 :func:`dynamic <renpy.dynamic>` 変数の値"
"も戻します。"

#: ../../source/inc/label:61
msgid ""
"This can be used if a label that is called decides not to return to its "
"caller."
msgstr ""
"これは呼び出されたラベルからその呼び出し元に返らないときに利用出来ます。"

#: ../../source/inc/label:66
msgid ""
"Returns true if the named label has executed at least once on the current "
"user's system, and false otherwise. This can be used to unlock scene "
"galleries, for example."
msgstr ""
"その名前のラベルが現在のユーザーに一度でも実行されていると True が、そうでな"
"ければ False が返されます。これは例えばシーンギャラリーをアンロックするために"
"使用出来ます。"

#: ../../source/inc/label:72
msgid ""
"Sets the current return stack. The return stack is a list of statement names."
msgstr ""
"現在のリターンスタックを設定します。リターンスタックはステートメント名のリス"
"トです。"

#: ../../source/inc/label:75
msgid ""
"Statement names may be strings (for labels) or opaque tuples (for non-label "
"statements)."
msgstr ""
"ステートメント名は文字列 (ラベル) か不明瞭なタプル ( ラベルのないステートメン"
"ト ) です。"

#: ../../source/inc/label:78
msgid "The most common use of this is to use::"
msgstr "最も一般的な使い方は、次のように使うことです ::"

#: ../../source/inc/label:82
msgid "to clear the return stack."
msgstr "リターンスタックをクリアします。"

#: ../../source/label.rst:220
msgid "Contexts"
msgstr "コンテキスト"

#: ../../source/label.rst:222
msgid ""
"Contexts are used internally by Ren'Py to manage the changeable and saveable "
"state of the game. Contexts include:"
msgstr ""
"コンテキストは、 Ren'Py がゲームの状態の変更可能な物や保存可能な物を管理する"
"ために内部的に使用します。コンテキストには以下のものがあります :"

#: ../../source/label.rst:225
msgid "the currently running Ren'Py statement,"
msgstr "現在実行中のRen'Pyのステートメント"

#: ../../source/label.rst:226
msgid ""
"the call stack, as described above, and the names and former values of "
"dynamic variables created by :func:`renpy.dynamic`,"
msgstr ""
"上述のように、コールスタックと :func:`renpy.dynamic` によって作成された動的変"
"数の名前と以前の値を返します"

#: ../../source/label.rst:228
msgid ""
"the images currently being shown (and informations about them like their "
"attributes, the transforms applied to them and so on),"
msgstr ""
"現在表示されている画像（およびその属性や適用されている transform などの情報）"

#: ../../source/label.rst:230
msgid "the screens being shown, and the variables inside them,"
msgstr "表示されている screen とその中の変数"

#: ../../source/label.rst:231
msgid "the audio that is playing or queued."
msgstr "再生中またはキューされている音声"

#: ../../source/label.rst:233
msgid ""
"Most of the time there is only one context at play, and only one instance of "
"each of these elements exists. This changes when entering the main or game "
"game menus; everything above can be changed, and will be restored when "
"leaving the menu context. Some of these changes are automatic, like the "
"screens layer being cleared when entering a context."
msgstr ""
"ほとんどの場合、プレイ中にコンテキストは1つしかなく、これらの要素のインスタン"
"スはそれぞれ1つしか存在しません。これはメインメニューやゲームメニューに入ると"
"きに変化します。上記のすべてが変更され可能性があり、メニューコンテキストを出"
"るときに元に戻ります。これらの変化のいくつかはコンテキストに入るとスクリーン"
"レイヤーがクリアされるように自動で変更されます。"

#: ../../source/label.rst:239
msgid ""
"Ren'Py also creates new contexts as part of :ref:`replay` and when :func:"
"`hiding the interface <HideInterface>`."
msgstr ""
"Ren'Py は :ref:`replay` や :func:`hiding interface<HideInterface>` のときにも"
"新しいコンテキストを作成します。"

#: ../../source/label.rst:242
msgid ""
"The creation of :ref:`screen language <screens>` has considerably lessened "
"the need for creating contexts."
msgstr ""
"ref:`screen language <screens> `によりコンテキストを作る必要性が顕著に減りま"
"した。"

#: ../../source/label.rst:245
msgid ""
"Rollback is only enabled in the base context (meaning, when there is only "
"one context), and only the base context is saved, which is why the game menu "
"uses a context."
msgstr ""
"ロールバックは基本コンテキストでのみ有効であり（つまり、コンテキストが1つしか"
"ない場合）、基本コンテキストのみが保存されます。このためにゲームメニューでは"
"別のコンテキストを使用します。"

#: ../../source/inc/context:5
msgid ""
"This creates a new context, and then starts executing Ren'Py script from the "
"given label in that context. Rollback is disabled in the new context, and "
"saving/loading will occur in the top level context."
msgstr ""
"このコードは新しいコンテキストを作成し、新しいコンテキストでそのラベルから"
"コードを実行します。ロールバックは新しいコンテキストでは無効化され、セーブ/"
"ロードは一番上のコンテキストで行われます。"

#: ../../source/inc/context:10
msgid ""
"Use this to begin a second interaction with the user while inside an "
"interaction."
msgstr ""
"これを使用してインタラクション中に 2 つ目のインタラクションを開始します。"

#: ../../source/inc/context:15
msgid ""
"Returns an object that is unique to the current context. The object is "
"copied when entering a new context, but changes to the copy do not change "
"the original."
msgstr ""
"現在のコンテキストに対してユニークなオブジェクトを返します。新しいコンテキス"
"トに入るとそのオブジェクトはコピーされますが、コピーへの変更はオリジナルに影"
"響を与えません。"

#: ../../source/inc/context:19
msgid "The object is saved and participates in rollback."
msgstr "オブジェクトは保存され、ロールバックに参加します。"

#: ../../source/inc/context:23
msgid ""
"This can be given one or more variable names as arguments. This makes the "
"variables dynamically scoped to the current context. The variables will be "
"reset to their original value when returning to the prior context."
msgstr ""
"これには1つ以上の変数名を引数として指定できます。これは現在のコンテキストに対"
"する動的スコープの変数を作成します。前のコンテキストに戻ると変数は元の値にリ"
"セットされます。"

#: ../../source/inc/context:27
msgid "An example call is::"
msgstr "呼び出し例 ::"

#: ../../source/inc/context:33
msgid ""
"Returns the nesting level of the current context. This is 0 for the "
"outermost context (the context that is saved, loaded, and rolled-back), and "
"is non-zero in other contexts, such as menu and replay contexts."
msgstr ""
"現在のコンテキストのネストレベルを返します。これは (セーブロード、ロールバッ"
"クされる) 最も外側のコンテキストに対しては 0 で、メニューや回想のような他のコ"
"ンテキストでは 0 ではありません。"

#: ../../source/inc/context:39
msgid ""
"This function creates a new context, and invokes the given Python callable "
"(function) in that context. When the function returns or raises an "
"exception, control returns to the the original context. It's generally used "
"to call a Python function that needs to display information to the player "
"(like a confirmation prompt) from inside an event handler."
msgstr ""
"現在のコンテキストをプッシュし、指定された python 関数を新しいコンテキストで"
"実行します。その関数から戻るか例外を出力すると、新しいコンテキストを削除して"
"現在のコンテキストに戻ります。一般的に、イベントハンドラー内部から、プレイ"
"ヤーに情報を表示する必要のある python 関数を呼び出すために使用されます。"

#: ../../source/inc/context:46
msgid "Additional arguments and keyword arguments are passed to the callable."
msgstr "追加の引数とキーワード引数はその呼び出し可能オブジェクトに渡されます。"

#: ../../source/inc/context:49
msgid ""
"A context created with this function cannot execute Ren'Py script. Functions "
"that would change the flow of Ren'Py script, like :func:`renpy.jump`, are "
"handled by the outer context. If you want to call Ren'Py script rather than "
"a Python function, use :func:`renpy.call_in_new_context` instead."
msgstr ""
"この関数で作成されたコンテキストは Ren'Py スクリプトを実行できません。 :func:"
"`renpy.jump` のような Ren'Py スクリプトの流れを変える変更をする関数はコンテキ"
"スト外で扱われます。 Python 関数ではなく Ren'Py スクリプトを呼び出したいな"
"ら、 :func:`renpy.call_in_new_context` を代わりに使ってください。"

#: ../../source/inc/context:57
msgid ""
"Causes control to leave the current context, and then to be transferred in "
"the parent context to the given label."
msgstr ""
"現在のコンテキストを終了し、親のコンテキストで指定されたラベルに制御を移動し"
"ます。"

#: ../../source/inc/context:62
msgid ""
"This pops all contexts off the context stack, resetting the dynamic "
"variables as it does so. When this is done, a new context is created, the "
"current statement ends, and the game continues from the next statement. This "
"will put Ren'Py into the state it was at startup, with the exception of data "
"and the start point."
msgstr ""
"これにより、すべてのコンテキストがコンテキストスタックからポップされ、動的変"
"数がリセットされます。これが終わると、新しいコンテキストが作成され、現在のス"
"テートメントは終了し、次のステートメントからゲームが続行されます。これにより"
"データと開始位置を除いて Ren'Py は起動時の状態に戻ります。"

#: ../../source/inc/context:68
msgid ""
"This can be used to reset everything about the game - shown image, playing "
"music, etc, as if the game started from the beginning."
msgstr ""
"これにより、表示されている画像、再生中の音楽など、ゲームに関するすべてをゲー"
"ムが最初から開始したかのようにリセットできます。"

#: ../../source/inc/context:71
msgid ""
"Because of how completely this resets Ren'Py, this function immediately ends "
"the current statement."
msgstr ""
"Ren'Py を完全にリセットするため、この関数は現在のステートメントを即座に終了し"
"ます。"

#: ../../source/inc/context:74
msgid ""
"This is mainly intended for use in an after_load label, where it can bring "
"the game back to the state it was in when it started. It's then up to the "
"game to re-establish the scene, music, etc, and it can then jump to the "
"label it wants to continue at."
msgstr ""
"これは主に after_load ラベルでの使用を想定しており、ゲームを開始時の状態に戻"
"せます。その後、シーンや音楽などを再構築して続行したいラベルにジャンプできま"
"す。"

#~ msgid ""
#~ "A context maintains the state of the display (including what screens and "
#~ "images are being shown) and the audio system. Both are restored when the "
#~ "context returns."
#~ msgstr ""
#~ "コンテキストは(どのスクリーンと画像が表示されるているかを含む)その表示状態"
#~ "と音声システムを維持します。コンテキストから返ると両方が戻ります。"

#~ msgid ""
#~ "Pops the current call from the call stack, without returning to the "
#~ "location."
#~ msgstr ""
#~ "コールスタックから現在の呼び出しをポップしますが、呼び出し元には返りませ"
#~ "ん。"

#~ msgid ""
#~ "If it exists, this label is called when a game is loaded. It can be use "
#~ "to fix data when the game is updated."
#~ msgstr ""
#~ "存在すればこのラベルはゲームがロードされると呼び出されます。ゲーム更新時に"
#~ "データを修正するために使用可能です。"

#~ msgid ""
#~ "Please note that the context so created cannot execute renpy code. So "
#~ "exceptions that change the flow of renpy code (like the one created by "
#~ "renpy.jump) cause this context to terminate, and are handled by the next "
#~ "higher context."
#~ msgstr ""
#~ "作成されたコンテキストは Ren'Py コードを実行出来ないことに注意してくださ"
#~ "い。 ( renpy.jump で生成されるような ) Ren'Py コードの制御フローを変更する"
#~ "例外はこのコンテキストを停止し、さらに上位のコンテキストによって処理されま"
#~ "す。"

#~ msgid ""
#~ "If you want to execute renpy code from the function, you can call it with "
#~ "renpy.call_in_new_context."
#~ msgstr ""
#~ "関数から Ren'Py コードを実行したいなら renpy.call_in_new_contex で呼び出し"
#~ "てください。"
