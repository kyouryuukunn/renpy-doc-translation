.. Automatically generated file - do not modify.

.. function:: renpy.call_in_new_context(label, *args, **kwargs)
    
    This creates a new context, and then starts executing Ren'Py script
    from the given label in that context. Rollback is disabled in the
    new context, and saving/loading will occur in the top level
    context.
    
    Use this to begin a second interaction with the user while
    inside an interaction.

.. function:: renpy.get_all_labels()
    
    Returns the set of all labels defined in the program, including labels
    defined for internal use in the libraries.

.. function:: renpy.get_return_stack()
    
    Returns a list giving the current return stack. The return stack is a
    list of statement names.
    
    The statement names will be strings (for labels), or opaque tuples (for
    non-label statements).

.. function:: renpy.has_label(name)
    
    Returns true if `name` is a valid label the program, or false otherwise.
    
    `name`
        Should be a string to check for the existence of a label. It can
        also be an opaque tuple giving the name of a non-label statement.

.. function:: renpy.invoke_in_new_context(callable, *args, **kwargs)
    
    This function creates a new context, and invokes the given Python
    callable (function) in that context. When the function returns
    or raises an exception, control returns to the the original context.
    It's generally used to call a Python function that needs to display
    information to the player (like a confirmation prompt) from inside
    an event handler.
    
    A context maintains the state of the display (including what screens
    and images are being shown) and the audio system. Both are restored
    when the context returns.
    
    Additional arguments and keyword arguments are passed to the
    callable.
    
    A context created with this function cannot execute Ren'Py script.
    Functions that would change the flow of Ren'Py script, like
    :func:`renpy.jump`, are handled by the outer context. If you want
    to call Ren'Py script rather than a Python function, use
    :func:`renpy.call_in_new_context` instead.

.. function:: renpy.jump_out_of_context(label)
    
    Causes control to leave the current context, and then to be
    transferred in the parent context to the given label.

.. function:: renpy.seen_label(label)
    
    Returns true if the named label has executed at least once on the current user's
    system, and false otherwise. This can be used to unlock scene galleries, for
    example.

.. function:: renpy.set_return_stack(stack)
    
    Sets the current return stack. The return stack is a list of statement
    names.
    
    Statement names may be strings (for labels) or opaque tuples (for
    non-label statements).

