.. Automatically generated file - do not modify.

.. function:: Confirm(prompt, yes, no=None, confirm_selected=False)
    
    Prompts the user for confirmation of an action. If the user
    clicks yes, the yes action is performed. Otherwise, the `no`
    action is performed.
    
    `prompt`
        The prompt to display to the user.
    
    `confirm_selected`
        If true, the prompt will be displayed even if the `yes` action
        is already selected. If false (the default), the prompt
        will not be displayed if the `yes` action is selected.
    
    The sensitivity and selectedness of this action match those
    of the `yes` action.

.. function:: DisableAllInputValues()
    
    Disables all active InputValue. This will re-focus the default
    InputValue, if there is one. Otherwise, no InputValue will be
    focused.

.. function:: Function(callable, *args, **kwargs)
    
    This Action calls `callable` with `args` and `kwargs`.
    
    `callable`
        Callable object.
    `args`
        position arguments to be passed to `callable`.
    `kwargs`
        keyword arguments to be passed to `callable`.
    
    This Action takes an optional _update_screens keyword argument, which
    defaults to true. When it is true, the interaction restarts and
    the screens are updated after the function returns.
    
    If the function returns a non-None value, the interaction stops and
    returns that value. (When called using the call screen statement, the
    result is placed in the `_return` variable.)

.. function:: Help(help=None)
    
    Displays help.
    
    If a screen named ``help`` is defined, that screen is displayed
    using :func:`ShowMenu` and `help` is ignored.
    
    `help`
        A string that is used to find help. This is used in the
        following way:
    
        * If a label with this name exists, the label is called in
          a new context.
        * Otherwise, this is interpreted as giving the name of a file
          that should be opened in a web browser.
    
        If `help` is None, :var:`config.help` is used as the default
        value.
     

.. function:: HideInterface(*args, **kwargs)
    
    Causes the interface to be hidden until the user clicks.

.. function:: If(expression, true=None, false=None)
    
    This returns `true` if `expression` is true, and `false`
    otherwise. Use this to select an action based on an expression.
    Note that the default, None, can be used as an action that causes
    a button to be disabled.

.. function:: InvertSelected(action)
    
    This inverts the selection state of the provided action, while
    proxying over all of the other methods.

.. function:: MouseMove(x, y, duration=0)
    
    Move the mouse pointer to `x`, `y`. If the device does not have a mouse
    pointer or _preferences.mouse_move is False, this does nothing.
    
    `duration`
        The time it will take to perform the move, in seconds. During
        this time, the mouse may be unresponsive.

.. function:: Notify(message)
    
    Displays `message` using :func:`renpy.notify`.

.. function:: OpenURL(url)
    
    Causes `url` to be opened in a web browser.

.. function:: QueueEvent(event, up=False)
    
    Queues the given event using :func:`renpy.queue_event`.

.. function:: RestartStatement(*args, **kwargs)
    
    This action causes Ren'Py to rollback to before the current
    statement, and then re-run the current statement. This may be used
    when changing a persistent variable that affects how the statement
    is displayed.
    
    If run in a menu context, this waits until the player exits to a
    top-level context before performing the rollback.

.. function:: RollForward(*args, **kwargs)
    
    This action causes a rollforward to occur, if a roll forward is
    possible. Otherwise, it is insensitive.

.. function:: Rollback(*args, **kwargs)
    
    This action causes a rollback to occur, when a rollback is possible.
    Otherwise, nothing happens.
    
    The arguments are given to :func:`renpy.rollback`, except that the
    `force` argument defaults to "menu".

.. function:: RollbackToIdentifier(identifier)
    
    This causes a rollback to an identifier to occur. Rollback
    identifiers are returned as part of HistoryEntry objects.

.. function:: Screenshot(*args, **kwargs)
    
    Takes a screenshot.

.. function:: Scroll(id, direction, amount=u'step')
    
    Causes a Bar, Viewport, or Vpgrid to scroll.
    
    `id`
        The id of a bar, viewport, or vpgrid in the current screen.
    
    `direction`
        For a vbar, one of "increase" or "decrease". For a viewport
        or vpgrid, one of "horizontal increase", "vertical increase",
        "horizontal decrease", or "vertical decrease".
    
    `amount`
        The amount to scroll by. This can be a number of pixels, or
        else "step" or "page".

.. function:: SelectedIf(expression)
    
    This indicates that one action in a list of actions should be used
    to determine if a button is selected. This only makes sense
    when the button has a list of actions. For example::
    
        # The button is selected only if mars_flag is True
        textbutton "Marsopolis":
            action [ SelectedIf(SetVariable("mars_flag", True)), SetVariable("on_mars", True) ]
    
    The action inside SelectedIf is run normally when the button is clicked.

.. function:: SensitiveIf(expression)
    
    This indicates that one action in a list of actions should be used
    to determine if a button is sensitive. This only makes sense
    when the button has a list of actions. For example::
    
        # The button is sensitive only if mars_flag is True
        textbutton "Marsopolis":
            action [ SensitiveIf(SetVariable("mars_flag", True)), SetVariable("on_mars", True) ]
    
    The action inside SensitiveIf is run normally when the button is clicked.

.. function:: Skip(fast=False, confirm=False)
    
    Causes the game to begin skipping. If the game is in a menu
    context, then this returns to the game. Otherwise, it just
    enables skipping.
    
    `fast`
          If true, skips directly to the next menu choice.
    
    `confirm`
          If true, asks for confirmation before beginning skipping.

.. function:: With(transition)
    
    Causes `transition` to occur.

