# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-24 23:21+0900\n"
"PO-Revision-Date: 2023-05-02 15:48+0900\n"
"Last-Translator: akakyouryuu <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2014-06-21 06:27+0000\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../source/persistent.rst:2
msgid "Persistent Data"
msgstr "永続データ"

#: ../../source/persistent.rst:4
msgid ""
"Ren'Py supports persistent data, saved data that is not associated with a "
"particular point in a game. Persistent data is accessed through fields of "
"the persistent object, which is bound to the variable ``persistent``."
msgstr ""
"Ren'Py は永続データをサポートしており、特定のゲームに依存しないデータをセーブ"
"出来ます(*訳注 つまり特定のセーブデータではなく、エンディング達成リストのよう"
"なゲーム全体で共有するデータを扱います)。永続データは persistent オブジェクト"
"のフィールドからアクセス出来、変数 ``persistent`` に代入されています。"

#: ../../source/persistent.rst:9
msgid ""
"All data reachable through fields on ``persistent`` is saved when Ren'Py "
"terminates, or when :func:`renpy.save_persistent` is called. Persistent data "
"is loaded when Ren'Py starts, and when Ren'Py detects that the persistent "
"data has been updated on disk."
msgstr ""
"``persistent`` のフィールドからアクセス出来るすべてのデータは Ren'Py が終了す"
"るか、 :func:`renpy.save_persistent` が呼び出されたときに保存されます。永続"
"データは Ren'Py 起動時と永続データがディスク上で更新された時にロードされま"
"す。"

#: ../../source/persistent.rst:14
msgid ""
"The persistent object is special in that an access to an undefined field "
"will have a None value, rather than causing an exception. If something other "
"than None is to be the default of a persistent value, the :ref:`default "
"<default-statement>` statement should be used::"
msgstr ""
"persistent オブジェクトは特別で、未定義のフィールドにアクセスすると、例外を出"
"力する代わりに None を返します。 None 以外を persistent 値のデフォルトにする"
"なら :ref:`default <default-statement>` ステートメントが使用出来ます。　::"

#: ../../source/persistent.rst:21
msgid ""
"An example use of persistent is the creation of an unlockable image gallery. "
"This is done by storing a flag in persistent that determines if the gallery "
"has been unlocked, as in ::"
msgstr ""
"永続データの使用例はアンロック可能なイメージギャラリーの作成です。これはギャ"
"ラリーがアンロックされているかどうかのフラグを永続データに置いて行われま"
"す。 ::"

#: ../../source/persistent.rst:34
msgid ""
"When the user gets an ending that causes the gallery to be unlocked, the "
"flag must be set to True. ::"
msgstr ""
"ユーザーがギャラリーをアンロックするエンディングに到達したらフラグを True に"
"設定しなければなりません。 ::"

#: ../../source/persistent.rst:39
msgid ""
"As persistent data is loaded before ``init python`` blocks are run, "
"persistent data should only contain types that are native to Python or "
"Ren'Py. Alternatively, classes that are defined in ``python early`` blocks "
"can be used, provided those classes can be pickled and implement equality."
msgstr ""
"永続データは ``init python`` ブロック実行前にロードされるので、永続データに"
"は Python か Ren'Py のネイティブな型のみが含まれます。あるいは pickle 可能で"
"等号演算子が実装されているなら、 ``python early`` ブロックで定義されたクラス"
"も使用出来ます。"

#: ../../source/persistent.rst:44
msgid ""
"Fields starting with two underscores (``__``) are supported, but will "
"receive the name-mangling effect described in :ref:`this section <elements-"
"of-statements>`, which means they will be specific to the file they're "
"defined in. This implies that if the file is renamed between two releases, "
"access to the value that field had in the previous release will be broken."
msgstr ""
"2つのアンダースコア(``__``)で始まるフィールドもサポートされていますが、 :ref:"
"`このセクション <elements-of-statements>` で説明されている名前のマングリング"
"効果が適用され、定義されているファイルに固有となります。つまり、2つのリリース"
"の間でファイル名が変更された場合、そのフィールドが以前のリリースで持っていた"
"値へのアクセスができなくなります。"

#: ../../source/persistent.rst:50
msgid ""
"In addition to this, these fields are not affected by the :meth:`persistent."
"_clear` method."
msgstr ""
"これに加えて、これらのフィールドは :meth:`persistent._clear`メソッドによる影"
"響を受けません。"

#: ../../source/persistent.rst:53
msgid ""
"As a reminder, fields starting with a single underscore ``_`` are reserved "
"and should not be used."
msgstr ""
"注意点は一つのアンダースコア ``_`` で始まるフィールドは予約されており、使用さ"
"れるべきではありません。"

#: ../../source/persistent.rst:57
msgid "Merging Persistent Data"
msgstr "永続データの統合"

#: ../../source/persistent.rst:59
msgid ""
"There are cases where Ren'Py has to merge persistent data from two sources. "
"For example, Ren'Py may need to merge persistent data stored on a USB drive "
"with persistent data from the local machine."
msgstr ""
"2つのソースから Ren'Py が永続データを統合する必要のある場合があります。例え"
"ば、 Ren'Py は USB ドライブにある persistent データとローカルマシンにある "
"persistent データを統合する必要があるでしょう。"

#: ../../source/persistent.rst:63
msgid ""
"Ren'Py does this merging on a field-by-field basis, taking the value of the "
"field that was updated more recently. In some cases, this is not the desired "
"behavior. In that case, the :func:`renpy.register_persistent` function can "
"be used."
msgstr ""
"Ren'Py はこの統合をフィールドベースで行ない、最も新しいフィールドの値を採用し"
"ます。いくつかのケースではこれは望ましい動作ではありません。その場合、 :func:"
"`renpy.register_persistent` 関数が使用可能です。"

#: ../../source/persistent.rst:68
msgid ""
"For example, if we have a set of seen endings, we'd like to take the union "
"of that set when merging data. ::"
msgstr ""
"例えば既読エンディングの set があるなら、データの統合時にその set を引数に受"
"け取りたいです。 ::"

#: ../../source/persistent.rst:83
msgid "Persistent Functions"
msgstr "Persistent 関数"

#: ../../source/persistent.rst:87
msgid ""
"Tests whether the `field_name` persistent field has been set or not. This "
"allows you to distinguish fields that have been explicitly set to None from "
"fields that have never been set."
msgstr ""
"`field_name` persistent フィールドが設定されているかどうか確認します。これに"
"よりそのフィールドが明示的に None に設定されたか設定されていないかを判別出来"
"るようにします。"

#: ../../source/persistent.rst:93
msgid "Resets the persistent data, except for fields starting with ``__``."
msgstr "永続データを ``__`` で始まるフィールドを除いてリセットします。"

#: ../../source/persistent.rst:96
msgid "`progress`"
msgstr "`progress`"

#: ../../source/persistent.rst:96
msgid "If true, also resets progress data that Ren'Py keeps."
msgstr "True なら Ren'Py が保持している進行度のデータもリセットします。"

#: ../../source/persistent.rst:98
msgid ""
"Note that this will delete all persistent data, and will not re-apply "
"defaults until Ren'Py restarts."
msgstr ""
"これはすべての永続データを消去しますが Ren'Py の再起動までデフォルトは再適用"
"されないので注意してください。"

#: ../../source/inc/persistent:5
msgid ""
"Registers a function that is used to merge values of a persistent field "
"loaded from disk with values of current persistent object."
msgstr ""
"ディスクからロードされた persistent のあるフィールドの値と、現在の "
"persistent オブジェクトのフィールドの値を統合するために使用される関数を登録し"
"ます。"

#: ../../source/inc/persistent:9
msgid "`field`"
msgstr "`field`"

#: ../../source/inc/persistent:9
msgid "The name of a field on the persistent object."
msgstr "persistent オブジェクトのフィールド名です。"

#: ../../source/inc/persistent:26
msgid "`function`"
msgstr "`function`"

#: ../../source/inc/persistent:12
msgid ""
"A function that is called with three parameters, `old`, `new`, and `current`:"
msgstr "3 つのパラメーター `old`, `new`, `current` で呼び出される関数です。 :"

#: ../../source/inc/persistent:16
msgid "`old`"
msgstr "`old`"

#: ../../source/inc/persistent:16
msgid "The value of the field in the older object."
msgstr "古いオブジェクトのフィールドの値です。"

#: ../../source/inc/persistent:19
msgid "`new`"
msgstr "`new`"

#: ../../source/inc/persistent:19
msgid "The value of the field in the newer object."
msgstr "新しいオブジェクトのフィールドの値です。"

#: ../../source/inc/persistent:24
msgid "`current`"
msgstr "`current`"

#: ../../source/inc/persistent:22
msgid ""
"The value of the field in the current persistent object. This is provided "
"for cases where the identity of the object referred to by the field can't "
"change."
msgstr ""
"現在の persistet オブジェクトのフィールドの値です。これはフィールドが参照して"
"いるオブジェクトの識別子を変更できない時のために用意されています。"

#: ../../source/inc/persistent:26
msgid ""
"The function is expected to return the new value of the field in the "
"persistent object."
msgstr ""
"関数は persistent オブジェクトの新しいフィールドの値を返すことが期待されま"
"す。"

#: ../../source/inc/persistent:31
msgid "Saves the persistent data to disk."
msgstr "永続データをディスクに保存します。"

#: ../../source/persistent.rst:104
msgid "Multi-Game Persistence"
msgstr "ゲーム間永続データ"

#: ../../source/persistent.rst:106
msgid ""
"Multi-Game persistence is a feature that lets you share information between "
"Ren'Py games. This may be useful if you plan to make a series of games, and "
"want to have them share information."
msgstr ""
"ゲーム間永続的データは Ren'Py ゲーム間で情報を共有させる機能です。これはシ"
"リーズ物のゲームを計画していて、それらに情報を 共有させたい場合に有益です。"

#: ../../source/persistent.rst:110
msgid ""
"To use multipersistent data, a MultiPersistent object must be created at "
"init time (preferably using ``define``). The user can then update this "
"object, and save it to disk by calling its save method. Undefined fields "
"default to None. To ensure the object can be loaded again in a different "
"game, we strongly advise against storing instances of user-defined types in "
"the object."
msgstr ""
"ゲーム間永続データを使用するためには、 MultiPersistent オブジェクトが初期化時"
"に作成されなければなりません ( ``define`` の使用が望ましいです ) 。 ユーザー"
"はこのオブジェクトを更新でき、 save メソッドを呼び出せば、ディスクにセーブ出"
"来ます。 未定義のフィールドはデフォルトで None です。オブジェクトがもう一度確"
"実にロードできるようにするために、ユーザー定義型のインスタンスの代入は非推奨"
"です。"

#: ../../source/persistent.rst:119
msgid ""
"Creates a new ``MultiPersistent`` object. This should only be called at init "
"time, and it returns a new ``MultiPersistent`` with the given key."
msgstr ""
"新しく ``MultiPersistent`` オブジェクトを作成します。これは ``init`` ブロック"
"でのみ呼び出されるべきで、 指定した key に対応する新しい ``MultiPersistent`` "
"オブジェクトを返します。"

#: ../../source/persistent.rst:124
msgid "`key`"
msgstr "`key`"

#: ../../source/persistent.rst:123
msgid ""
"The key used to to access the multipersistent data. Games using the same key "
"will access the same multipersistent data."
msgstr ""
"key はゲーム間永続データにアクセスするために使われるキーです。ゲームは同じ"
"キーを使用して同じゲーム間永続データにアクセスします。"

#: ../../source/persistent.rst:127
msgid "`save_on_quit`"
msgstr "`save_on_quit`"

#: ../../source/persistent.rst:127
msgid ""
"If it is True, this object will be automatically saved when Ren'Py "
"terminates."
msgstr "True ならこのオブジェクトは Ren'Py 終了時に自動保存されます。"

#: ../../source/persistent.rst:131
msgid ""
"Saves the multipersistent data to disk. This must be called after the data "
"is modified."
msgstr ""
"MultiPersistent オブジェクトをディスクにセーブします。これはデータが変更され"
"てから呼び出されるべきです。"

#: ../../source/persistent.rst:135
msgid "As an example, take the first part of a two-part game::"
msgstr "例 複数パートのゲームその1 ::"

#: ../../source/persistent.rst:150
msgid "And the second part::"
msgstr "その2 ::"

#~ msgid "Resets the persistent data."
#~ msgstr "永続データをリセットします。"
