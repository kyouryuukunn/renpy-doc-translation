# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-05 11:10+0900\n"
"PO-Revision-Date: 2020-12-05 11:19+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2014-06-21 06:27+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/persistent.rst:5
msgid "Persistent Data"
msgstr "永続データ"

#: ../../source/persistent.rst:7
msgid ""
"Ren'Py supports persistent data, saved data that is not associated with a "
"particular point in a game. Persistent data is accessed through fields of "
"the persistent object, which is bound to the variable ``persistent``."
msgstr ""
"Ren'Py は永続データをサポートしており、特定のゲームに依存しないデータをセーブ"
"出来ます(*訳注 つまり特定のセーブデータではなく、エンディング達成リストのよう"
"なゲーム全体で共有するデータを扱います)。永続データは persistent オブジェクト"
"のフィールドからアクセス出来、変数 ``persistent`` に代入されています。"

#: ../../source/persistent.rst:12
msgid ""
"All data reachable through fields on ``persistent`` is saved when Ren'Py "
"terminates, or when :func:`renpy.save_persistent` is called. Persistent data "
"is loaded when Ren'Py starts, and when Ren'Py detects that the persistent "
"data has been updated on disk."
msgstr ""
"``persistent`` のフィールドからアクセス出来るすべてのデータは Ren'Py が終了す"
"るか、 :func:`renpy.save_persistent` が呼び出されたときに保存されます。永続"
"データは Ren'py 起動時と永続データがディスク上で更新された時にロードされま"
"す。"

#: ../../source/persistent.rst:17
msgid ""
"The persistent object is special in that an access to an undefined field "
"will have a None value, rather than causing an exception."
msgstr ""
"persistent オブジェクトは特別で、未定義のフィールドにアクセスすると、例外を出"
"力する代わりに None を返します。"

#: ../../source/persistent.rst:20
msgid ""
"An example use of persistent is the creation of an unlockable image gallery. "
"This is done by storing a flag in persistent that determines if the gallery "
"has been unlocked, as in ::"
msgstr ""
"永続データの使用例はアンロック可能なイメージギャラリーの作成です。これはギャ"
"ラリーがアンロックされているかどうかのフラグを永続データに置くことで行われま"
"す。 ::"

#: ../../source/persistent.rst:33
msgid ""
"When the user gets an ending that causes the gallery to be unlocked, the "
"flag must be set to True. ::"
msgstr ""
"ユーザーがギャラリーをアンロックするエンディングに到達したらフラグを True に"
"設定しなければなりません。 ::"

#: ../../source/persistent.rst:38
msgid ""
"As persistent data is loaded before ``init python`` blocks are run, "
"persistent data should only contain types that are native to Python or "
"Ren'Py. Alternatively, classes that are defined in ``python early`` blocks "
"can be used, provided those classes can be pickled and implement equality."
msgstr ""
"永続データは ``init python`` ブロック実行前にロードされるので、永続データに"
"は Python か Ren'Py のネイティブな型のみが含まれます。あるいは pickle 可能で"
"等号演算子が実装されているなら、 ``python early`` ブロックで定義されたクラス"
"も使用出来ます。"

#: ../../source/persistent.rst:44
msgid "Merging Persistent Data"
msgstr "永続データの統合"

#: ../../source/persistent.rst:46
msgid ""
"There are cases where Ren'Py has to merge persistent data from two sources. "
"For example, Ren'Py may need to merge persistent data stored on a USB drive "
"with persistent data from the local machine."
msgstr ""
"2つのソースから Ren'Py が永続データを統合する必要のある場合があります。例え"
"ば、 Ren'Py は USB ドライブにある persistent データとローカルマシンにある "
"persistent データを統合する必要があるでしょう。"

#: ../../source/persistent.rst:50
msgid ""
"Ren'Py does this merging on a field-by-field basis, taking the value of the "
"field that was updated more recently. In some cases, this is not the desired "
"behavior. In that case, the :func:`renpy.register_persistent` function can "
"be used."
msgstr ""
"Ren'Py はこの統合をフィールドベースで行ない、最も新しいフィールドの値を採用し"
"ます。いくつかのケースではこれは望ましい動作ではありません。その場合、 :func:"
"`renpy.register_persistent` 関数が使用可能です。"

#: ../../source/persistent.rst:55
msgid ""
"For example, if we have a set of seen endings, we'd like to take the union "
"of that set when merging data. ::"
msgstr ""
"例えば既読エンディングの set があるなら、データの統合時にその set を引数に取"
"りたいです。 ::"

#: ../../source/persistent.rst:70
msgid "Persistent Functions"
msgstr "Persistent 関数"

#: ../../source/inc/persistent:5
msgid ""
"Registers a function that is used to merge values of a persistent field "
"loaded from disk with values of current persistent object."
msgstr ""
"ディスクからロードされた persistent のあるフィールドの値と、現在の "
"persistent オブジェクトのフィールドの値を統合するために使用される関数を登録し"
"ます。"

#: ../../source/inc/persistent:9
msgid "`field`"
msgstr "`field`"

#: ../../source/inc/persistent:9
msgid "The name of a field on the persistent object."
msgstr "persistent オブジェクトのフィールド名です。"

#: ../../source/inc/persistent:26
msgid "`function`"
msgstr "`function`"

#: ../../source/inc/persistent:12
msgid ""
"A function that is called with three parameters, `old`, `new`, and `current`:"
msgstr "3 つの引数 `old`, `new`, `current` で呼び出される関数です。 :"

#: ../../source/inc/persistent:16
msgid "`old`"
msgstr "`old`"

#: ../../source/inc/persistent:16
msgid "The value of the field in the older object."
msgstr "古いオブジェクトのフィールドの値です。"

#: ../../source/inc/persistent:19
msgid "`new`"
msgstr "`new`"

#: ../../source/inc/persistent:19
msgid "The value of the field in the newer object."
msgstr "新しいオブジェクトのフィールドの値です。"

#: ../../source/inc/persistent:24
msgid "`current`"
msgstr "`current`"

#: ../../source/inc/persistent:22
msgid ""
"The value of the field in the current persistent object. This is provided "
"for cases where the identity of the object referred to by the field can't "
"change."
msgstr ""
"現在の persistet オブジェクトのフィールドの値です。これはフィールドが参照して"
"いるオブジェクトの識別子を変更できない時のために用意されています。"

#: ../../source/inc/persistent:26
msgid ""
"The function is expected to return the new value of the field in the "
"persistent object."
msgstr ""
"関数は persistent オブジェクトの新しいフィールドの値を返すことが期待されま"
"す。"

#: ../../source/inc/persistent:31
msgid "Saves the persistent data to disk."
msgstr "永続データをディスクに保存します。"

#: ../../source/persistent.rst:75
msgid "Multi-Game Persistence"
msgstr "ゲーム間永続データ"

#: ../../source/persistent.rst:77
msgid ""
"Multi-Game persistence is a feature that lets you share information between "
"Ren'Py games. This may be useful if you plan to make a series of games, and "
"want to have them share information."
msgstr ""
"ゲーム間永続的データは Ren'Py ゲーム間で情報を共有させる機能です。これはシ"
"リーズ物のゲームを計画していて、それらに情報を 共有させたい場合に有益です。"

#: ../../source/persistent.rst:81
msgid ""
"To use multipersistent data, a MultiPersistent object must be created inside "
"an ``init`` block. The user can then update this object, and save it to disk "
"by calling its save method. Undefined fields default to None. To ensure the "
"object can be loaded again, we suggest not assigning the object instances of "
"user-defined types."
msgstr ""
"ゲーム間永続データを使用するためには、 MultiPersistent オブジェクトが "
"``init`` ブロック内で作成されなければなりません。 ユーザーはこのオブジェクト"
"を更新でき、 save メソッドを呼び出せば、ディスクにセーブ出来ます。 未定義の"
"フィールドはデフォルトで None です。オブジェクトがもう一度ロード可能だと保証"
"するために、ユーザー定義型のインスタンスを 代入しないことを勧めます。"

#: ../../source/persistent.rst:89
msgid ""
"Creates a new ``MultiPersistent`` object. This should only be called inside "
"an ``init`` block, and it returns a new ``MultiPersistent`` with the given "
"key."
msgstr ""
"新しく ``MultiPersistent`` オブジェクトを作成します。これは ``init`` ブロック"
"でのみ呼び出されるべきで、 指定した key に対応する新しい ``MultiPersistent`` "
"オブジェクトを返します。"

#: ../../source/persistent.rst:94
msgid "`key`"
msgstr "`key`"

#: ../../source/persistent.rst:93
msgid ""
"The key used to to access the multipersistent data. Games using the same key "
"will access the same multipersistent data."
msgstr ""
"key はゲーム間永続データにアクセスするために使われるキーです。ゲームは同じ"
"キーを使用して同じゲーム間永続データにアクセスします。"

#: ../../source/persistent.rst:97
msgid "`save_on_quit`"
msgstr "`save_on_quit`"

#: ../../source/persistent.rst:97
msgid ""
"If it is True, this object will be automatically saved when Ren'Py "
"terminates."
msgstr "True ならこのオブジェクトは Ren'Py 終了時に自動保存されます。"

#: ../../source/persistent.rst:101
msgid ""
"Saves the multipersistent data to disk. This must be called after the data "
"is modified."
msgstr ""
"MultiPersistent オブジェクトをディスクにセーブします。これはデータが変更され"
"てから呼び出されるべきです。"

#: ../../source/persistent.rst:105
msgid "As an example, take the first part of a two-part game::"
msgstr "例 複数パートのゲームその1 ::"

#: ../../source/persistent.rst:121
msgid "And the second part::"
msgstr "その2 ::"
