# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-30 21:47+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/persistent.rst:5
msgid "Persistent Data"
msgstr ""

#: ../../source/persistent.rst:7
msgid "Ren'Py supports persistent data, saved data that is not associated with a particular point in a game. Persistent data is accessed through fields of the persistent object, which is bound to the variable ``persistent``."
msgstr ""

#: ../../source/persistent.rst:12
msgid "All data reachable through fields on ``persistent`` is saved when Ren'Py terminates, or when :func:`renpy.save_persistent` is called. Persistent data is loaded when Ren'Py starts, and when Ren'Py detects that the persistent data has been updated on disk."
msgstr ""

#: ../../source/persistent.rst:17
msgid "The persistent object is special in that an access to an undefined field will have a None value, rather than causing an exception."
msgstr ""

#: ../../source/persistent.rst:20
msgid "An example use of persistent is the creation of an unlockable image gallery. This is done by storing a flag in persistent that determines if the gallery has been unlocked, as in ::"
msgstr ""

#: ../../source/persistent.rst:33
msgid "When the user gets an ending that causes the gallery to be unlocked, the flag must be set to True. ::"
msgstr ""

#: ../../source/persistent.rst:38
msgid "As persistent data is loaded before ``init python`` blocks are run, persistent data should only contain types that are native to Python or Ren'Py. Alternatively, classes that are defined in ``python early`` blocks can be used, provided those classes can be pickled and implement equality."
msgstr ""

#: ../../source/persistent.rst:44
msgid "Merging Persistent Data"
msgstr ""

#: ../../source/persistent.rst:46
msgid "There are cases where Ren'Py has to merge persistent data from two sources. For example, Ren'Py may need to merge persistent data stored on a USB drive with persistent data from the local machine."
msgstr ""

#: ../../source/persistent.rst:50
msgid "Ren'Py does this merging on a field-by-field basis, taking the value of the field that was updated more recently. In some cases, this is not the desired behavior. In that case, the :func:`renpy.register_persistent` function can be used."
msgstr ""

#: ../../source/persistent.rst:55
msgid "For example, if we have a set of seen endings, we'd like to take the union of that set when merging data. ::"
msgstr ""

#: ../../source/persistent.rst:70
msgid "Persistent Functions"
msgstr ""

#: ../../source/persistent.rst:75
msgid "Multi-Game Persistence"
msgstr ""

#: ../../source/persistent.rst:77
msgid "Multi-Game persistence is a feature that lets you share information between Ren'Py games. This may be useful if you plan to make a series of games, and want to have them share information."
msgstr ""

#: ../../source/persistent.rst:81
msgid "To use multipersistent data, a MultiPersistent object must be created inside an ``init`` block. The user can then update this object, and save it to disk by calling its save method. Undefined fields default to None. To ensure the object can be loaded again, we suggest not assigning the object instances of user-defined types."
msgstr ""

#: ../../source/persistent.rst:89
msgid "Creates a new ``MultiPersistent`` object. This should only be called inside an ``init`` block, and it returns a new ``MultiPersistent`` with the given key."
msgstr ""

#: ../../source/persistent.rst:95
msgid "`key`"
msgstr ""

#: ../../source/persistent.rst:93
msgid "The key used to to access the multipersistent data. Games using the same key will access the same multipersistent data."
msgstr ""

#: ../../source/persistent.rst:99
msgid "Saves the multipersistent data to disk. This must be called after the data is modified."
msgstr ""

#: ../../source/persistent.rst:103
msgid "As an example, take the first part of a two-part game::"
msgstr ""

#: ../../source/persistent.rst:119
msgid "And the second part::"
msgstr ""

