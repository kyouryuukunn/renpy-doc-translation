# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-30 21:47+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/dialogue.rst:5
msgid "Dialogue and Narration"
msgstr ""

#: ../../source/dialogue.rst:7
msgid "Text is fundamental to visual novels, and generally quite important to storytelling-based games. This text may consist of dialogue labeled with the character that is saying it, and narration, which does not have a speaker. (For convenience, we will lump both dialogue and narration together as dialogue, except where the differences are important.) It's also important that the user be able to customize the look of dialogue to suit their game."
msgstr ""

#: ../../source/dialogue.rst:15
msgid "In Ren'Py, most dialogue is written using say statements. The look of dialogue may be customized on a per-character basis by using Character objects."
msgstr ""

#: ../../source/dialogue.rst:22
msgid "Say Statement"
msgstr ""

#: ../../source/dialogue.rst:24
msgid "The ``say`` statement is used for dialogue and narration. Since it's almost always the most frequently used statement in Ren'Py scripts, the say statement has a syntax that minimizes the overhead in writing it. Some example say statements are::"
msgstr ""

#: ../../source/dialogue.rst:38
msgid "The first form of the say statement consists of a string by itself. This form is used for narration, with the narration being the contents of the string."
msgstr ""

#: ../../source/dialogue.rst:42
msgid "The second form consists of two strings. The first string is the name of the character who is speaking, and the second is the dialogue being spoken."
msgstr ""

#: ../../source/dialogue.rst:46
msgid "The third form consists of a simple expression followed by a string. The simple expression should evaluate to either a string giving a character name, or a Character object. In the latter case, the character object is used to control how the dialogue is shown."
msgstr ""

#: ../../source/dialogue.rst:51
msgid "The final form consists of a string and a with clause which has a transition. In this case, the string is shown and a screen is shaken at the same time."
msgstr ""

#: ../../source/dialogue.rst:56
msgid "Although the precise details of what a say statement does is controlled by the character object used, the usual effect of a say statement is to display dialogue on the screen until the user clicks to dismiss it, then to remove that dialogue on the screen."
msgstr ""

#: ../../source/dialogue.rst:61
msgid "Certain characters have special meaning to Ren'Py, and so can't be used in dialogue strings. The ``{`` character begins a text tag, and the ``[`` character begins a substitution. To use them in dialogue, double them. It may also be necessary to precede a quote with a backslash to prevent it from closing the string. For example::"
msgstr ""

#: ../../source/dialogue.rst:71
msgid "Defining Character Objects"
msgstr ""

#: ../../source/dialogue.rst:73
msgid "By creating a Character object and using it in a say statement, you can customize the look (and to some extent, the behavior) of dialogue. Characters are created by using the ``define`` statement to assign a Character to a variable. For example::"
msgstr ""

#: ../../source/dialogue.rst:82
msgid "Once this is done, the character can be used in a say statement::"
msgstr ""

#: ../../source/dialogue.rst:86
msgid "Character is a Python function that takes a large number of keyword arguments. These keyword arguments control the behavior of the character."
msgstr ""

#: ../../source/dialogue.rst:90
msgid "The ``define`` statement causes its expression to be evaluated, and assigned to the supplied name. If not inside an ``init`` block, the ``define`` statement will automatically be run with init priority 0."
msgstr ""

#: ../../source/dialogue.rst:97
msgid "Say with Image Attributes"
msgstr ""

#: ../../source/dialogue.rst:99
msgid "When a character is defined with an associated image tag, say statement involving that character may have image attributes placed between the character name and the second string."
msgstr ""

#: ../../source/dialogue.rst:103
msgid "In this form, if an image with the given tag is showing, Ren'Py will issue a show command involving the character tag and the attributes. If the image is not shown, Ren'Py will store the attributes for use by side images, but will not show an image."
msgstr ""

#: ../../source/dialogue.rst:108
#: ../../source/dialogue.rst:135
#: ../../source/dialogue.rst:229
#: ../../source/dialogue.rst:288
msgid "For example::"
msgstr ""

#: ../../source/dialogue.rst:119
#: ../../source/dialogue.rst:148
#: ../../source/dialogue.rst:389
#: ../../source/dialogue.rst:412
msgid "is equivalent to::"
msgstr ""

#: ../../source/dialogue.rst:132
msgid "When the image attribute begins with an @, the change is temporary, and reverts to the previously displaying image at the end of the line of dialogue."
msgstr ""

#: ../../source/dialogue.rst:163
msgid "The two syntaxes can be combined, with the permanent changes coming before the @ and the temporary ones coming after. ::"
msgstr ""

#: ../../source/dialogue.rst:168
msgid "To cause a transition to occur whenever the images are changed in this way, set :var:`config.say_attribute_transition` to a transition. For more control, use :var:`config.say_attribute_transition_callback`."
msgstr ""

#: ../../source/dialogue.rst:174
msgid "Example Characters"
msgstr ""

#: ../../source/dialogue.rst:176
msgid "Here are a few example characters::"
msgstr ""

#: ../../source/dialogue.rst:185
msgid "Special Characters"
msgstr ""

#: ../../source/dialogue.rst:187
msgid "A few character names are defined by default, and are used automatically in certain situations. Intentionally redefining these characters can change the behavior of Ren'Py, but accidentally using them can be a problem."
msgstr ""

#: ../../source/dialogue.rst:195
msgid "``adv``"
msgstr ""

#: ../../source/dialogue.rst:193
msgid "The default kind of character used by Character. This sets up a character such that one line is displayed on the screen at a time."
msgstr ""

#: ../../source/dialogue.rst:200
msgid "``nvl``"
msgstr ""

#: ../../source/dialogue.rst:198
msgid "A kind of Character that causes dialogue to be displayed in :ref:`NVL-mode`, with multiple lines of text on the screen at once."
msgstr ""

#: ../../source/dialogue.rst:204
msgid "``narrator``"
msgstr ""

#: ../../source/dialogue.rst:203
msgid "The character that's used to display narration, by say statements without a character name."
msgstr ""

#: ../../source/dialogue.rst:210
msgid "``name_only``"
msgstr ""

#: ../../source/dialogue.rst:207
msgid "A character that is used to display dialogue in which the character name is given as a string. This character is copied to a new character with the given name, and then that new character is used to display the dialogue."
msgstr ""

#: ../../source/dialogue.rst:214
msgid "``centered``"
msgstr ""

#: ../../source/dialogue.rst:213
msgid "A character that causes what it says to be displayed centered, in the middle of the screen, outside of any window."
msgstr ""

#: ../../source/dialogue.rst:219
msgid "``vcentered``"
msgstr ""

#: ../../source/dialogue.rst:217
msgid "A character that causes what it says to be displayed centered in vertically oriented text, in the middle of the screen, outside of any window."
msgstr ""

#: ../../source/dialogue.rst:227
msgid "``extend``"
msgstr ""

#: ../../source/dialogue.rst:222
msgid "A character that causes the last character to speak to say a line of dialogue consisting of the last line of dialogue spoken, \"{fast}\", and the dialogue given to extend. This can be used to have the screen change over the course of dialogue."
msgstr ""

#: ../../source/dialogue.rst:227
msgid "Extend is aware of NVL-mode and treats it correctly."
msgstr ""

#: ../../source/dialogue.rst:251
msgid "Dialogue Window Management"
msgstr ""

#: ../../source/dialogue.rst:253
msgid "Ren'Py includes several statements that allow for management of the dialogue window. As dialogue window is always shown during dialogue, these statements control the presence or absence of the window during non-dialogue interactions."
msgstr ""

#: ../../source/dialogue.rst:262
msgid "``window show``"
msgstr ""

#: ../../source/dialogue.rst:259
msgid "The window show statement causes the window to be shown. It takes as an argument an optional transition, which is used to show the window. If the transition is omitted, :var:`config.window_show_transition` is used."
msgstr ""

#: ../../source/dialogue.rst:268
msgid "``window hide``"
msgstr ""

#: ../../source/dialogue.rst:265
msgid "The window hide statement causes the window to be hidden. It takes as an argument an optional transition, which is used to hide the window. If the transition is omitted, :var:`config.window_hide_transition` is used."
msgstr ""

#: ../../source/dialogue.rst:277
msgid "``window auto``"
msgstr ""

#: ../../source/dialogue.rst:271
msgid "This enables automatic management of the window. The window is shown before statements listed in :var:`config.window_auto_show` – by default, say statements. The window is hidden before statements listed in :var:`config.window_auto_hide` – by default, ``scene`` and ``call screen`` statements, and ``menu`` statements without a caption. (Only statements are considered, not statement equivalent functions.)"
msgstr ""

#: ../../source/dialogue.rst:282
msgid "``window auto hide``, ``window auto show``"
msgstr ""

#: ../../source/dialogue.rst:280
msgid "These statements show or hide the window, with an optional transition, like ``window show`` or ``window hide`` do. However, unlike those statements, this keeps automatic management enabled."
msgstr ""

#: ../../source/dialogue.rst:284
msgid "The ``window auto`` statement uses :var:`config.window_show_transition` and :var:`config.window_hide_transition` to show and hide the window, respectively. ``window auto`` is cancelled by ``window show`` and ``window hide``."
msgstr ""

#: ../../source/dialogue.rst:316
msgid "Dialogue window management is subject to the \"show empty window\" :func:`Preference`. If the preference is disabled, the statements above have no effect."
msgstr ""

#: ../../source/dialogue.rst:322
msgid "Say with Arguments"
msgstr ""

#: ../../source/dialogue.rst:324
msgid "Additional arguments can be passed to the say statement by including them in parenthesis after the say statement. For example, one can write::"
msgstr ""

#: ../../source/dialogue.rst:329
msgid "Arguments to the say statement are first processed by :var:`config.say_arguments_callback`, if it is not None. If any remain, they are then passed to the character, which treats them as if they were present when the character was defined. So, the example above displays the dialogue in green. Special keywords `_mode` and `_with_node` will override the ones set in the character only for this interaction."
msgstr ""

#: ../../source/dialogue.rst:339
msgid "Monologue Mode"
msgstr ""

#: ../../source/dialogue.rst:341
msgid "Some visual novels have extended narration, or multiple blocks of dialogue from the same character. In these cases, typing the name of the character and the quotes multiple times is somewhat redundant."
msgstr ""

#: ../../source/dialogue.rst:345
msgid "To cover these cases, Ren'Py supports monologue mode. When dialogue is inside triple-quoted strings, Ren'Py will break the dialogue up into blocks at blank lines. Each block is then used to create its own say statement. Here's an example, with three blocks of narration followed by three lines of dialogue::"
msgstr ""

#: ../../source/dialogue.rst:368
msgid "While additional clauses like arguments or attributes are allowed, they are passed to each line in the monologue, which may be less useful."
msgstr ""

#: ../../source/dialogue.rst:371
msgid "If you'd like to omit the spaces between the blocks, write ``rpy monologue single`` at the top level of the file, before the first monologue line."
msgstr ""

#: ../../source/dialogue.rst:377
msgid "Python Equivalents"
msgstr ""

#: ../../source/dialogue.rst:381
msgid "This may only make sense if you've read the :ref:`python` section."
msgstr ""

#: ../../source/dialogue.rst:383
msgid "When the first parameter to a say statement is present and an expression, the say statement is equivalent to calling that expressing with the dialogue and an ``interact`` argument of True. For example::"
msgstr ""

#: ../../source/dialogue.rst:393
msgid "The say statement will search the ``character`` named store before the default store. If you want to have a character with the same name as a variable in the default store, it can be defined using::"
msgstr ""

#: ../../source/dialogue.rst:399
msgid "This character can then be used alongside a variable in the default store::"
msgstr ""

#: ../../source/dialogue.rst:408
msgid "A say with arguments sees the arguments passed to the function. For example::"
msgstr ""

#: ../../source/dialogue.rst:416
msgid "When e is a Character, this is further equivalent to::"
msgstr ""

#: ../../source/dialogue.rst:420
msgid "But it's possible to use :var:`config.say_arguments_callback` or have ``e`` wrap a character to do things differently."
msgstr ""

#: ../../source/dialogue.rst:427
msgid "Window management is performed by setting the :var:`_window` and :var:`_window_auto` variables, and by using the following two functions:"
msgstr ""

