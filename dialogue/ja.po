# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-28 12:38+0900\n"
"PO-Revision-Date: 2025-07-13 14:37+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2015-03-28 05:30+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/dialogue.rst:2
msgid "Dialogue and Narration"
msgstr "台詞とナレーション"

#: ../../source/dialogue.rst:4
msgid ""
"Text is fundamental to visual novels, and generally quite important to "
"storytelling-based games. This text may consist of dialogue labeled with the "
"character that is saying it, and narration, which does not have a speaker. "
"(For convenience, we will lump both dialogue and narration together as "
"dialogue, except where the differences are important.) It's also important "
"that the user be able to customize the look of dialogue to suit their game."
msgstr ""
"テキストはビジュアルノベルの基本であり、物語を中心としたゲームにとってとても"
"大切なものです。テキストにはそれを話しているキャラクターで分類できる台詞と、"
"話し手のいないナレーションがあります(簡単にするため、特に分ける必要がない限り"
"台詞もナレーションも台詞で統一します)。 また、台詞の外観はゲームに合わせて"
"ユーザーがカスタマイズできます。"

#: ../../source/dialogue.rst:12
msgid ""
"In Ren'Py, most dialogue is written using say statements. The look of "
"dialogue may be customized on a per-character basis by using Character "
"objects."
msgstr ""
"Ren'Py ではほとんどの台詞は say ステートメントで書かれます。台詞の見た目は "
"Character オブジェクトを使ってキャラクター毎にカスタマイズできます。"

#: ../../source/dialogue.rst:19
msgid "Say Statement"
msgstr "say ステートメント"

#: ../../source/dialogue.rst:21
msgid ""
"The ``say`` statement is used for dialogue and narration. Since it's almost "
"always the most frequently used statement in Ren'Py scripts, the say "
"statement has a syntax that minimizes the overhead in writing it. Some "
"example say statements are::"
msgstr ""
"``say`` ステートメントは、台詞やナレーションに使われます。これは Ren'Py スク"
"リプトで最も多く使われるステートメントですから、say ステートメントの構文は最"
"小限の負荷で書けます。こちらは say ステートメントの例です。 ::"

#: ../../source/dialogue.rst:35
msgid ""
"The first form of the say statement consists of a string by itself. This "
"form is used for narration, with the narration being the contents of the "
"string."
msgstr ""
"最初の形式は 1 つの文字列だけで構成されています。この形式はナレーションに使わ"
"れ、この文字列がナレーションの内容です"

#: ../../source/dialogue.rst:39
msgid ""
"The second form consists of two strings. The first string is the name of the "
"character who is speaking, and the second is the dialogue being spoken."
msgstr ""
"第二の形式は、2 つの文字列で構成されています。最初の文字列は話者の名前で、二"
"番目が話される台詞です。"

#: ../../source/dialogue.rst:43
msgid ""
"The third form consists of a simple expression followed by a string. The "
"simple expression should evaluate to either a string giving a character "
"name, or a Character object. In the latter case, the character object is "
"used to control how the dialogue is shown."
msgstr ""
"第三の形式は、単純式とその後の文字列で構成されます。ここでの単純式は、キャラ"
"クター名の文字列または Character オブジェクトであるべきです。後者では、その "
"Character オブジェクトが台詞の見た目の制御に使われます。"

#: ../../source/dialogue.rst:48
msgid ""
"The final form consists of a string and a with clause which has a "
"transition. In this case, the string is shown and a screen is shaken at the "
"same time."
msgstr ""
"最後の形式は文字列とトランジション付きの with 節で構成されており、文字列の表"
"示とスクリーンの揺れが同時に起こります。"

#: ../../source/dialogue.rst:53
msgid ""
"Although the precise details of what a say statement does is controlled by "
"the character object used, the usual effect of a say statement is to display "
"dialogue on the screen until the user clicks to dismiss it, then to remove "
"that dialogue on the screen."
msgstr ""
"say ステートメントの詳細な動作は使われる Character オブジェクトによって制御さ"
"れますが、say ステートメントは通常台詞をスクリーンに表示し、ユーザーがクリッ"
"クしたら台詞をスクリーンから取り除きます。"

#: ../../source/dialogue.rst:58
msgid ""
"Certain characters have special meaning to Ren'Py, and so can't be used in "
"dialogue strings. The ``{`` character begins a text tag, and the ``[`` "
"character begins a substitution. To use them in dialogue, double them. It "
"may also be necessary to precede a quote with a backslash to prevent it from "
"closing the string. For example::"
msgstr ""
"文字の中には Ren'Py で特別な意味を持ち、それゆえ台詞の文字列で使えないものが"
"あります。 ``{`` 文字はテキストタグを開始し、 ``[`` 文字は置換を開始します。"
"これらを台詞中で使うには 2 つ重ねてください。また、クオートが文字列を閉じてし"
"まうのを防ぐには、バックスラッシュを前置しなければなりません。例 ::"

#: ../../source/dialogue.rst:66
msgid ""
"It's also possible to use a proxy function instead of a character object. "
"More details about this in :ref:`this section <say-proxy>`."
msgstr ""
"character オブジェクトの代わりにプロキシ関数も使用できます。詳細は :ref:`こち"
"らのセクション <say-proxy>` を参照ください。"

#: ../../source/dialogue.rst:72
msgid "Defining Character Objects"
msgstr "Character オブジェクトの定義"

#: ../../source/dialogue.rst:74
msgid ""
"By creating a Character object and using it in a say statement, you can "
"customize the look (and to some extent, the behavior) of dialogue. "
"Characters are created by using the ``define`` statement to assign a "
"Character to a variable. For example::"
msgstr ""
"Character オブジェクトを作成して、 say ステートメントで使用すると、会話文の見"
"た目 (ある程度の動作も) を変更できます。キャラクターは、``define`` ステートメ"
"ントを使って変数に Character を代入して作成できます。例 ::"

#: ../../source/dialogue.rst:81
msgid "Once this is done, the character can be used in a say statement::"
msgstr "これでそのキャラクターを say ステートメントで使えます::"

#: ../../source/dialogue.rst:85
msgid ""
"Character is a Python function that takes a large number of keyword "
"arguments. These keyword arguments control the behavior of the character."
msgstr ""
"Character は Python 関数でもあり、多くのキーワード引数を受け取ります。これら"
"のキーワード引数は、キャラクターの動作を制御します。"

#: ../../source/inc/character:5
msgid ""
"Creates and returns a Character object, which controls the look and feel of "
"dialogue and narration."
msgstr ""
"台詞やナレーションの外観を制御する Character オブジェクトを作成して返します。"

#: ../../source/inc/character:12
msgid "`name`"
msgstr "`name`"

#: ../../source/inc/character:9
msgid ""
"If a string, the name of the character for dialogue. When `name` is None, "
"display of the name is omitted, as for narration. If no name is given, the "
"name is taken from `kind`, and otherwise defaults to None."
msgstr ""
"``name`` が文字列であれば、台詞を話すキャラクターの名前となります。 None であ"
"れば、ナレーションのように名前の表示は省略されます。 `name` が指定されないと "
"`kind` から name が所得され、 kind がなければ None となります。"

#: ../../source/inc/character:22
msgid "`kind`"
msgstr "`kind`"

#: ../../source/inc/character:15
msgid ""
"The Character to base this Character off of. When used, the default value of "
"any argument not supplied to this Character is the value of that argument "
"supplied to ``kind``. This can be used to define a template character, and "
"then copy that character with changes."
msgstr ""
"このキャラクターの元になるキャラクターです。指定されると、このキャラクターに"
"与えられなかった全ての引数のデフォルト値は、 ``kind`` に与えられた引数の値に"
"なります。これはテンプレートキャラクターを定義してそのキャラクターをコピーし"
"て変更するのに使われます。"

#: ../../source/inc/character:21
msgid ""
"This can also be a namespace, in which case the 'character' variable in the "
"namespace is used as the kind."
msgstr ""
"これには名前空間も渡せられ、その場合その名前空間の `character` 変数が kind と"
"して使用されます。"

#: ../../source/inc/character:24
msgid ""
"**Linked Image.** An image tag may be associated with a Character. This "
"allows a say statement involving this character to display an image with the "
"tag, and also allows Ren'Py to automatically select a side image to show "
"when this character speaks."
msgstr ""
"**画像の関連づけ** キャラクターに画像タグを関連付けられます。これにより、その"
"キャラクターに関わる say ステートメントでこのタグの画像を表示したり、そのキャ"
"ラクターがしゃべるときに現れるサイドイメージを自動的に選んだりできます。"

#: ../../source/inc/character:32
msgid "`image`"
msgstr "`image`"

#: ../../source/inc/character:31
msgid "A string giving the image tag that is linked with this character."
msgstr "このキャラクターに関連付けられる画像タグの文字列です。"

#: ../../source/inc/character:34
msgid ""
"**Voice Tag.** If a voice tag is assigned to a Character, the voice files "
"that are associated with it, can be muted or played in the preference screen."
msgstr ""
"**ボイスタグ** ボイスタグを Character に指定して、そのキャラクターに関連する"
"ボイスファイルを設定画面でミュートやテスト再生可能にできます。"

#: ../../source/inc/character:41
msgid "`voice_tag`"
msgstr "`voice_tag`"

#: ../../source/inc/character:40
msgid ""
"A String that enables the voice file associated with the Character to be "
"muted or played in the 'voice' channel."
msgstr ""
"そのキャラクターに関連付けするボイスファイルを `voice` チャンネルでミュートに"
"したり再生可能にするのに使用する文字列です。"

#: ../../source/inc/character:43
msgid ""
"**Prefixes and Suffixes.** These allow a prefix and suffix to be applied to "
"the name of the character, and to the text being shown. This can be used, "
"for example, to add quotes before and after each line of dialogue."
msgstr ""
"**接頭辞と接尾辞** これを使って、キャラクター名と表示されるテキストに、接頭辞"
"や接尾辞を適用できます。これは例えば会話文のそれぞれの行をクオートで囲むのに"
"使えます。"

#: ../../source/inc/character:50
msgid "`what_prefix`"
msgstr "`what_prefix`"

#: ../../source/inc/character:49
msgid ""
"A string that is prepended to the dialogue being spoken before it is shown."
msgstr "会話文が表示される前に前置される文字列です。"

#: ../../source/inc/character:54
msgid "`what_suffix`"
msgstr "`what_suffix`"

#: ../../source/inc/character:53
msgid ""
"A string that is appended to the dialogue being spoken before it is shown."
msgstr "会話文が表示される前に後置される文字列です。"

#: ../../source/inc/character:58
msgid "`who_prefix`"
msgstr "`who_prefix`"

#: ../../source/inc/character:57
msgid ""
"A string that is prepended to the name of the character before it is shown."
msgstr "表示される前にキャラクター名に前置される文字列です。"

#: ../../source/inc/character:62
msgid "`who_suffix`"
msgstr "`who_suffix`"

#: ../../source/inc/character:61
msgid ""
"A string that is appended to the name of the character before it is shown."
msgstr "表示される前にキャラクター名に後置される文字列です。"

#: ../../source/inc/character:64
msgid ""
"**Changing Name Display.** These options help to control the display of the "
"name."
msgstr ""
"**名前表示の変更** このオプションは名前の表示を制御するのに役立ちます。"

#: ../../source/inc/character:74
msgid "`dynamic`"
msgstr "`dynamic`"

#: ../../source/inc/character:68
msgid ""
"If true, then `name` should either be a string containing a Python "
"expression, a function, or a callable object. If it's a string, That string "
"will be evaluated before each line of dialogue, and the result used as the "
"name of the character. Otherwise, the function or callable object will be "
"called with no arguments before each line of dialogue, and the return value "
"of the call will be used as the name of the character."
msgstr ""
"True なら、 `name` は Python 式を含む文字列または関数、呼び出し可能なオブジェ"
"クトでなければなりません。文字列なら台詞のそれぞれの行の前にその文字列が評価"
"され、その結果がキャラクター名として使われます。そうでなければ関数または呼び"
"出し可能なオブジェクトが台詞のそれぞれの行の前に引数なしで呼び出され、返り値"
"がキャラクター名として使用されます。"

#: ../../source/inc/character:76
msgid ""
"**Controlling Interactions.** These options control if the dialogue is "
"displayed, if an interaction occurs, and the mode that is entered upon "
"display."
msgstr ""
"**インタラクションの制御** これらのオプションは、台詞が表示されるか、インタラ"
"クションが行われるか、そして入ったモードが表示されるかを制御します。"

#: ../../source/inc/character:83
msgid "`condition`"
msgstr "`condition`"

#: ../../source/inc/character:81
msgid ""
"If given, this should be a string containing a Python expression. If the "
"expression is false, the dialogue does not occur, as if the say statement "
"did not happen."
msgstr ""
"指定するなら Python 式を含む文字列でなければなりません。この式が False なら、"
"say ステートメントがなかったかのように、台詞は現れません。"

#: ../../source/inc/character:88
msgid "`interact`"
msgstr "`interact`"

#: ../../source/inc/character:86
msgid ""
"If true, the default, an interaction occurs whenever the dialogue is shown. "
"If false, an interaction will not occur, and additional elements can be "
"added to the screen."
msgstr ""
"デフォルトでは True で、台詞が表示される度にインタラクションが行われます。 "
"False の場合は、インタラクションを行わずにスクリーンに要素を追加できます。"

#: ../../source/inc/character:95
msgid "`advance`"
msgstr "`advance`"

#: ../../source/inc/character:91
msgid ""
"If true, the default, the player can click to advance through the statement, "
"and other means of advancing (such as skip and auto-forward mode) will also "
"work. If false, the player will be unable to move past the say statement "
"unless an alternate means (such as a jump hyperlink or screen) is provided."
msgstr ""
"デフォルトは True で、クリックしてのステートメントの読み進めや、 (スキップや"
"オートモードのような)他の進行も同様にできます。 False なら(ハイパーリンクへの"
"ジャンプやスクリーンのような)代替方法を除いて say ステートメントを通過できま"
"せん。"

#: ../../source/inc/character:100
msgid "`callback`"
msgstr "`callback`"

#: ../../source/inc/character:98
msgid ""
"A function that is called when events occur while the character is speaking. "
"See the section on :ref:`character-callbacks` for more information."
msgstr ""
"キャラクターが話している時に発生するイベントによって呼び出される関数です。詳"
"細は :ref:`character-callbacks` のセクションを参照してください。"

#: ../../source/inc/character:102
msgid ""
"**Click-to-continue.** A click-to-continue indicator is displayed once all "
"the text has finished displaying, to prompt the user to advance."
msgstr ""
"**Click-to-continue** ctc は、全てのテキストが表示された後、ユーザーに進行を"
"促すために表示される標識です。"

#: ../../source/inc/character:108
msgid "`ctc`"
msgstr "`ctc`"

#: ../../source/inc/character:107
msgid ""
"A displayable to use as the click-to-continue indicator, unless a more "
"specific indicator is used."
msgstr "特殊な標識が使われないときに ctc に使う Displayable です"

#: ../../source/inc/character:112
msgid "`ctc_pause`"
msgstr "`ctc_pause`"

#: ../../source/inc/character:111
msgid ""
"A displayable to use a the click-to-continue indicator when the display of "
"text is paused by the {p} or {w} text tags."
msgstr ""
"テキストの表示が {p} や {w} テキストタグで停止されているときに ctc に使う "
"Displayable です。"

#: ../../source/inc/character:118
msgid "`ctc_timedpause`"
msgstr "`ctc_timedpause`"

#: ../../source/inc/character:115
msgid ""
"A displayable to use a the click-to-continue indicator when the display of "
"text is paused by the {p=} or {w=} text tags. When None, this takes its "
"default from `ctc_pause`, use ``Null()`` when you want a `ctc_pause` but no "
"`ctc_timedpause`."
msgstr ""
"テキストの表示が {p=} や {w=} テキストタグで停止されたときに ctc に使う "
"Displayable です。None であれば、`ctc_pause` をデフォルトとするので、 "
"`ctc_pause` だけ使って `ctc_timedpause` は使わないときは、 ``Null()`` を使っ"
"てください。"

#: ../../source/inc/character:144
msgid "`ctc_position`"
msgstr "`ctc_position`"

#: ../../source/inc/character:121
msgid "Controls the location of the click-to-continue indicator. This can be:"
msgstr "ctc インジケータの位置を制御します。これは、次のいづれかです :"

#: ../../source/inc/character:126
msgid "\"nestled\""
msgstr "\"nestled\""

#: ../../source/inc/character:125
msgid ""
"The indicator is displayed as part of the text being shown, immediately "
"after the last character."
msgstr ""
"インジケータは、表示されるテキストの一部として、最後の文字の直後に表示されま"
"す。"

#: ../../source/inc/character:130
msgid "\"nestled-close\""
msgstr "\"nestled-close\""

#: ../../source/inc/character:129
msgid ""
"Similar to ``\"nestled\"``, but a break is not allowed between the text and "
"the CTC indicator."
msgstr ""
"``\"nestled\"`` と似ていますが、テキストと CTC インジケータの間に区切りが入り"
"ません。"

#: ../../source/inc/character:135
msgid "\"fixed\""
msgstr "\"fixed\""

#: ../../source/inc/character:133
msgid ""
"If a screen named \"ctc\" exists, it is shown. Otherwise, the CTC "
"displayable is show, and the position style properties of the CTC "
"displayable are used to position the CTC indicator."
msgstr ""
"\"ctc\" という名前の screen が存在する場合は、それが表示されます。そうでなけ"
"れば、 CTC displayable が表示され、CTC displayable の位置スタイル プロパ"
"ティーを使用して CTC インジケーターが配置されます。"

#: ../../source/inc/character:144
msgid "\"screen-variable\""
msgstr "\"screen-variable\""

#: ../../source/inc/character:138
msgid ""
"When given, the variable named \"ctc\" is set to the CTC displayable when "
"the CTC indicator should be show. This can be used with the following screen "
"language::"
msgstr ""
"これが指定されると、CTC インジケーターが表示されるときに、 \"ctc\" という名前"
"の変数が CTC displayable に設定されます。これは、次のスクリーン言語により使用"
"できます ::"

#: ../../source/inc/character:146
msgid ""
"**Screens.** The display of dialogue uses a :ref:`screen <screens>`. These "
"arguments allow you to select that screen, and to provide arguments to it."
msgstr ""
"**スクリーン** 台詞の表示には :ref:`スクリーン <screens>` を使います。以下の"
"引数により、スクリーンの選択、及びスクリーンへの引数の受け渡しができます。"

#: ../../source/inc/character:151
msgid "`screen`"
msgstr "`screen`"

#: ../../source/inc/character:151
msgid "The name of the screen that is used to display the dialogue."
msgstr "台詞を表示するのに使われるスクリーンの名前です。"

#: ../../source/inc/character:157
msgid "`retain`"
msgstr "`retain`"

#: ../../source/inc/character:154
msgid ""
"If not true, an unused tag is generated for each line of dialogue, and the "
"screens are shown non-transiently. Call :func:`renpy.clear_retain` to remove "
"all retained screens. This is almost always used with :doc:`bubble`."
msgstr ""
"True でなければ、台詞の各行に対して使われていないタグが生成されてそのスクリー"
"ンの表示が保持されます。 :func:`renpy.clear_retain` を呼び出すと、保持されて"
"いるスクリーンをすべて削除できます。これはほとんどの場合 :doc:`bubble` と共に"
"使用されます。"

#: ../../source/inc/character:159
msgid ""
"Keyword arguments beginning with ``show_`` have the prefix stripped off, and "
"are passed to the screen as arguments. For example, the value of "
"``show_myflag`` will become the value of the ``myflag`` variable in the "
"screen. (The ``myflag`` variable isn't used by default, but can be used by a "
"custom say screen.)"
msgstr ""
"``show_`` で始まるキーワード引数は、接頭辞を取り除かれ、スクリーンに引数とし"
"て渡されます。例えば、 ``show_myflag`` の値はスクリーンの ``myflag`` 変数の値"
"になります (myflag 変数はデフォルトでは使われませんが、カスタマイズされた "
"say スクリーンで使用可能です)。"

#: ../../source/inc/character:165
msgid "One show variable is, for historical reasons, handled by Ren'Py itself:"
msgstr ""
"一つの show 変数が、歴史的な理由のため、 Ren'Py 自身によって扱われます。 :"

#: ../../source/inc/character:169
msgid "`show_layer`"
msgstr "`show_layer`"

#: ../../source/inc/character:168
msgid ""
"If given, this should be a string giving the name of the layer to show the "
"say screen on."
msgstr ""
"必要に応じて say スクリーンを表示するレイヤーの名前の文字列を指定します。"

#: ../../source/inc/character:171
msgid ""
"**Styling Text and Windows.** Keyword arguments beginning with ``who_``, "
"``what_``, and ``window_`` have their prefix stripped, and are used to :doc:"
"`style <style>` the character name, the spoken text, and the window "
"containing both, respectively."
msgstr ""
"**テキストとウィンドウのスタイル** ``who_``, ``what_``, および ``window_`` で"
"始まるキーワード引数は、接頭辞を剥ぎ取られ、それぞれキャラクター名、会話テキ"
"スト、その両方を含むウィンドウの :doc:`スタイル <style>` になります。"

#: ../../source/inc/character:177
msgid ""
"For example, if a character is given the keyword argument ``who_color="
"\"#c8ffc8\"``, the color of the character's name is changed, in this case to "
"green. ``window_background=\"frame.png\"`` sets the background of the window "
"containing this character's dialogue."
msgstr ""
"例えば、キャラクターがキーワード引数 ``who_color=\"#c8ffc8\"`` を与えられる"
"と、キャラクター名の色が変わり、この場合は緑になります。 ``window_background="
"\"frame.png\"`` で、キャラクターの台詞を含むウィンドウの背景を設定します。"

#: ../../source/inc/character:183
msgid ""
"The style applied to the character name, spoken text, and window can also be "
"set this way, using the ``who_style``, ``what_style``, and ``window_style`` "
"arguments, respectively."
msgstr ""
"``who_style``, ``what_style`` , および ``window_style`` 引数を使う方法でも、"
"それぞれキャラクター名、台詞、ウィンドウに適用されるスタイルを設定できます。"

#: ../../source/inc/character:187
msgid ""
"Setting :var:`config.character_id_prefixes` makes it possible to style other "
"displayables as well. For example, when the default GUI is used, styles "
"prefixed with ``namebox_`` are used to style the name of the speaking "
"character."
msgstr ""
":var:`config.character_id_prefixes` の設定により他の displayable もまとめてス"
"タイルを設定できます。例えば、デフォルト GUI が使用されると、スタイル接頭辞 "
"``namebox_`` を使用して話者の名前欄のスタイルが設定できます。"

#: ../../source/dialogue.rst:92
msgid "Say with Image Attributes"
msgstr "画像属性を伴う say"

#: ../../source/dialogue.rst:94
msgid ""
"When a character is defined with an associated image tag, say statement "
"involving that character may have image attributes placed between the "
"character name and the second string."
msgstr ""
"キャラクターが画像タグを伴って定義されたとき、そのキャラクターを含む say ス"
"テートメントのキャラクター名と2番目の文字列の間に画像属性を入れられます。"

#: ../../source/dialogue.rst:98
msgid ""
"In this form, if an image with the given tag is showing, Ren'Py will issue a "
"show command involving the character tag and the attributes. If the image is "
"not shown, Ren'Py will store the attributes for use by side images, but will "
"not show an image."
msgstr ""
"この形式では、与えられたタグの画像が表示されていれば、Ren'Py はそのキャラク"
"ターのタグと属性を含む show コマンドを発します。その画像が表示されていなけれ"
"ば、Ren'Py はその画像属性をサイドイメージで使うためにプールしますが、画像の表"
"示はしません。"

#: ../../source/dialogue.rst:103 ../../source/dialogue.rst:131
#: ../../source/dialogue.rst:235 ../../source/dialogue.rst:293
msgid "For example::"
msgstr "例 ::"

#: ../../source/dialogue.rst:114
msgid "is equivalent to::"
msgstr "これは以下と等しいです。 ::"

#: ../../source/dialogue.rst:126
msgid ""
"In the above example, the ``concerned`` and ``happy`` replace one another. "
"But it is possible to revert to a ``happy``\\ -less eileen without "
"specifying the ``concerned`` attribute. An attribute name prepended with the "
"minus sign ( - ) has that effect, just as it does with the :ref:`show "
"statement <show-statement>`."
msgstr ""
"上記の例では ``concerned`` と ``happy`` が互いを置き換えています。しかし "
"``concerened`` 属性 を指定しなくとも ``happy`` でない eileen に戻せます。マイ"
"ナス記号 (-) で始まる属性名が :ref:`show ステートメント <show-statement>` と"
"同様にその作用をもちます。"

#: ../../source/dialogue.rst:144
msgid ""
"When an @ is included in the list of attributes, any element placed after it "
"has an only temporary effect, and is reverted at the end of the line of "
"dialogue."
msgstr ""
"画像属性のリストに@が含まれていると、@で始まる属性の変更は一時的で、台詞の最"
"後の行で以前表示していた画像に戻ります。"

#: ../../source/dialogue.rst:147
msgid "For example, the following code is equivalent to the previous example::"
msgstr "例えば、次のコードは以前の例と等しいです。 ::"

#: ../../source/dialogue.rst:160
msgid ""
"A single line can combine permanent changes coming before the @, and "
"temporary ones coming after. ::"
msgstr ""
"2つのシンタックスは組み合わせられ、@の前に永続的な変更を、後に一時的な変更を"
"続けます。 ::"

#: ../../source/dialogue.rst:165
msgid "The minus sign can also be used after the @ sign::"
msgstr "マイナス記号も @ 記号の後に使用出来ます。 ::"

#: ../../source/dialogue.rst:170
msgid ""
"To cause a transition to occur whenever the images are changed in this way, "
"set :var:`config.say_attribute_transition` to a transition. For more "
"control, use :var:`config.say_attribute_transition_callback`."
msgstr ""
"画像がこのように変更される度にトランジションを起こすには、:var:`config."
"say_attribute_transition` にトランジションを、さらに細かい制御をするには :"
"var:`config.say_attribute_transition_callback` を設定してください。"

#: ../../source/dialogue.rst:176
msgid "Example Characters"
msgstr "キャラクターの例"

#: ../../source/dialogue.rst:178
msgid "Here are a few example characters::"
msgstr "キャラクターの例をいくつか挙げます::"

#: ../../source/dialogue.rst:187
msgid "Special Characters"
msgstr "特殊なキャラクター"

#: ../../source/dialogue.rst:189
msgid ""
"A few character names are defined by default, and are used automatically in "
"certain situations. Intentionally redefining these characters can change the "
"behavior of Ren'Py, but accidentally using them can be a problem."
msgstr ""
"デフォルトでいくつかのキャラクター名が定義されていて、特定の状況で自動的に使"
"われます。これらのキャラクターを意図的に再定義すれば Ren'Py の振る舞いを変え"
"られますが、間違えて使ってしまうと問題になりえます。"

#: ../../source/dialogue.rst:197
msgid "``adv``"
msgstr "``adv``"

#: ../../source/dialogue.rst:195
msgid ""
"The default kind of character used by Character. This sets up a character "
"such that one line is displayed on the screen at a time."
msgstr ""
"Character によって使われるデフォルトのキャラクターの kind です。これは、画面"
"に一度に一行ずつ表示されるようなキャラクターを設定します。"

#: ../../source/dialogue.rst:202
msgid "``nvl``"
msgstr "``nvl``"

#: ../../source/dialogue.rst:200
msgid ""
"A kind of Character that causes dialogue to be displayed in :doc:`nvl_mode`, "
"with multiple lines of text on the screen at once."
msgstr ""
"台詞が :doc:`nvl_mode` で表示されるキャラクターの kind です。画面に一度に複数"
"行表示されます。"

#: ../../source/dialogue.rst:206
msgid "``narrator``"
msgstr "``narrator``"

#: ../../source/dialogue.rst:205
msgid ""
"The character that's used to display narration, by say statements without a "
"character name."
msgstr ""
"キャラクター名の無い say ステートメントにより、ナレーションを表示するのに使わ"
"れるキャラクターです。"

#: ../../source/dialogue.rst:212
msgid "``name_only``"
msgstr "``name_only``"

#: ../../source/dialogue.rst:209
msgid ""
"A character that is used for dialogue in which the character name is given "
"as a string. This character is copied to a new character with the given "
"name, and then that new character is used to display the dialogue."
msgstr ""
"キャラクター名が文字列として指定されると台詞を表示するのに使われるキャラク"
"ターです。このキャラクターは指定された名前の新しいキャラクターにコピーされ、"
"その新しいキャラクターが台詞を表示するのに使われます。"

#: ../../source/dialogue.rst:216
msgid "``centered``"
msgstr "``centered``"

#: ../../source/dialogue.rst:215
msgid ""
"A character that causes what it says to be displayed centered, in the middle "
"of the screen, outside of any window."
msgstr "台詞をウィンドウの外、画面の中央に表示するキャラクターです。"

#: ../../source/dialogue.rst:221
msgid "``vcentered``"
msgstr "``vcentered``"

#: ../../source/dialogue.rst:219
msgid ""
"A character that causes what it says to be displayed centered in vertically "
"oriented text, in the middle of the screen, outside of any window."
msgstr "台詞を画面の中央、ウィンドウの外に縦書きで表示するキャラクターです。"

#: ../../source/dialogue.rst:233
msgid "``extend``"
msgstr "``extend``"

#: ../../source/dialogue.rst:226
msgid ""
"A character that causes the last character to speak to say a line of "
"dialogue consisting of the last line of dialogue spoken, \"{fast}\", and the "
"dialogue given to extend. This can be used to have the screen change over "
"the course of dialogue."
msgstr ""
"最後に台詞を話したキャラクターにその台詞の後に「 {fast} 」タグと extend に与"
"えられた台詞をつなげて構築された台詞を話させます。これを使用して台詞中に画面"
"を変化させられます。"

#: ../../source/dialogue.rst:231
msgid ""
"Extend is aware of NVL-mode and treats it correctly. Extend does not work "
"properly if the language preference changes between the initial say and the "
"extend."
msgstr ""
"extend は NVLモードを検知して適切に扱いますが、最初の say と extend の間で言"
"語設定が変更されると正しく動作しません。"

#: ../../source/dialogue.rst:257
msgid "Dialogue Window Management"
msgstr "テキストウィンドウの管理"

#: ../../source/dialogue.rst:259
msgid ""
"Ren'Py includes several statements that allow for management of the dialogue "
"window. As dialogue window is always shown during dialogue, these statements "
"control the presence or absence of the window during non-dialogue "
"interactions."
msgstr ""
"Ren'Py にはテキストウィンドウを管理するためのステートメントが含まれています。"
"台詞の間、ウィンドウは常に表示されますが、台詞がない間のウィンドウの表示・非"
"表示はこれらのステートメントによって制御できます。"

#: ../../source/dialogue.rst:268
msgid "``window show``"
msgstr "``window show``"

#: ../../source/dialogue.rst:265
msgid ""
"The window show statement causes the window to be shown. It takes as an "
"argument an optional transition, which is used to show the window. If the "
"transition is omitted, :var:`config.window_show_transition` is used."
msgstr ""
"window show ステートメントは、ウィンドウが表示されるようにします。このステー"
"トメントはオプションとして表示時のトランジションを引数に受け取ります。トラン"
"ジションが省略された場合は、 :var:`config.window_show_transition` が使われま"
"す。"

#: ../../source/dialogue.rst:274
msgid "``window hide``"
msgstr "``window hide``"

#: ../../source/dialogue.rst:271
msgid ""
"The window hide statement causes the window to be hidden. It takes as an "
"argument an optional transition, which is used to hide the window. If the "
"transition is omitted, :var:`config.window_hide_transition` is used."
msgstr ""
"window hide ステートメントは、ウィンドウが非表示になるようにします。このス"
"テートメントはオプションとして非表示時のトランジションを引数に受け取ります。"
"トランジションが省略された場合は、 :var:`config.window_hide_transition` が使"
"われます。"

#: ../../source/dialogue.rst:283
msgid "``window auto True``"
msgstr "``window auto True``"

#: ../../source/dialogue.rst:277
msgid ""
"This enables automatic management of the window. The window is shown before "
"statements listed in :var:`config.window_auto_show` – by default, say "
"statements. The window is hidden before statements listed in :var:`config."
"window_auto_hide` – by default, ``scene`` and ``call screen`` statements, "
"and ``menu`` statements without a caption."
msgstr ""
"これはウィンドウの自動管理を有効化させます。ウィンドウは :var:`config."
"window_auto_show` にリストアップされたステートメント (デフォルトでは say ス"
"テートメント) の前で表示され、 :var:`config.window_auto_hide` にリストアップ"
"されたステートメント (デフォルトでは ``scene``, ``call screen``, キャプション"
"のない ``menu`` ステートメント) の前で非表示となります。"

#: ../../source/dialogue.rst:283
msgid "Only statements are considered, not statement equivalent functions."
msgstr ""
"考慮されるのはステートメントのみで、ステートメントに相当する関数は考慮されま"
"せん。"

#: ../../source/dialogue.rst:287
msgid "``window auto False``"
msgstr "``window auto False``"

#: ../../source/dialogue.rst:286
msgid ""
"This disables automatic management of the window. The window is not shown or "
"hidden automatically."
msgstr ""
"これはウィンドウの自動管理を無効にします。ウィンドウは自動的には表示・非表示"
"されなくなります。"

#: ../../source/dialogue.rst:289
msgid ""
"The ``window auto`` statement uses :var:`config.window_show_transition` and :"
"var:`config.window_hide_transition` to show and hide the window, "
"respectively. ``window auto`` is cancelled by ``window show`` and ``window "
"hide``."
msgstr ""
"``window auto`` ステートメントは、ウィンドウの表示・非表示にそれぞれ :var:"
"`config.window_show_transition` と :var:`config.window_hide_transition` を使"
"います。 ``window auto`` は ``window show`` や ``window hide`` によって中断さ"
"れます。"

#: ../../source/dialogue.rst:321
msgid ""
"Dialogue window management is subject to the \"show empty window\" :func:"
"`Preference`. If the preference is disabled, the statements above have no "
"effect."
msgstr ""
"台詞ウィンドウの管理は :func:`Preference` の \"show empty window\" に影響され"
"ます。この設定が無効化されている時、上記のステートメントでは何も起こりませ"
"ん。"

#: ../../source/dialogue.rst:328
msgid "Say with Arguments"
msgstr "引数つきの say"

#: ../../source/dialogue.rst:330
msgid ""
"Additional arguments can be passed to the say statement by including them in "
"parenthesis after the say statement. For example, one can write::"
msgstr ""
"say ステートメント後に括弧で囲んで、追加の引数を say ステートメントに渡せま"
"す。"

#: ../../source/dialogue.rst:335
msgid ""
"Arguments to the say statement are first processed by :var:`config."
"say_arguments_callback`, if it is not None. If any remain, they are then "
"passed to the character, which treats them as if they were present when the "
"character was defined. So, the example above displays the dialogue in green. "
"The keyword `_with_none` will override the `with_none` attribute of the "
"character."
msgstr ""
"None が指定されなければ、 say ステートメントへの引数は最初に :var:`config."
"say_arguments_callback` によって処理されます。残りがあれば character に渡さ"
"れ、そのキャラクターが定義されたときに渡されたかのように扱います。 例えば、上"
"記の例は台詞を緑に表示します。特別なキーワードである `_with_node` はキャラク"
"ターの `with_none` 属性を上書きします。"

#: ../../source/dialogue.rst:341
msgid ""
"The `interact` parameter is a special case : when it was passed as False "
"when defining the Character, passing ``interact=True`` will not override "
"that, meaning no interaction will happen in that case."
msgstr ""
"`interact` パラメーターは特別です。 : その Character 定義時に False を渡す"
"と、 ``interact=True`` を渡しても上書きされないので、その場合インタラクション"
"が起こりません。"

#: ../../source/dialogue.rst:345
msgid ""
"Note that :var:`config.say_arguments_callback` will be called every time a "
"say statement executes, and not only when arguments are passed. It can be "
"useful to implement conditional overrides over characters' customizations. "
"For example::"
msgstr ""
":var:`config.say_arguments_callback` は引数に渡された時だけでなく say ステー"
"トメント実行のたびに呼び出されるので注意してください。キャラクターの設定を、"
"条件によって上書き出来するのに便利でしょう。例 ::"

#: ../../source/dialogue.rst:361
msgid "Monologue Mode"
msgstr "モノローグモード"

#: ../../source/dialogue.rst:363
msgid ""
"Some visual novels have extended narration, or multiple blocks of dialogue "
"from the same character. In these cases, typing the name of the character "
"and the quotes multiple times is somewhat redundant."
msgstr ""
"ビジュアルノベルでは、ナレーションや同じキャラクターの台詞が続くときがありま"
"す。これらの場合、キャラクター名とクオートを何度も入力するのは煩雑です。"

#: ../../source/dialogue.rst:367
msgid ""
"To cover these cases, Ren'Py supports monologue mode. When dialogue is "
"inside triple-quoted strings, Ren'Py will break the dialogue up into blocks "
"at blank lines. Each block is then used to create its own say statement. "
"Here's an example, with three blocks of narration followed by three lines of "
"dialogue::"
msgstr ""
"これらのケースのため、 Ren'Py  はモノローグモードをサポートします。台詞がトリ"
"プルクオートで囲まれると、 Ren'Py は空白表で台詞をブロックに分け、各ブロック"
"で say ステートメントを使用します。例として、三ブロックのナレーションに続い"
"て、三行の台詞が続きます。"

#: ../../source/dialogue.rst:390
msgid ""
"While additional clauses like arguments or attributes are allowed, they are "
"passed to each line in the monologue, which may be less useful."
msgstr ""
"引数や属性のような追加の節も可能ですが、モノローグの各ブロックに渡されてしま"
"うので、あまり有用ではありません。"

#: ../../source/dialogue.rst:393
msgid ""
"If you'd like to omit the spaces between the blocks, write ``rpy monologue "
"single`` at the top level of the file, before the first monologue line."
msgstr ""
"ブロック間のスペースを省略したいなら、モノローグ行の前のファイルの先頭に "
"``rpy monologue single`` と記述してください。"

#: ../../source/dialogue.rst:397
msgid ""
"If you'd like to disable this instead, and have all the lines you write "
"between triple quotes be displayed as a single message, conserving line "
"breaks, you can do it with ``rpy monologue none``."
msgstr ""
"これを無効にし、トリプルクォートで囲まれた行をすべて1つのメッセージとして表示"
"して改行を節約したい場合は、 ``rpy monologue none`` とすればよいです。"

#: ../../source/dialogue.rst:402
msgid "The ``character`` Store"
msgstr "``character`` Store"

#: ../../source/dialogue.rst:404
msgid "*Main article:* :ref:`named-stores`"
msgstr "*詳細:* :ref:`named-stores`"

#: ../../source/dialogue.rst:406
msgid ""
"The say statement will search the ``character`` named store before the "
"default store. If you want to have a character with the same name as a "
"variable in the default store, it can be defined using::"
msgstr ""
"say ステートメントはデフォルト store の前に ``character`` と名付けられた "
"store を探します。デフォルト store で変数名と同じキャラクターを使用したければ"
"以下のように定義できます。 ::"

#: ../../source/dialogue.rst:412
msgid ""
"This character can then be used alongside a variable in the default store::"
msgstr "このキャラクターはデフォルト store の変数と平行して使用可能です。::"

#: ../../source/dialogue.rst:423
msgid ""
"This is especially useful in order to manage variable information about a "
"character in a namespace without conflicting with the say statement::"
msgstr ""
"これは say ステートメントと衝突しないように、ある名前空間でキャラクターについ"
"ての変数の情報を管理するために便利です。"

#: ../../source/dialogue.rst:439
msgid "Alternative Presentations"
msgstr "代替の方法"

#: ../../source/dialogue.rst:441
msgid ":doc:`nvl_mode` : a mode that displays dialogue over the entire screen."
msgstr ":doc:`nvl_mode` : 台詞を画面一杯に表示するモードです。"

#: ../../source/dialogue.rst:443
msgid ""
":doc:`bubble` : a mode that displays dialogue in speech bubbles that can be "
"positioned interactively."
msgstr ":doc:`bubble` : 動的に配置される吹き出しに台詞を表示する方法です。"

#: ../../source/dialogue.rst:447
msgid "See Also"
msgstr "次も参照してください。"

#: ../../source/dialogue.rst:449
msgid ""
":doc:`statement_equivalents` : how to use most of the features described "
"here in a python context, although with some drawbacks and limitations."
msgstr ""
":doc:`statement_equivalents` : python の文脈でここで記述された機能の殆どを使"
"用する方法ですが、いくらかの欠点や制限があります。"

#: ../../source/dialogue.rst:452
msgid ""
":func:`renpy.last_say` : provides information about the last say statement."
msgstr ""
":func:`renpy.last_say` : 最後の say ステートメントに関する情報を提供します。"

#~ msgid ""
#~ "Controls the location of the click-to-continue indicator. If ``\"nestled"
#~ "\"``, the indicator is displayed as part of the text being shown, "
#~ "immediately after the last character. ``\"nestled-close\"`` is similar, "
#~ "except a break is not allowed between the text and the CTC indicator. If "
#~ "``\"fixed\"``, a new screen containing the CTC indicator is shown, and "
#~ "the position style properties of the CTC displayable are used to position "
#~ "the CTC indicator."
#~ msgstr ""
#~ "ctc の位置を制御します。 ``\"nestled\"`` の時、ctcは表示されるテキストの一"
#~ "部として、最後の文字の直後に表示されます。 ``\"nestled-close\"`` も同じで"
#~ "すが、最後の文字とctcとの間で改行を許可しません。 ``\"fixed\"`` の場合"
#~ "は、 ctc を含む新しいスクリーンが表示され、 ctc の位置プロパティーが ctc "
#~ "の配置に使用されます。"

#~ msgid "``window auto hide``, ``window auto show``"
#~ msgstr "``window auto hide``, ``window auto show``"

#~ msgid ""
#~ "These statements show or hide the window, with an optional transition, "
#~ "like ``window show`` or ``window hide`` do. However, unlike those "
#~ "statements, this keeps automatic management enabled."
#~ msgstr ""
#~ "これらのステートメントは ``window show`` や ``window hide`` がするように任"
#~ "意のトランジションでウィンドウを表示、非表示しますが、それらのステートメン"
#~ "トと違いこれらは自動的な管理は有効なままにします。"

#~ msgid "`mode`"
#~ msgstr "`mode`"

#~ msgid ""
#~ "A string giving the mode to enter when this character speaks. See the "
#~ "section on :ref:`modes <modes>` for more details."
#~ msgstr ""
#~ "このキャラクターがしゃべるときに入るモードの文字列です。詳しくは :ref:"
#~ "`modes <modes>` をご覧ください。"

#~ msgid ""
#~ "The ``define`` statement causes its expression to be evaluated, and "
#~ "assigned to the supplied name. If not inside an ``init`` block, the "
#~ "``define`` statement will automatically be run with init priority 0."
#~ msgstr ""
#~ "``define`` ステートメントはその単純式を評価し、指定された名前に代入しま"
#~ "す。  ``init`` ブロック内でなければ、 define ステートメントは自動的に優先"
#~ "度 0 の init 内で実行されます。"

#~ msgid "Python Equivalents"
#~ msgstr "Python で相当するもの"

#~ msgid "This may only make sense if you've read the :ref:`python` section."
#~ msgstr "これは  :ref:`python` の章を読んでいる場合のみ有意でしょう。"

#~ msgid ""
#~ "When the first parameter to a say statement is present and an expression, "
#~ "the say statement is equivalent to calling that expressing with the "
#~ "dialogue and an ``interact`` argument of True. For example::"
#~ msgstr ""
#~ "say ステートメントに最初のパラメーターが存在し、それが式であるとき、その "
#~ "say ステートメントはその式をその台詞と True の `interact` 引数で呼び出すの"
#~ "に相当します。 例 ::"

#~ msgid ""
#~ "A say with arguments sees the arguments passed to the function. For "
#~ "example::"
#~ msgstr "引数つきの say ステートメントは関数に渡された引数を見ます。例 ::"

#~ msgid "When e is a Character, this is further equivalent to::"
#~ msgstr "e がキャラクターであるとき、これはさらに以下と等しいです。 ::"

#~ msgid ""
#~ "But it's possible to use :var:`config.say_arguments_callback` or have "
#~ "``e`` wrap a character to do things differently."
#~ msgstr ""
#~ "しかし、 :var:`config.say_arguments_callback` の使用や `e` に様々なことを"
#~ "するキャラクターをラップさせられます。"

#~ msgid ""
#~ "Window management is performed by setting the :var:`_window` and :var:"
#~ "`_window_auto` variables, and by using the following two functions:"
#~ msgstr ""
#~ "ウィンドウマネージャーは :var:`_window` と :var:`_window_auto` 変数の設定"
#~ "と以下の2つの関数によって処理されます。 :"

#~ msgid "The Python equivalent of the ``window hide`` statement."
#~ msgstr "\"window hide\"  ステートメントの Python 式です。"

#~ msgid "`trans`"
#~ msgstr "`trans`"

#~ msgid ""
#~ "If False, the default window hide transition is used. If None, no "
#~ "transition is used. Otherwise, the specified transition is used."
#~ msgstr ""
#~ "False なら、デフォルトのウィンドウ非表示のトランジションが使用されます。 "
#~ "None ならトランジションは使用されません。 それ以外なら指定したトランジショ"
#~ "ンが使用されます。"

#~ msgid "`auto`"
#~ msgstr "`auto`"

#~ msgid ""
#~ "If True, this becomes the equivalent of the ``window auto hide`` statment."
#~ msgstr "True なら、 \"window auto hide\"  ステートメントの Python 式です。"

#~ msgid "The Python equivalent of the ``window show`` statement."
#~ msgstr "\"window show\" ステートメントの Python 式です。"

#~ msgid ""
#~ "If False, the default window show transition is used. If None, no "
#~ "transition is used. Otherwise, the specified transition is used."
#~ msgstr ""
#~ "False なら、デフォルトのウィンドウ表示のトランジションが使用されます。 "
#~ "None ならトランジションは使用されません。 それ以外なら指定したトランジショ"
#~ "ンが使用されます。"

#~ msgid ""
#~ "If True, this becomes the equivalent of the ``window auto show`` statment."
#~ msgstr "True なら、 \"window auto show\" ステートメントの Python 式です。"

#~ msgid "Extend is aware of NVL-mode and treats it correctly."
#~ msgstr "extend は NVL モードを検知し、正常に動作します。"

#~ msgid ""
#~ "Some useful ``show_`` variables implemented by the default screens are:"
#~ msgstr ""
#~ "便利な ``show_`` 変数がデフォルトのスクリーンによって定義されています:"

#~ msgid "`show_side_image`"
#~ msgstr "`show_side_image`"

#~ msgid ""
#~ "When given a Displayable, shows that displayable when the dialogue is "
#~ "shown. The position of that displayable is controlled by its position "
#~ "properties. This is often used to show an image of the speaking character "
#~ "to the side of the dialogue."
#~ msgstr ""
#~ "Displayable が与えられると、台詞が表示されるときにその displayable が表示"
#~ "されます。displayable の位置は、位置プロパティーで制御されます。これは主"
#~ "に、しゃべっているキャラクターを台詞の横に表示するのに使われます。"

#~ msgid "`show_two_window`"
#~ msgstr "`show_two_window`"

#~ msgid ""
#~ "If true, restructures the layout so that the name of the character is "
#~ "placed in one window, and the dialogue text in a second window."
#~ msgstr ""
#~ "True なら、レイアウトの構成を変更し、キャラクター名が一つのウィンドウに、"
#~ "台詞がもう一つのウィンドウに表示されるようにします。"

#~ msgid "For example, the code::"
#~ msgstr "例えば、このコード::"

#~ msgid ""
#~ "A String that enables the voice file assosiated with the Character to be "
#~ "muted or played in the 'voice' channel."
#~ msgstr ""
#~ "キャラクターに関連付けられたボイスファイルを `voice` チャンネルでミュート"
#~ "にするか再生可能にする文字列です。"

#~ msgid ""
#~ "The final form consists of a string and a with clause which has a "
#~ "transition. In this case, the string is shown and a screen is shaked at "
#~ "the same time."
#~ msgstr ""
#~ "最後の形式は文字列とトランジション付きの with 節で出来ており、文字列の表示"
#~ "とスクリーンの揺れが同時に起こります。"
