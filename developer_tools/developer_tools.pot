# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-25 18:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/developer_tools.rst:5
msgid "Developer Tools"
msgstr ""

#: ../../source/developer_tools.rst:7
msgid "Ren'Py includes a number of features to make a developer's life easier. Many of them need the variable :var:`config.developer` to be set to True to operate."
msgstr ""

#: ../../source/developer_tools.rst:11
msgid "Shift+O Console"
msgstr ""

#: ../../source/developer_tools.rst:13
msgid "The debug console makes it possible to interactively run Ren'Py script and Python statements, and immediately see the results. The console is available in developer mode or when :var:`config.console` is True, and can be accessed by pressing Shift+O."
msgstr ""

#: ../../source/developer_tools.rst:18
msgid "The console can be used to:"
msgstr ""

#: ../../source/developer_tools.rst:20
msgid "Jump to a label."
msgstr ""

#: ../../source/developer_tools.rst:21
msgid "Interactively try out Ren'Py script statements."
msgstr ""

#: ../../source/developer_tools.rst:22
msgid "Evaluate a Python expression or statement to see the result."
msgstr ""

#: ../../source/developer_tools.rst:23
msgid "Trace Python expressions as the game progresses."
msgstr ""

#: ../../source/developer_tools.rst:26
msgid "Shift+E Editor Support"
msgstr ""

#: ../../source/developer_tools.rst:28
msgid "The :var:`config.editor` variable allows a developer to specify an editor command that is run when the launch_editor keypress (by default, Shift+E) occurs."
msgstr ""

#: ../../source/developer_tools.rst:32
msgid "Please see :ref:`Text Editor Integration <text-editor-integration>`."
msgstr ""

#: ../../source/developer_tools.rst:35
msgid "Shift+D Developer Menu"
msgstr ""

#: ../../source/developer_tools.rst:37
msgid "When :var:`config.developer` is true, hitting Shift+D will display a developer menu that provides easy access to some of the features given below."
msgstr ""

#: ../../source/developer_tools.rst:41
msgid "Shift+R Reloading"
msgstr ""

#: ../../source/developer_tools.rst:43
msgid "When :var:`config.developer` is True, hitting Shift+R will save the current game, reload the game script, and reload the game. This will often place you at the last unchanged statement encountered before Shift+R was pressed."
msgstr ""

#: ../../source/developer_tools.rst:47
msgid "This allows the developer to make script changes with an external editor, and not have to exit and restart Ren'Py to see the effect of the changes."
msgstr ""

#: ../../source/developer_tools.rst:50
msgid "Note that game state, which includes variable values and scene lists, is preserved across the reload. This means that if one of those statements is changed, it is necessary to rollback and re-execute the statement to see its new effect."
msgstr ""

#: ../../source/developer_tools.rst:56
msgid "Shift+I Style Inspecting"
msgstr ""

#: ../../source/developer_tools.rst:58
msgid "When :var:`config.developer` is true, pressing Shift+I will cause style inspection to occur. This will display a list of displayables underneath the mouse. For each displayable, it will display the type, the style used, and the size it is being rendered at."
msgstr ""

#: ../../source/developer_tools.rst:64
msgid "Shift+Y Style Dumping"
msgstr ""

#: ../../source/developer_tools.rst:66
msgid "When :var:`config.developer` is True, pressing the `dump_styles` key (by default, Shift+Y), will write a description of every style Ren'Py knows about to the file \"styles.txt\". This description includes every property that is part of the style, the value of that property, and the style the property is inherited from."
msgstr ""

#: ../../source/developer_tools.rst:73
msgid "> Fast Skipping"
msgstr ""

#: ../../source/developer_tools.rst:75
msgid "When :var:`config.developer` or :var:`config.fast_skipping` is True, pressing the `fast_skip` key (by default, \">\") causes the the game to immediately skip to the next important interaction.  For this purpose, an important interaction is one that is not caused by a say statement, transition, or pause command. Usually, this means skipping to the next menu, but it will also stop when user-defined forms of interaction occur."
msgstr ""

#: ../../source/developer_tools.rst:85
msgid "Warping to a Line"
msgstr ""

#: ../../source/developer_tools.rst:87
msgid "Ren'Py supports warping to a line in the script, without the developer to play through the entire game to get there. While this warping technique has a number of warnings associated with it, it still may be useful in providing a live preview."
msgstr ""

#: ../../source/developer_tools.rst:92
msgid "To invoke warping, run Ren'Py with the ``--warp`` command-line argument followed by a filename:line combination, to specify where you would like to warp to. For example::"
msgstr ""

#: ../../source/developer_tools.rst:98
msgid "(Where `my_project` is the full path to the base directory of your project.)"
msgstr ""

#: ../../source/developer_tools.rst:100
msgid "When warping is invoked, Ren'Py does a number of things. It first finds all of the scene statements in the program. It then tries to find a path from the scene statements to every reachable statement in the game. It then picks the reachable statement closest to, but before or at, the given line. It works backwards from that statement to a scene statement, recording the path it took. Ren'Py then executes the scene statement and any show or hide statements found along that path. Finally, it transfers control to the found statement."
msgstr ""

#: ../../source/developer_tools.rst:108
msgid "There are a number of fairly major caveats to the warp feature. The first is that it only examines a single path, which means that while the path may be representative of some route of execution, it's possible that there may be a bug along some other route. In general, the path doesn't consider game logic, so it's also possible to have a path that isn't actually reachable. (This is only really a problem on control-heavy games, especially those that use a lot of Python."
msgstr ""

#: ../../source/developer_tools.rst:116
msgid "The biggest problem, though, is that Python is not executed before the statement that is warped to. This means that all variables will be uninitialized, which can lead to crashes when they are used. To overcome this, one can define a label ``after_warp``, which is called after a warp but before the warped-to statement executes. This label can set up variables in the program, and then return to the preview."
msgstr ""

#: ../../source/developer_tools.rst:123
msgid "The warp feature requires :var:`config.developer` to be True to operate."
msgstr ""

#: ../../source/developer_tools.rst:127
msgid "Debug Functions"
msgstr ""

#: ../../source/inc/debug:5
msgid "Returns a pair giving the filename and line number of the current statement."
msgstr ""

#: ../../source/inc/debug:10
msgid "If :var:`config.log` is not set, this does nothing. Otherwise, it opens the logfile (if not already open), formats the message to :var:`config.log_width` columns, and prints it to the logfile."
msgstr ""

#: ../../source/inc/debug:16
msgid "Stops watching the given Python expression."
msgstr ""

#: ../../source/inc/debug:20
msgid "This watches the given Python expression, by displaying it in the upper-right corner of the screen."
msgstr ""

