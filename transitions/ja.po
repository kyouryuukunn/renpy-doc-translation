# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 11:17+0900\n"
"PO-Revision-Date: 2024-07-27 01:25+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2015-03-29 05:43+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/transitions.rst:5
msgid "Transitions"
msgstr "トランジション"

#: ../../source/transitions.rst:7
msgid ""
"Transitions can be used as part of the :ref:`with statement <with-"
"statement>`, as well as in other parts of Ren'Py, to apply effects to "
"changes in the scene (or sometimes to turn a displayable into another). "
"Ren'Py comes with a small number of pre-defined transitions, which can be "
"given directly to the with statement. For example::"
msgstr ""
"トランジションは :ref:`with ステートメント <with-statement>` やその他のシーン"
"で使え、シーンの変化(または Displayable を変化させるなにか)に効果を適用しま"
"す。Ren'Py には定義済みのトランジションがあり、with ステートメントに直接指定"
"できます。例 ::"

#: ../../source/transitions.rst:17
msgid "Pre-Defined Transitions"
msgstr "定義済みのトランジション"

#: ../../source/transitions.rst:21
msgid ""
"Takes 0.5 seconds to dissolve from the old to the new screen. An instance of "
"the :func:`Dissolve` transition class."
msgstr ""
"0.5 秒かけて元の画面から新しい画面にディゾルブします。 :func:`Dissolve` トラ"
"ンジションクラスのインスタンスです。"

#: ../../source/transitions.rst:26
msgid ""
"Takes 0.5 seconds to fade to black, and then 0.5 seconds to fade to the new "
"screen. An instance of the :func:`Fade` transition class."
msgstr ""
"0.5 秒かけてフェードで暗転し、さらに 0.5 秒かけて新しい画面にフェードしま"
"す。 :func:`Fade` トランジションクラスのインスタンスです。"

#: ../../source/transitions.rst:31
msgid ""
"Pixellates the old scene for .5 seconds, and the new scene for another .5 "
"seconds. An instance of the :func:`Pixellate` transition class."
msgstr ""
"0.5 秒かけて元の画面をピクセレートアウトし、さらに 0.5 秒かけて新しい画面をピ"
"クセレートインします。:func:`Pixellate` トランジションクラスのインスタンスで"
"す。"

#: ../../source/transitions.rst:36
msgid ""
"Takes 0.5 seconds to the move images that have changed location to their new "
"locations. An instance of the :func:`MoveTransition` transition class."
msgstr ""
"0.5 秒かけて画像を新しい場所に移動します。 :func:`MoveTransition` トランジ"
"ションクラスのインスタンスです(訳注 タグが同じ画像の移動に使用します)。"

#: ../../source/transitions.rst:39
msgid ""
"Move transitions, and similar transitions like ease, can only be applied to "
"a single layer or all layers at once, using the :ref:`with statement <with-"
"statement>`. It will not work in other contexts such as :ref:`ATL "
"<displayable-atl-statement>`, :func:`ComposeTransition`, or other ways of "
"applying transitions."
msgstr ""
"Move トランジションや ease のような類似のトランジションは、 :ref:`with ステー"
"トメント <with-statement>` を使用して、1つのレイヤーまたはすべてのレイヤーに"
"一度にのみ適用できます。このトランジションは :ref:`ATL <displayable-atl-"
"statement>` や :func:`ComposeTransition` などの異なるトランジションの適用方法"
"をするコンテキストでは動作しません。"

#: ../../source/transitions.rst:47
msgid "Also: **moveinleft, moveintop, moveinbottom**"
msgstr "Also: **moveinleft, moveintop, moveinbottom**"

#: ../../source/transitions.rst:49
msgid ""
"These move entering images onto the screen from the appropriate side, taking "
"0.5 seconds to do so."
msgstr ""
"0.5 秒かけて画像を画面の対応する方向から進入させます(訳注 タグが同じ画像がす"
"でにあるとトランジションしません)。"

#: ../../source/transitions.rst:54
msgid "Also: **moveoutleft, moveouttop, moveoutbottom**"
msgstr "Also: **moveoutleft, moveouttop, moveoutbottom**"

#: ../../source/transitions.rst:56
msgid ""
"These move leaving images off the screen via the appropriate side, taking "
"0.5 seconds to do so."
msgstr "0.5 秒かけて画像を画面の対応する方向へ退出させます。"

#: ../../source/transitions.rst:61
msgid ""
"Also: **easeinright, easeinleft, easeintop, easeinbottom, easeoutright, "
"easeoutleft, easeouttop, easeoutbottom**"
msgstr ""
"Also: **easeinright, easeinleft, easeintop, easeinbottom, easeoutright, "
"easeoutleft, easeouttop, easeoutbottom**"

#: ../../source/transitions.rst:63
msgid ""
"These are similar to the move- family of transitions, except that they use a "
"cosine-based curve to slow down the start and end of the transition."
msgstr ""
"move- 類と同じですが、トランジションのはじめと終わりがコサインベースで遅くな"
"ります。"

#: ../../source/transitions.rst:68
msgid "This zooms in entering images, taking 0.5 seconds to do so."
msgstr "0.5 秒かけて画像をズームインで進入させます。"

#: ../../source/transitions.rst:72
msgid "This zooms out leaving images, taking 0.5 seconds to do so."
msgstr "0.5 秒かけて画像をズームアウトで退出させます。"

#: ../../source/transitions.rst:76
msgid ""
"This zooms in entering images and zooms out leaving images, taking 0.5 "
"seconds to do so."
msgstr ""
"0.5 秒かけて画像のズームアウトによる退出と別の画像のズームインによる進入を同"
"時に行います。"

#: ../../source/transitions.rst:81
msgid ""
"When invoked, this transition shakes the screen vertically for a quarter "
"second. Imitating and customizing this transition and :var:`hpunch` is best "
"done using :ref:`atl-transitions`."
msgstr ""
"呼び出されたとき、画面を 4 分の 1 秒間垂直に揺らすトランジションです。このト"
"ランジションと :var:`hpunch` を模倣してカスタマイズするには :ref:`atl-"
"transitions` の使用がベストです。"

#: ../../source/transitions.rst:87
msgid ""
"When invoked, this transition shakes the screen horizontally for a quarter "
"second."
msgstr "呼び出されたとき、画面を 4 分の 1 秒間水平に揺らすトランジションです。"

#: ../../source/transitions.rst:92
msgid ""
"Transitions the screen in a vertical blinds effect lasting 1 second. An "
"instance of the :func:`ImageDissolve` transition class."
msgstr ""
"画面に1秒間続く垂直ブラインド効果を与えるトランジションです。 :func:"
"`ImageDissolve` トランジションクラスのインスタンスです。"

#: ../../source/transitions.rst:97
msgid "Transitions the screen in a squares effect lasting 1 second."
msgstr "画面に1秒間続くスクエア効果を与えるトランジションです。"

#: ../../source/transitions.rst:101
msgid "Also: **wiperight, wipeup, wipedown**"
msgstr "Also: **wiperight, wipeup, wipedown**"

#: ../../source/transitions.rst:103
msgid ""
"Wipes the scene in the given direction. Instances of the :func:`CropMove` "
"transition class."
msgstr ""
"画面を指定の方向へワイプして更新します。 :func:`CropMove` トランジションクラ"
"スのインスタンスです。"

#: ../../source/transitions.rst:108
msgid "Also: **slideright, slideup, slidedown**"
msgstr "Also: **slideright, slideup, slidedown**"

#: ../../source/transitions.rst:110
msgid ""
"Slides the new scene in the given direction. Instances of the :func:"
"`CropMove` transition class."
msgstr ""
"新しい画面を指定の方向からスライドインします。 :func:`CropMove` トランジショ"
"ンクラスのインスタンスです。"

#: ../../source/transitions.rst:115
msgid "Also: **slideawayright, slideawayup, slideawaydown**"
msgstr "Also: **slideawayright, slideawayup, slideawaydown**"

#: ../../source/transitions.rst:117
msgid ""
"Slides the old scene in the given direction. Instances of the :func:"
"`CropMove` transition class."
msgstr ""
"古い画面を指定の方向へスライドアウトします。 :func:`CropMove` トランジション"
"クラスのインスタンスです。"

#: ../../source/transitions.rst:122
msgid "Also: **pushleft, pushup, pushdown**"
msgstr "Also: **pushleft, pushup, pushdown**"

#: ../../source/transitions.rst:124
msgid ""
"These use the new scene to slide the old scene out the named side. Instances "
"of the :func:`PushMove` transition class."
msgstr ""
"指定の方向に新しい画面で以前の画面を押し出します。 :func:`PushMove` トランジ"
"ションクラスのインスタンスです。"

#: ../../source/transitions.rst:129
msgid "Also: **irisout**"
msgstr "Also: **irisout**"

#: ../../source/transitions.rst:131
msgid ""
"Use a rectangular iris to display the new screen, or hide the old screen. "
"Instances of the :func:`CropMove` transition class."
msgstr ""
"新しい画面の表示や元の画面の非表示に矩形の絞りを使います。 :func:`CropMove` "
"トランジションクラスのインスタンスです。"

#: ../../source/transitions.rst:136
msgid "Transition Classes"
msgstr "トランジションクラス"

#: ../../source/transitions.rst:138
msgid ""
"Transition classes are functions that can be called to create new "
"transitions. These functions are parameterized, allowing entire families of "
"transitions to be created. Unlike what the term may imply, they are usually "
"not classes in the Python sense and should not be treated as such."
msgstr ""
"トランジションクラスは、新しいトランジションを作成するために呼び出される関数"
"です。これらの関数にパラメーターを渡して全てのトランジション群を作成できま"
"す。その単語から連想されるものとは異なり、それらは通常の python の意味でのク"
"ラスではなくそのようにあつかうべきではありません。"

#: ../../source/transitions.rst:143
msgid ""
"Calling transition classes can be done as part of the with statement. For "
"example::"
msgstr ""
"トランジションクラスの呼び出しは、with ステートメントの一部としてなされます。"
"例 ::"

#: ../../source/transitions.rst:149
msgid ""
"If the same transition class is used repeatedly, the :ref:`define statement "
"<define-statement>` can be used to assign the transition to a variable::"
msgstr ""
"同じトランジションクラスを何度も呼び出さなくて済むように、 :ref:`define ス"
"テートメント <define-statement>` を使って変数にトランジションを代入できま"
"す ::"

#: ../../source/transitions.rst:158
msgid ""
"The `time_warp` argument taken by many transition classes can be given built-"
"in warpers found in the ``_warper`` module, see :ref:`warpers <warpers>`."
msgstr ""
"`time_warp` 引数は多くのトランジションクラスで受け取られ、 ``_warper`` モ"
"ジュールにある組み込みのワーパーを指定できます。 :ref:`warpers <warpers>` を"
"参照してください。"

#: ../../source/transitions.rst:165
msgid "Transition Families"
msgstr "トランジション族"

#: ../../source/transitions.rst:167
msgid ""
"Transition families are functions that define a large family of related "
"transitions."
msgstr ""
"トランジション族は、大量の関連するトランジション族を定義する関数群です。"

#: ../../source/transitions.rst:176
msgid "Dict Transitions"
msgstr "辞書トランジション"

#: ../../source/transitions.rst:178
msgid ""
"In many places where Ren'Py takes a transition, it's possible to instead "
"specify a dictionary that maps layer names to this transition. When this is "
"the case, Ren'Py applies each transition to the appropriate layer."
msgstr ""
"Ren'Py がトランジションを受け取る様々な場所で、レイヤー名をこのトランジション"
"に対応付ける辞書を代わりに指定できます。この場合、 Ren'Py は対応するレイヤー"
"にそれぞれのトランジションを適用します。"

#: ../../source/transitions.rst:182
msgid ""
"When a dict is used, the pause that usually occurs when a transition takes "
"place does not occur. Instead, the statement taking the dictionary returns "
"immediately, and the transitions are scheduled to occur at the start of the "
"next interaction."
msgstr ""
"辞書が使用されると、通常行われるトランジション時のポーズは起きません。代わり"
"に辞書を受け取ったステートメントは即座に制御を返し、次のインタラクションの開"
"始時時に実行するようスケジュールされます。"

#: ../../source/transitions.rst:187
msgid ""
"This can be used with the master layer to cause transitions to occur while "
"dialogue is being shown on the screen. For example::"
msgstr ""
"これを使用して,台詞をスクリーンに表示したまま、マスターレイヤーにトランジショ"
"ンを実行できます。例えば ::"

#: ../../source/transitions.rst:198
msgid "The dissolve will take place while the text is displayed on the screen."
msgstr "ディゾルブ実行中テキストが表示され続けます。"

#: ../../source/transitions.rst:200
msgid ""
"Dict layer transitions can't be used every place a transition can be used, "
"only in places where applying transitions to a layer is possible. It can be "
"used with the :ref:`with-statement` and ``with`` cause of the :ref:`scene "
"<scene-statement>`, :ref:`show <show-statement>`, and :ref:`hide <hide-"
"statement>` statements. It can also be used with :func:`renpy."
"with_statement` and :func:`renpy.transition`, the :func:`Show` and :func:"
"`Hide` actions, and various config variables that take transitions. Dict "
"layer transitions *will not* work inside things that don't work with layers, "
"such as :ref:`atl`, :func:`ComposeTransition` and :func:`MultipleTransition`."
msgstr ""
"辞書トランジションはすべてのトランジションを指定できる場所で使用できるわけで"
"はなく、レイヤーへのトランジションが可能なシーンでのみ使用できます。 :ref:"
"`with-statement` や :ref:`scene <scene-statement>`, :ref:`show <show-"
"statement>`, :ref:`hide <hide-statement>` ステートメントの ``with`` 節でも使"
"用できます。 :func:`renpy.with_statement` と :func:`renpy.transition` の関数"
"や :func:`Show` , :func:`Hide` アクション、トランジションを受ける様々な設定変"
"数でも使用できます。辞書トランジションは :ref:`atl` や :func:`ComposeTransition` "
"と :func:`MultipleTransition` のようなレイヤーに対して動作しないものの内部で"
"は動作しないでしょう。"

#: ../../source/transitions.rst:210
msgid ""
"This can interact poorly with statements that cause a transition to occur "
"themselves, like the transitions caused by ``window auto``. That can often "
"be solved with a second dict transition that applies to a different layer. "
"For example, if you are seeing weird blinking when the dialogue window shows "
"and hides, consider changing :file:`options.rpy` to have::"
msgstr ""
"これは ``window auto`` で起きるトランジションのような、自身でトランジションを"
"起こす with ステートメントに良くない作用をするかもしれません。それには異なる"
"レイヤーには2つ目の辞書トランジションを適用して対処できます。例えば、もし台詞"
"ウィンドウの表示非表示時で唐突な点滅を目にするなら :file:`options.rpy` を次の"
"ように変更することを考えてください。 ::"

#: ../../source/transitions.rst:219
msgid ""
"This works because the dialogue window exists entirely on the screens layer."
msgstr "これは台詞ウィンドウがスクリーンレイヤーにあるために動作します。"

#: ../../source/transitions.rst:225
msgid "ATL Transitions"
msgstr "ATL トランジション"

#: ../../source/transitions.rst:227
msgid "*See also:* :ref:`atl`"
msgstr "*関連項目:* :ref:`atl`"

#: ../../source/transitions.rst:229
msgid ""
"It's possible to use an ATL transform to define a transition. These "
"transitions need to accept the `old_widget` and `new_widget` arguments, "
"which will receive displayables representing the screens that are "
"transitioned from and to, respectively."
msgstr ""
"ATL transform を使用してトランジションを定義できます。これらのトランジション"
"は、 `old_widget` 引数と `new_widget` 引数を受け取る必要があり、それぞれトラ"
"ンジション元とトランジション先の画面を表す displayable を受け取ります。"

#: ../../source/transitions.rst:234
msgid ""
"An ATL transition must set itself the :tpref:`delay` property to the number "
"of seconds the transition lasts for. It may use the :tpref:`events` property "
"to prevent the old displayable from receiving events. ::"
msgstr ""
"ATL トランジションは、自身の :tpref:`delay` プロパティーをトランジションの継"
"続時間 (秒数) に設定する必要があります。古い displayable がイベントを受け取ら"
"ないようにするために、 :tpref:`events` プロパティーを使用することがありま"
"す。 ::"

#: ../../source/transitions.rst:262
msgid "Python Transitions"
msgstr "Python トランジション"

#: ../../source/transitions.rst:264
msgid ""
"A Python callable may be used as a transition. For that, it must take two "
"keyword arguments described below, and return a displayable that performs "
"the transition effect - usually by delegating that to another transition. "
"The two keyword arguments are `old_widget`, which represents the old screen, "
"and `new_widget`, which represents the new screen."
msgstr ""
"Python の callable はトランジションとして使用できます。そのためには、以下で説"
"明する 2 つのキーワード引数を取り、トランジション効果を実行する displayable "
"を返す必要があります (通常はそれを別のトランジションに委任します)。キーワード"
"引数は、古い画面を表す `old_widget` と新しい画面を表す `new_widget` の 2 つで"
"す。"

#: ../../source/transitions.rst:270
msgid ""
"The displayable returned by the callable should have a ``delay`` attribute, "
"set to the number of seconds that the transition should run for."
msgstr ""
"呼び出し可能オブジェクトによって返される displayable は、トランジションを実行"
"する秒数に設定された ``delay`` 属性を持つ必要があります。"

#: ../../source/transitions.rst:273 ../../source/transitions.rst:302
msgid "For example::"
msgstr "例 ::"

#: ../../source/transitions.rst:282
msgid ""
"Accordingly, all kinds of transitions can be called and passed these two "
"keyword arguments, resulting in a displayable animating the transition "
"between the two passed displayables."
msgstr ""
"したがって、あらゆる種類のトランジションはこれら 2 つのキーワード引数を渡して"
"呼び出されると、渡された 2 つの displayable 間のトランジションをアニメーショ"
"ン化する displayable を返します。"

#: ../../source/transitions.rst:290
msgid "Automatic Transitions after Scene, Show, and Hide"
msgstr "Scene, Show, Hide 後の自動トランジション"

#: ../../source/transitions.rst:292
msgid ""
"Ren'Py can automatically show a transition after a series of scene, show, "
"and hide statements. This transition can be enabled by setting the :var:"
"`_scene_show_hide_transition` variable to the transition to be used."
msgstr ""
"Ren'Py は一連の scene, show, hide ステートメントの後に自動的にトランジション"
"を表示できます。このトランジションは使用するトランジションを :var:"
"`_scene_show_hide_transition` 変数に設定して有効化できます。"

#: ../../source/transitions.rst:296
msgid ""
"The transition will occur after one or more :ref:`scene <scene-statement>`, :"
"ref:`show <show-statement>`, and :ref:`hide <hide-statement>` statements, "
"provided the statement are not followed by a :ref:`with <with-statement>` "
"statement, or a transition caused by :ref:`dialogue-window-management`, like "
"the various ``window`` statements. It's also disabled when in a menu context."
msgstr ""
"このトランジションは :ref:`with <with-statement>` や ``window`` ステートメン"
"トのような :ref:`dialogue-window-management` により発生するトランジションが続"
"かない一つ以上の :ref:`scene <scene-statement>`, :ref:`show <show-"
"statement>`, :ref:`hide <hide-statement>` ステートメント後に起こります。メ"
"ニューコンテキストでは無効になります。"

#~ msgid ""
#~ "Returns a transition that uses a control displayable (almost always some "
#~ "sort of animated transform) to transition from one screen to another. The "
#~ "transform is evaluated. The new screen is used where the transform is "
#~ "opaque, and the old image is used when it is transparent."
#~ msgstr ""
#~ "制御用の displayable (たいていはATL transform をならべたもの) を使ってある"
#~ "スクリーンから別のスクリーンへトランジションするトランジションを返しま"
#~ "す。 transform は評価され、 transform が不透明な領域は新しい 画面が使わ"
#~ "れ、 transform が透明な領域は元の画面が使われます。"

#~ msgid "`control`"
#~ msgstr "`control`"

#~ msgid "The control transform."
#~ msgstr "制御用の displayable です。"

#~ msgid "`delay`"
#~ msgstr "`delay`"

#~ msgid "The time the transition takes, before ending."
#~ msgstr "トランジションが終了までにかける時間です。"

#~ msgid "`reverse`"
#~ msgstr "`reverse`"

#~ msgid ""
#~ "If true, the alpha channel is reversed. Opaque areas are taken from the "
#~ "old image, while transparent areas are taken from the new image."
#~ msgstr ""
#~ "True なら、アルファチャンネルが反転されます。不透明な領域は元の画像が使わ"
#~ "れ、透明な領域は新しい画像が使われます。"

#~ msgid "`mipmap`"
#~ msgstr "`mipmap`"

#~ msgid ""
#~ "When the dissolve will be scaled to less than half its natural size, this "
#~ "can be set to True. This will cause mipmaps to be generated, which will "
#~ "make the dissolve consume more GPU resources, but will reduce artifacts. "
#~ "See :propref:`mipmap` for more information."
#~ msgstr ""
#~ "ディゾルブが元のサイズの半分未満に縮小されると、これは True に設定されま"
#~ "す。これにより mipmap が生成され、ディゾルブはより多くの GPU リソースを消"
#~ "費するようになりますが歪みは減少します。詳細は :propref:`mipmap` を参照く"
#~ "ださい。"

#~ msgid ""
#~ "Returns a transition that composes up to three transitions. If not None, "
#~ "the `before` and `after` transitions are applied to the old and new "
#~ "scenes, respectively. These updated old and new scenes are then supplied "
#~ "to the `trans` transition."
#~ msgstr ""
#~ "3 つ以内のトランジションから構成される新しいトランジションを返します。 "
#~ "`before` と `after` トランジションは、None でなければ、元のシーンと新しい"
#~ "シーンにそれぞれ適用されます。更新されたこれらの元のシーンと新しいシーン"
#~ "が `trans` トランジションに提供されます。"

#~ msgid ""
#~ "Returns a transition that works by cropping a scene and positioning it on "
#~ "the screen. This can be used to implement a variety of effects, all of "
#~ "which involve changing rectangular slices of scenes."
#~ msgstr ""
#~ "シーンを切り抜いてスクリーンに配置するトランジションを返します。これは、"
#~ "シーンの矩形のスライスに関わる様々なエフェクトを実装するのに使えます。"

#~ msgid "`time`"
#~ msgstr "`time`"

#~ msgid "The time the transition takes."
#~ msgstr "トランジションにかける時間です。"

#~ msgid "`mode`"
#~ msgstr "`mode`"

#~ msgid ""
#~ "The name of the mode of the transition. There are three groups of modes: "
#~ "wipes, slides, and other. This can also be \"custom\", to allow a custom "
#~ "mode to be defined."
#~ msgstr ""
#~ "トランジションのモードの名前です。モードには三種類あります。ワイプ、スライ"
#~ "ド、その他です。カスタムモードを定義するために 「 custom 」 にもできます。"

#~ msgid ""
#~ "In a wipe, the image stays fixed, and more of it is revealed as the "
#~ "transition progresses. For example, in \"wiperight\", a wipe from left to "
#~ "right, first the left edge of the image is revealed at the left edge of "
#~ "the screen, then the center of the image, and finally the right side of "
#~ "the image at the right of the screen. Other supported wipes are \"wipeleft"
#~ "\", \"wipedown\", and \"wipeup\"."
#~ msgstr ""
#~ "ワイプでは、画像は固定されたままで、トランジションが進むにつれて見える領域"
#~ "が増えていきます。例えば、左から右へのワイプである 「 wiperight 」 では、"
#~ "まず画像の左端がスクリーンの左端に現れ、画像の中央が現れ、最後には画像の右"
#~ "端がスクリーンの右端に現れます。ワイプには、その他 「 wipeleft 」,"
#~ "「 wipedown 」, そして 「 wipeup 」 があります。"

#~ msgid ""
#~ "In a slide, the image moves. So in a \"slideright\", the right edge of "
#~ "the image starts at the left edge of the screen, and moves to the right "
#~ "as the transition progresses. Other slides are \"slideleft\", \"slidedown"
#~ "\", and \"slideup\"."
#~ msgstr ""
#~ "スライドでは、画像が動きます。ですから 「slideright」では、画像は右端がス"
#~ "クリーンの左端から現れ出し、トランジションが進むにつれて右に進みます。スラ"
#~ "イドには、その他 「slideleft」、「slidedown」, そして 「slideup」 がありま"
#~ "す。"

#~ msgid ""
#~ "There are also slideaways, in which the old image moves on top of the new "
#~ "image. Slideaways include \"slideawayright\", \"slideawayleft\", "
#~ "\"slideawayup\", and \"slideawaydown\"."
#~ msgstr ""
#~ "スライドアウェイは、元の画像が新しい画像の上を動きます。スライドアウェイに"
#~ "は、「slideawayright」, 「slideawayleft」, 「slideawayup」, そして "
#~ "「slideawaydown」 があります。"

#~ msgid ""
#~ "We also support a rectangular iris in with \"irisin\" and a rectangular "
#~ "iris out with \"irisout\"."
#~ msgstr ""
#~ "矩形の絞りを開く 「irisin」 と矩形の絞りを閉じる 「irisout」 もサポートし"
#~ "ています。"

#~ msgid ""
#~ "The following parameters are only respected if the mode is \"custom\". "
#~ "Positions are relative to the size of the screen, while the crops are "
#~ "relative to the size of the image. So a crop of (0.25, 0.0, 0.5, 1.0) "
#~ "takes the middle half of an image."
#~ msgstr ""
#~ "次のパラメーターは、モードが 「custom」 であるときのみ考慮されます。ポジ"
#~ "ションはスクリーンのサイズに対する割合で、クロップは画像のサイズに対する割"
#~ "合です。ですから、(0.25, 0.0, 0.5, 1.0) のクロップは画像の中半分を切り抜き"
#~ "ます。"

#~ msgid "`startcrop`"
#~ msgstr "`startcrop`"

#~ msgid ""
#~ "The starting rectangle that is cropped out of the top image. A 4-element "
#~ "tuple containing x, y, width, and height."
#~ msgstr ""
#~ "手前の画像から最初に切り抜かれる矩形です。x, y, width, そして height から"
#~ "なる 4 要素のタプルです。"

#~ msgid "`startpos`"
#~ msgstr "`startpos`"

#~ msgid ""
#~ "The starting place that the top image is drawn to the screen at, a 2-"
#~ "element tuple containing x and y."
#~ msgstr ""
#~ "手前の画像が最初に描画されるスクリーン上の場所です。x, y からなる 2 要素の"
#~ "タプルです。"

#~ msgid "`endcrop`"
#~ msgstr "`endcrop`"

#~ msgid ""
#~ "The ending rectangle that is cropped out of the top image. A 4-element "
#~ "tuple containing x, y, width, and height."
#~ msgstr ""
#~ "手前の画像から最後に切り抜かれる矩形です。x, y, width, そして height から"
#~ "なる 4 要素のタプルです。"

#~ msgid "`endpos`"
#~ msgstr "`endpos`"

#~ msgid ""
#~ "The ending place that the top image is drawn to the screen at, a 2-"
#~ "element tuple containing x and y."
#~ msgstr ""
#~ "手前の画像が最後に描画されるスクリーン上の場所です。x, y からなる 2 要素の"
#~ "タプルです。"

#~ msgid "`topnew`"
#~ msgstr "`topnew`"

#~ msgid ""
#~ "If true, the scene that is cropped and moved (and is on top of the other "
#~ "scene) is the new scene. If false, it is the old scene."
#~ msgstr ""
#~ "True なら、切り取られてたり動いたりするシーン (1番手前にシーンです) は新し"
#~ "いシーンです。 False なら、元のシーンです。"

#~ msgid ""
#~ "Returns a transition that dissolves from the old scene to the new scene."
#~ msgstr ""
#~ "元のシーンから新しいシーンにディゾルブするトランジションを返します。"

#~ msgid "The time the dissolve will take."
#~ msgstr "ディゾルブにかける時間です。"

#~ msgid "`time_warp`"
#~ msgstr "`time_warp`"

#~ msgid ""
#~ "A :ref:`function that adjusts the timeline <warpers>`. If not None, this "
#~ "should be a function that takes a fractional time between 0.0 and 1.0, "
#~ "and returns a number in the same range."
#~ msgstr ""
#~ ":ref:`タイムラインを調節する関数 <warpers>` です。 None または、0.0 から "
#~ "1.0 の間の小数の時間を引数に受け取り、同じ範囲の数を返す関数を指定します。"

#~ msgid ""
#~ "Returns a transition that takes `out_time` seconds to fade to a screen "
#~ "filled with `color`, holds at that screen for `hold_time` seconds, and "
#~ "then takes `in_time` to fade to then new screen."
#~ msgstr ""
#~ "`out_time` 秒かけて `color` で満たされたスクリーンにフェードし、そのスク"
#~ "リーンを `hold_time` 秒保ち、それから `in_time` 秒かけて新しいスクリーンに"
#~ "フェードするトランジションを返します。"

#~ msgid ""
#~ "Returns a transition that dissolves the old scene into the new scene, "
#~ "using an image to control the dissolve process. This means that white "
#~ "pixels will dissolve in first, and black pixels will dissolve in last."
#~ msgstr ""
#~ "ディゾルブの過程を制御する画像を使い、元のシーンから新しいシーンにディゾル"
#~ "ブするトランジションを返します。この画像の白いビクセルに対応する部分が最初"
#~ "にディゾルブし、黒いピクセルに対応する部分が最後にディゾルブします。"

#~ msgid "`image`"
#~ msgstr "`image`"

#~ msgid ""
#~ "The control image. This can be any displayable. It should be the size of "
#~ "the scenes being dissolved, and if `reverse=True`, it should be fully "
#~ "opaque."
#~ msgstr ""
#~ "制御画像です。これはどのような Displayable でもよいですが、ディゾルブされ"
#~ "るシーンのサイズであるべきです。 `reverse=True` なら、完全に不透明でもある"
#~ "べきです。"

#~ msgid "`ramplen`"
#~ msgstr "`ramplen`"

#~ msgid ""
#~ "The length of the ramp to use. This must be an integer power of 2. When "
#~ "this is the default value of 8, when a white pixel is fully dissolved, a "
#~ "pixel 8 shades of gray darker will have completed one step of dissolving "
#~ "in."
#~ msgstr ""
#~ "使用する ramp の長さです。これは 2 の整数乗でなければなりません。これがデ"
#~ "フォルト値の 8 であるとき、白いピクセルが完全にディゾルブすると、一段階ご"
#~ "とに 8 シェード暗いピクセルのディゾルブインが進みます。"

#~ msgid "If True, black pixels will dissolve in before white pixels."
#~ msgstr ""
#~ "True なら、黒いピクセルの方が白いビクセルより先にディゾルブインします。"

#~ msgid ""
#~ "With these transitions, images changing position between the old and new "
#~ "scenes will be interpolated, which means their movement will be smooth "
#~ "instead of instantaneous."
#~ msgstr ""
#~ "これらのトランジションでは、古いシーンと新しいシーンの間で位置が変化する画"
#~ "像が補間されて、動きを瞬間的ではなくスムーズなものにします。"

#~ msgid ""
#~ "As only layers have tags, MoveTransitions can only be applied to a single "
#~ "layer or all layers at once, using the :ref:`with statement <with-"
#~ "statement>`. It will not work in other contexts such as :ref:`ATL "
#~ "<displayable-atl-statement>`, :func:`ComposeTransition`, or other ways of "
#~ "applying transitions."
#~ msgstr ""
#~ "タグを持つのはレイヤーのみなので、MoveTransitions は :ref:`with ステートメ"
#~ "ント <with-statement>` を使って一つのレイヤーまたはすべてのレイヤーに一度"
#~ "にしか適用できません。 :ref:`ATL <displayable-atl-statement>` や :func:"
#~ "`ComposeTransition` のように、異なる方法でトランジションを適用するコンテキ"
#~ "ストでは動作しません。"

#~ msgid "The time it takes for the interpolation to finish."
#~ msgstr "補間が終わるまでの時間です。"

#~ msgid "`old`"
#~ msgstr "`old`"

#~ msgid ""
#~ "If true, when a tag gets its image changed during the transition, the old "
#~ "image will be used in preference to the new one. Otherwise, the new "
#~ "images will be used."
#~ msgstr ""
#~ "True ならタグの画像がトランジション中に変更されたとき、新しい画像よりも古"
#~ "い画像が優先して使われます。そうでない場合は、新しい画像が使われます。"

#~ msgid "`layers`"
#~ msgstr "`layers`"

#~ msgid "A list of layers that moves are applied to."
#~ msgstr "トランジションが適用されるレイヤーのリストです。"

#~ msgid ""
#~ "The two following parameters take transforms, which should not be "
#~ "animated over time."
#~ msgstr ""
#~ "次の 2 つのパラメータは transform を取りますが、これは時間の経過とともにア"
#~ "ニメーションはされません。"

#~ msgid "`enter`"
#~ msgstr "`enter`"

#~ msgid ""
#~ "If not None, images entering the scene will also be moved. The transform "
#~ "will be applied to the image to get it in its starting position."
#~ msgstr ""
#~ "None でなければ、そのシーンに新しく挿入される画像も移動されます。 "
#~ "transform はその画像を開始位置に置くために適用されます。"

#~ msgid "`leave`"
#~ msgstr "`leave`"

#~ msgid ""
#~ "If not None, images leaving the scene will also be moved. The transform "
#~ "will be applied to the image to get it in its ending position."
#~ msgstr ""
#~ "None でなければ、そのシーンから消される画像も移動されます。 transform はそ"
#~ "の画像を終了位置に置くために適用されます。"

#~ msgid ""
#~ "The three following parameters take :ref:`time warp functions <warpers>`, "
#~ "which take a number between 0.0 and 1.0, and should return a number in "
#~ "the same range."
#~ msgstr ""
#~ "次の3つのパラメーターが :ref:`time warp 関数 <warpers>` を受け取ります。こ"
#~ "れは 0.0 から 1.0 までの数字を受け取り、同じ範囲の数字を返すべきです。"

#~ msgid ""
#~ "A time warp function that's applied to the images changing position "
#~ "between the old and new scenes."
#~ msgstr ""
#~ "以前のシーンから新しいシーン間の移動に適用されるタイムワープ関数です。"

#~ msgid "`enter_time_warp`"
#~ msgstr "`enter_time_warp`"

#~ msgid "A time warp function that's applied to images entering the scene."
#~ msgstr "新しく挿入される画像に適用されるタイムワープ関数です。"

#~ msgid "`leave_time_warp`"
#~ msgstr "`leave_time_warp`"

#~ msgid "A time warp function that's applied to images leaving the scene."
#~ msgstr "消える画像に適用されるタイムワープ関数です。"

#~ msgid ""
#~ "In the following code, \"a\" will be leaving the scene (using `leave` and "
#~ "`leave_time_warp`), \"b\" will be changing position (using `time_warp`), "
#~ "and \"c\" will be entering (using `enter` and `enter_time_warp`). Because "
#~ "the same tag is applied before and after, \"d\" will not be counted as "
#~ "entering or leaving, but as changing position."
#~ msgstr ""
#~ "次のコードでは、\"a\" はシーンを離れ (`leave` と `leave_time_warp` を使"
#~ "用)、\"b\" は位置を変更し (`time_warp` を使用)、\"c\" は (`enter` と "
#~ "`enter_time_warp` を使用して) 挿入されます。前後で同じタグが適用されるた"
#~ "め、「d」は入退出ではなく、位置の変化として考慮されます。"

#~ msgid ""
#~ "During the time when \"d\" is changing position, whether ugly or pretty "
#~ "eileen will be shown depends on the value of `old` : if `old` is False, "
#~ "the default, ugly_eileen will instantly turn into pretty_eileen and then "
#~ "move, and if `old` is True, ugly_eileen will move and then instantly turn "
#~ "into pretty_eileen."
#~ msgstr ""
#~ "\"d\" の位置が変わる間、 ugly eileen と pretty eileen のどちらが表示される"
#~ "かは `old` の値しだいです: `old` が False であるのがデフォルトの場合で、 "
#~ "ugly_eileen は即座に pretty_eileen に変わり、次に移動します。 `old` が "
#~ "True の場合、 ugly_eileen は移動してから即座に pretty_eileen に変わりま"
#~ "す。"

#~ msgid ""
#~ "Returns a transition that allows multiple transitions to be displayed, "
#~ "one after the other."
#~ msgstr "次々に複数のトランジションを実行できるトランジションを返します。"

#~ msgid "`args`"
#~ msgstr "`args`"

#~ msgid ""
#~ "A **list** containing an odd number of items. The first, third, and other "
#~ "odd-numbered items must be scenes, and the even items must be "
#~ "transitions. A scene can be one of:"
#~ msgstr ""
#~ "奇数個のアイテムが格納された *リスト* です。1番目、3番目、その他の奇数番目"
#~ "のアイテムにはシーンを、偶数番目のアイテムにはトランジションを指定します。"
#~ "シーンとして指定できるものは次の1つです。 :"

#~ msgid "A displayable."
#~ msgstr "displayable"

#~ msgid "False, to use the old scene."
#~ msgstr "False, トランジション前のシーンを表す"

#~ msgid "True, to use the new scene."
#~ msgstr "True, トランジション後のシーンを表す"

#~ msgid "Almost always, the first argument will be False and the last True."
#~ msgstr "ほぼ必ず最初の引数は False で最後の引数は True となります。"

#~ msgid ""
#~ "Note that this is a single parameter taking a list, this is not ``*args``."
#~ msgstr ""
#~ "これはリストを取る単一のパラメーターであり、 ``*args`` ではないことに注意"
#~ "してください。"

#~ msgid ""
#~ "The transitions in `args` are applied in order. For each transition, the "
#~ "old scene is the screen preceding it, and the new scene is the scene "
#~ "following it. For example::"
#~ msgstr ""
#~ "`args` 内のトランジションが順に適用されます。各トランジションは、その前に"
#~ "置かれたスクリーンから後に置かれたスクリーンにトランジションします。たとえ"
#~ "ば ::"

#~ msgid ""
#~ "This example will dissolve to logo.jpg, wait 1 second, and then dissolve "
#~ "to the new scene."
#~ msgstr ""
#~ "この例は、logo.jpg にディゾルブし、1 秒待ち、それから新しいシーンにディゾ"
#~ "ルブします。"

#~ msgid ""
#~ "Returns a transition that only displays the new screen for `delay` "
#~ "seconds. It can be useful as part of a MultipleTransition."
#~ msgstr ""
#~ "新しいスクリーンを `delay` 秒間表示するだけのトランジションを返します。"
#~ "MultipleTransition の一部にするのに便利です。"

#~ msgid ""
#~ "Returns a transition that pixellates out the old screen, and then "
#~ "pixellates in the new screen."
#~ msgstr ""
#~ "元のスクリーンをピクセレートアウトし、それから新しいスクリーンをピクセレー"
#~ "トインするトランジションを返します。"

#~ msgid "The total time the transition will take, in seconds."
#~ msgstr "トランジションにかける合計時間の秒数です。"

#~ msgid "`steps`"
#~ msgstr "`steps`"

#~ msgid ""
#~ "The number of steps that will occur, in each direction. Each step creates "
#~ "pixels about twice the size of those in the previous step, so a 5-step "
#~ "pixellation will create 32x32 pixels."
#~ msgstr ""
#~ "それぞれの方向に行われる段階の数です。各段階ごとに、一つ前の段階の 2 倍の"
#~ "ピクセルができます。よって、ピクセレートの 5 段階目では 32x32 のピクセルが"
#~ "できます。"

#~ msgid ""
#~ "Returns a transition that works by taking the new scene and using it to "
#~ "\"push\" the old scene off the screen."
#~ msgstr "新しいシーンで元のシーンを \"plush\" するトランジションを返します。"

#~ msgid ""
#~ "There are four possible modes: \"pushright\", \"pushleft\", \"pushup\", "
#~ "and \"pushdown\", which push the old scene off the screen in the "
#~ "direction indicated."
#~ msgstr ""
#~ "これらには 4 つのモード \"pushright\", \"pushleft\", \"pushup\", "
#~ "\"pushdown\" があり、指定された方向に以前のスクリーン押し出します。"

#~ msgid ""
#~ "A transitions that rotates the old scene 90 degrees around an axis, so "
#~ "that it is edge on with the viewer, switches to the new scene, and then "
#~ "rotates that scene another 90 degrees to show the new scene to the viewer."
#~ msgstr ""
#~ "以前のシーンを画面端の軸中心に90度回転してフェードアウトし、さらにもう90度"
#~ "回転して新しいシーンをフェードインします。"

#~ msgid "How long the transition should take."
#~ msgstr "トランジションにかける時間です。"

#~ msgid "`vertical`"
#~ msgstr "`vertical`"

#~ msgid ""
#~ "If true, the scene is rotate around the x-axis (pixels move vertically). "
#~ "If false, the scene is roated around the y axis, pixels moving "
#~ "horizontally."
#~ msgstr ""
#~ "True なら、シーンは x 軸中心に回転してピクセルは縦に動き、False なら、 y "
#~ "軸中心に回転してピクセルは水平に動きます。"

#~ msgid "When true, the rotation occurs in the reverse direction."
#~ msgstr "True なら回転は逆方向になります。"

#~ msgid "`background`"
#~ msgstr "`background`"

#~ msgid "A displayable that is placed behind the scene as it rotates."
#~ msgstr "シーンが回転している間背景となる displayable です。"

#~ msgid "`flatten`"
#~ msgstr "`flatten`"

#~ msgid ""
#~ "If true, the scenes are flattened into images the size of the screen "
#~ "before being rotated. Use this if images being not entirely on the screen "
#~ "causes undesired effects."
#~ msgstr ""
#~ "True なら、回転前にシーンは画面のサイズの画像に変換されます。画面に満たな"
#~ "い画像が望ましくない作用をするならこれを使用してください。"

#~ msgid ""
#~ "This defines a family of :class:`move transitions <MoveTransition>`, "
#~ "similar to the :var:`move` and :var:`ease` transitions. For a given "
#~ "`prefix`, this defines the transitions:"
#~ msgstr ""
#~ ":var:`move` や :var:`ease` トランジションのような、 :class:`move トランジ"
#~ "ション族 <MoveTransition>` を定義します。指定の `prefix` に対して、次のト"
#~ "ランジションを定義します :"

#~ msgid ""
#~ "*prefix* - A transition that takes `delay` seconds to move images that "
#~ "changed positions to their new locations."
#~ msgstr ""
#~ "*prefix* `delay` 秒かけて画像を新しい位置に動かすトランジションです。"

#~ msgid ""
#~ "*prefix*\\ inleft, *prefix*\\ inright, *prefix*\\ intop, *prefix*\\ "
#~ "inbottom - Transitions that take `delay` seconds to move images that "
#~ "changed positions to their new locations, with newly shown images coming "
#~ "in from the appropriate side."
#~ msgstr ""
#~ "*prefix*\\ inleft, *prefix*\\ inright, *prefix*\\ intop, *prefix*\\ "
#~ "inbottom - `delay` 時間かけて画像を新しい位置に動かすトランジションです。"
#~ "新しく表示される画像は適切な側から現れます。"

#~ msgid ""
#~ "*prefix*\\ outleft, *prefix*\\ outright, *prefix*\\ outtop, *prefix*\\ "
#~ "outbottom - Transitions that take `delay` seconds to move images that "
#~ "changed positions to their new locations, with newly hidden images "
#~ "leaving via the appropriate side."
#~ msgstr ""
#~ "*prefix*\\ outleft, *prefix*\\ outright, *prefix*\\ outtop, *prefix*\\ "
#~ "outbottom - `delay` 時間かけて画像を新しい位置に動かすトランジションです。"
#~ "新しく隠蔽される画像は適切な側へ消えます。"

#~ msgid "The other parameters are as :class:`MoveTransition` takes them:"
#~ msgstr ""
#~ "他のパラメーターは :class:`MoveTransition` が受け取るものと同様です。 :"

#~ msgid "`time_warp`, `in_time_warp`, `out_time_warp`"
#~ msgstr "`time_warp`, `in_time_warp`, `out_time_warp`"

#~ msgid ""
#~ ":ref:`Time warp functions <warpers>` that are given a time from 0.0 to "
#~ "1.0 representing the fraction of the move that is complete, and return a "
#~ "value in the same range giving the fraction of a linear move that is "
#~ "complete."
#~ msgstr ""
#~ ":ref:`タイムワープ関数 <warpers>` です。これらには移動が完了するまでの時間"
#~ "に対する割合を表す 0.0 から 1.0 の小数を与えられ、線形移動が完了するまでの"
#~ "距離に対する割合を表す同じ範囲の小数値を返します。"

#~ msgid ""
#~ "This can be used to define functions that ease the images around, rather "
#~ "than moving them at a constant speed."
#~ msgstr ""
#~ "これは、一定の速度では動かない画像を動かす関数を定義するのに使えます。"

#~ msgid ""
#~ "The three arguments are used for images remaining on the screen, newly "
#~ "shown images, and newly hidden images, respectively."
#~ msgstr ""
#~ "これら3つの引数は、スクリーンにある画像、新しく現れる画像、新しく消える画"
#~ "像に、それぞれ使われます。"

#~ msgid "The layers the transition will apply to."
#~ msgstr "トランジションが適用されるレイヤーです。"

#~ msgid ""
#~ "Pre-defined transitions can be given directly to the with statement. For "
#~ "example::"
#~ msgstr ""
#~ "定義済みのトランジションは、with ステートメントに直接指定できます。例 ::"

#~ msgid "and::"
#~ msgstr "次のようにすると :"

#~ msgid "See Also"
#~ msgstr "次も参照してください。"

#~ msgid ""
#~ ":ref:`atl-transitions`, :ref:`Transitions using Python <transitions-"
#~ "python>` : how to create transitions using the ATL system and Python, "
#~ "respectively"
#~ msgstr ""
#~ ":ref:`atl-transitions`, :ref:`Pythonを使用したトランジション <transitions-"
#~ "python>` : それぞれ ATL システムや Python を使用したトランジションの作成方"
#~ "法です。"

#~ msgid ""
#~ "Returns a transition that interpolates the position of images (with the "
#~ "same tag) in the old and new scenes."
#~ msgstr ""
#~ "( 同じタグを持つ ) 画像の以前の場面と新しい場面の座標を補間するトランジ"
#~ "ションを返します。"

#~ msgid ""
#~ "As only layers have tags, MoveTransitions can only be applied to a single "
#~ "layer or all layers at once, using the with statement. It will not work "
#~ "in other contexts, like ATL, :func:`ComposeTransition`, or other ways of "
#~ "applying transitions."
#~ msgstr ""
#~ "タグを持つのはレイヤーのみなので、 MoveTransitions は with ステートメント"
#~ "を使って一度に一つのレイヤーまたはすべてのレイヤーにしか適用できません。 "
#~ "ATL や :func:`ComposeTransition`, その他 transition 適用方法のように、トラ"
#~ "ンジションを適用する他のコンテキストでは動作しません。"

#~ msgid ""
#~ "Move transitions, and similar transitions like ease, can only be applied "
#~ "to one or all layers, not individual displayables."
#~ msgstr ""
#~ "move トランジション、および ease などの類似のトランジションは、1つまたはす"
#~ "べてのレイヤーにのみ適用でき、個々の Displayable には適用できません。"

#~ msgid "`alpha`"
#~ msgstr "`alpha`"

#~ msgid "Ignored."
#~ msgstr "無視されます。"

#~ msgid "If true, the old image will be used in preference to the new one."
#~ msgstr "True なら以前の画像が新しいものに優先して使用されます。"

#~ msgid ""
#~ "If true, the transitions to move the old displayables, rather than the "
#~ "new ones."
#~ msgstr ""
#~ "True なら、トランジションは新しい displayable の代わりに元の displayable "
#~ "を動かします。"

#~ msgid ""
#~ "If true, the image is composited with what's behind it. If false, the "
#~ "default, the image is opaque and overwrites what's behind it."
#~ msgstr ""
#~ "True であれば、画像は背後のものと合成されます。デフォルトの False であれ"
#~ "ば、画像は不透明で背後のものを上書きします。"

#~ msgid ""
#~ "If true, the dissolve will alpha-composite the result of the transition "
#~ "with the screen. If false, the result of the transition will replace the "
#~ "screen, which is more efficient."
#~ msgstr ""
#~ "True なら、ディゾルブはトランジションの結果をスクリーンとアルファ合成しま"
#~ "す。 False なら、トランジションの結果はスクリーンを置き換え、これはより効"
#~ "率的です。"

#~ msgid ""
#~ "A list containing an odd number of items. The first, third, and other odd-"
#~ "numbered items must be scenes, and the even items must be transitions. A "
#~ "scene can be one of:"
#~ msgstr ""
#~ "要素が奇数個あるリストです。1 番目、3 番目などの奇数番目の要素は場面でなく"
#~ "てはならず、偶数番目の要素はトランジションでなくてはなりません。場面は次の"
#~ "うちのいずれかです ::"
