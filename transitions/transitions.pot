# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-30 21:47+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/transitions.rst:8
msgid "Transitions"
msgstr ""

#: ../../source/transitions.rst:10
msgid "Transitions can be used as part of the :ref:`with statement <with-statement>`, as well as in other parts of Ren'Py, to apply effects to changes in the scene. Ren'Py comes with a small number of pre-defined transitions, which can be given directly to the with statement. It also includes transition classes, which can be used to create new transitions."
msgstr ""

#: ../../source/transitions.rst:18
msgid "Pre-Defined Transitions"
msgstr ""

#: ../../source/transitions.rst:20
msgid "Pre-defined transitions can be given directly to the with statement. For example::"
msgstr ""

#: ../../source/transitions.rst:28
msgid "Takes 0.5 seconds to fade to black, and then 0.5 seconds to fade to the new screen. An instance of the :func:`Fade` transition class."
msgstr ""

#: ../../source/transitions.rst:34
msgid "Takes 0.5 seconds to dissolve from the old to the new screen. An instance of the :func:`Dissolve` transition class."
msgstr ""

#: ../../source/transitions.rst:39
msgid "Pixellates the old scene for .5 seconds, and the new scene for another .5 seconds. An instance of the :func:`Pixellate` transition class."
msgstr ""

#: ../../source/transitions.rst:45
msgid "Takes 0.5 seconds to the move images that have changed location to their new locations. An instance of the :func:`MoveTransition` transition class."
msgstr ""

#: ../../source/transitions.rst:51
msgid "Also: **moveinleft, moveintop, moveinbottom**"
msgstr ""

#: ../../source/transitions.rst:53
msgid "These move entering images onto the screen from the appropriate side, taking 0.5 seconds to do so."
msgstr ""

#: ../../source/transitions.rst:58
msgid "Also: **moveoutleft, moveouttop, moveoutbottom**"
msgstr ""

#: ../../source/transitions.rst:60
msgid "These move leaving images off the screen via the appropriate side, taking 0.5 seconds to do so."
msgstr ""

#: ../../source/transitions.rst:65
msgid "Also: **easeinright, easeinleft, easeintop, easeinbottom, easeoutright, easeoutleft, easeouttop, easeoutbottom**"
msgstr ""

#: ../../source/transitions.rst:67
msgid "These are similar to the move- family of transitions, except that they use a cosine-based curve to slow down the start and end of the transition."
msgstr ""

#: ../../source/transitions.rst:73
msgid "This zooms in entering images, taking 0.5 seconds to do so."
msgstr ""

#: ../../source/transitions.rst:77
msgid "This zooms out leaving images, taking 0.5 seconds to do so."
msgstr ""

#: ../../source/transitions.rst:81
msgid "This zooms in entering images and zooms out leaving images, taking 0.5 seconds to do so."
msgstr ""

#: ../../source/transitions.rst:85
msgid "When invoked, this transition shakes the screen vertically for a quarter second."
msgstr ""

#: ../../source/transitions.rst:90
msgid "When invoked, this transition shakes the screen horizontally for a quarter second."
msgstr ""

#: ../../source/transitions.rst:95
msgid "Transitions the screen in a vertical blinds effect lasting 1 second. An instance of the :func:`ImageDissolve` transition class."
msgstr ""

#: ../../source/transitions.rst:100
msgid "Transitions the screen in a squares effect lasting 1 second."
msgstr ""

#: ../../source/transitions.rst:104
msgid "Also: **wiperight, wipeup, wipedown**"
msgstr ""

#: ../../source/transitions.rst:106
msgid "Wipes the scene in the given direction. Instances of the :func:`CropMove` transition class."
msgstr ""

#: ../../source/transitions.rst:111
msgid "Also: **slideright, slideup, slidedown**"
msgstr ""

#: ../../source/transitions.rst:113
msgid "Slides the new scene in the given direction. Instances of the :func:`CropMove` transition class."
msgstr ""

#: ../../source/transitions.rst:118
msgid "Also: **slideawayright, slideawayup, slideawaydown**"
msgstr ""

#: ../../source/transitions.rst:120
msgid "Slides the old scene in the given direction. Instances of the :func:`CropMove` transition class."
msgstr ""

#: ../../source/transitions.rst:125
msgid "Also: **pushleft, pushtop, pushbottom**"
msgstr ""

#: ../../source/transitions.rst:127
msgid "These use the new scene to slide the old scene out the named side. Instances of the :func:`PushMove` transition class."
msgstr ""

#: ../../source/transitions.rst:132
msgid "Also: **irisout**"
msgstr ""

#: ../../source/transitions.rst:134
msgid "Use a rectangular iris to display the new screen, or hide the old screen. Instances of the :func:`CropMove` transition class."
msgstr ""

#: ../../source/transitions.rst:138
msgid "Transition Classes"
msgstr ""

#: ../../source/transitions.rst:140
msgid "Transition classes are functions that can be called to create new transitions. These functions are parameterized, allowing entire families of transitions to be created."
msgstr ""

#: ../../source/transitions.rst:144
msgid "Calling transition classes can be done as part of the with statement. For example::"
msgstr ""

#: ../../source/transitions.rst:150
msgid "If we find ourselves calling the same transition class repeatedly, we can use the :ref:`define statement <define-statement>` to assign the transition to a variable::"
msgstr ""

#: ../../source/transitions.rst:164
msgid "Transition Families"
msgstr ""

#: ../../source/transitions.rst:166
msgid "Transition families are functions that define a large family of related transitions."
msgstr ""

#: ../../source/transitions.rst:175
msgid "Dict Transitions"
msgstr ""

#: ../../source/transitions.rst:177
msgid "In many places where Ren'Py takes a transition, it's possible to instead specify a dictionary that maps layer names to this transition. When this is the case, Ren'Py applies each transition to the appropriate layer."
msgstr ""

#: ../../source/transitions.rst:181
msgid "When a dict is used, the pause that usually occurs when a transition takes place does not occur. Instead, the statement taking the dictionary returns immediately, and the transitions are scheduled to occur at the start of the next interaction."
msgstr ""

#: ../../source/transitions.rst:186
msgid "This can be used with the master layer to cause transitions to occur while dialogue is being shown on the screen. For example, if we wrote::"
msgstr ""

#: ../../source/transitions.rst:191
msgid "and::"
msgstr ""

#: ../../source/transitions.rst:198
msgid "The dissolve will take place while the text is displayed on the screen."
msgstr ""

#: ../../source/transitions.rst:200
msgid "Dict layer transitions can't be used every place a transition can be used, only places where applying transitions to a layer is possible. It can be used with the ``with`` statement and ``with`` cause of the scene, show, and hide statements. It can also be used with :func:`renpy.with_statement` and :func:`renpy.transition`, the :func:`Show` and :func:`Hide` actions, and various config variables that take transitions. Dict layer transitions *will not* work inside things that don't work with layers, such as ATL, :func:`ComposeTransition` and :func:`MultipleTransition`."
msgstr ""

#: ../../source/transitions.rst:209
msgid "This can interact poorly with statements that cause a transition to occur themselves, like the transitions caused by ``window auto``. That can often be solved with a second dict transition that applies to a different layer. For example, if you are seeing weird blinking when the dialogue window shows and hides, consider changing options.rpy to have::"
msgstr ""

#: ../../source/transitions.rst:218
msgid "This works because the dialogue window exists entirely on the screens layer."
msgstr ""

