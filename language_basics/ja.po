# Japanese translation for renpy-doc
# Copyright (c) 2013 Rosetta Contributors and Canonical Ltd 2013
# This file is distributed under the same license as the renpy-doc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: renpy-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-14 23:54+0900\n"
"PO-Revision-Date: 2024-02-27 20:44+0900\n"
"Last-Translator: kyouryuukunn <akakyouryuu@gmail.com>\n"
"Language-Team: Japanese <ja@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2015-03-28 05:30+0000\n"
"X-Generator: Poedit 2.2.4\n"

#: ../../source/language_basics.rst:3
msgid "Language Basics"
msgstr "言語の基本"

#: ../../source/language_basics.rst:5
msgid ""
"Before we can describe the Ren'Py language, we must first describe the "
"structure of a Ren'Py script. This includes how files are broken into blocks "
"made up of lines, and how those lines are broken into the elements that make "
"up statements."
msgstr ""
"Ren'Py 言語について解説する前に、まず Ren'Py のスクリプトの構造を解説しなけれ"
"ばなりません。ここでは、行がブロックを構成し、ブロックがファイル全体を構成す"
"る仕組みや、行がステートメントを構成する要素の集まりであることについて説明し"
"ます。"

#: ../../source/language_basics.rst:11
msgid "Files"
msgstr "ファイル"

#: ../../source/language_basics.rst:13
msgid ""
"The script of a Ren'Py game is made up of all the files found under the :"
"file:`game/` directory ending with the :file:`.rpy` extension. Ren'Py will "
"consider each of these files (in the Unicode order of their paths), and will "
"use the contents of the files as the script."
msgstr ""
"Ren'Py ゲームのスクリプトは、game ディレクトリー以下の :file:`.rpy` 拡張子で"
"終わるファイルで構成されています。Ren'Py はそのようなファイルを (そのパスの "
"Unicode 順に) 考慮し、そのファイルの内容をスクリプトとして扱います。"

#: ../../source/language_basics.rst:18
msgid ""
"Generally, there's no difference between a script written in one big file "
"and a script broken into multiple files. Control can be transferred within "
"the script (including between files) by jumping to or calling a :doc:`label "
"<label>` in another file. This makes the division of a script up into files "
"a matter of personal style : some game creators prefer to have small files "
"(like one per event, or one per day), while others prefer to have one big "
"script."
msgstr ""
"基本的に複数ファイルに分割したスクリプトと単一の大きなファイルでできたスクリ"
"プトに違いはありません。 :doc:`label <label>` に対する jump や呼び出しにより"
"(ファイル間を含め)スクリプト内で制御を移動できます。これにより、自分のやり方"
"に合わせてスクリプトをファイルに分けられます。(イベントごとや、一日ごとの)小"
"さなファイルを好む人もいれば、大きなスクリプトを好む人もいるでしょう。"

#: ../../source/language_basics.rst:25
msgid ""
"To speed up loading time, Ren'Py will compile the :file:`.rpy` files into :"
"file:`.rpyc` files when it starts up. When a :file:`.rpy` file is changed, "
"the :file:`.rpyc` file will be updated when Ren'Py starts up. However, if a :"
"file:`.rpyc` file exists without a corresponding :file:`.rpy` file, the :"
"file:`.rpyc` file will be used. This can lead to problems if a :file:`.rpy` "
"file is deleted, or renamed, or moved, without deleting the :file:`.rpyc` "
"file : the script it contains will still get executed."
msgstr ""
"ロード時間を速くするために、Ren'Py は起動時に :file:`.rpy` ファイルを :file:"
"`.rpyc` ファイルにコンパイルします。 :file:`.rpy` ファイルが変更されると、 :"
"file:`.rpyc` ファイルは Ren'Py の起動時に更新されます。しかし、対応する :"
"file:`.rpy` がないような :file:`.rpyc` ファイルが存在すると、その :file:`."
"rpyc` ファイルが使われます。このため、 :file:`.rpy` ファイルが削除またはリ"
"ネームや移動されると :file:`.rpyc` ファイルも削除しないとそれが含めるスクリプ"
"トがまだ処理されるため問題が起こるかもしれません。"

#: ../../source/language_basics.rst:33
msgid ""
"Filenames must begin with a letter or number, but may not begin with \"00\", "
"as Ren'Py uses such files for its own purposes."
msgstr ""
"ファイル名は \"00\" 以外の数字または文字で始まる必要があります。\"00\" で始ま"
"るファイルは Ren'Py 自身が内部で使用しています。"

#: ../../source/language_basics.rst:37
msgid "Base Directory"
msgstr "ベースディレクトリー"

#: ../../source/language_basics.rst:39
msgid ""
"The base directory is the directory that contains all files that are "
"distributed with the game (even though not all the files in the base "
"directory are usually distributed). See also : :doc:`build`. Things like "
"README files should be placed in the base directory."
msgstr ""
"ベースディレクトリーはゲームで配布される全てのファイルがあるディレクトリーで"
"す ( 多分ゲームで配布されないファイルもいくつか含みます )。 :doc:`build` も参"
"照してください。README のようなファイルはベースディレクトリーに置かれるべきで"
"す。"

#: ../../source/language_basics.rst:44
msgid ""
"The base directory is created within the \"Projects Directory\", which can "
"be set in the Launcher, when you create a new game. For example, if your "
"Projects Directory is named :file:`renpygames`, and your game is named "
"\"HelloWorld\", your base directory will be :file:`renpygames/HelloWorld`."
msgstr ""
"ベースディレクトリーはゲーム作成時にランチャーで設定される \"Projects "
"Directory\" 内部に作成されます。例えば、プロジェクトディレクトリーが :file:"
"`renpygames` でゲーム名が「 HelloWorld 」なら、あなたのゲームのベースディレク"
"トリーは :file:`renpygames/HelloWorld` になるでしょう。"

#: ../../source/language_basics.rst:50
msgid "Game Directory"
msgstr "ゲームディレクトリー"

#: ../../source/language_basics.rst:52
msgid ""
"The game directory is a directory named \"game\" inside the base directory. "
"For example, if your base directory is :file:`renpygames/HelloWorld`, your "
"game directory will be :file:`renpygames/HelloWorld/game`."
msgstr ""
"ゲームディレクトリーは「 game 」と名付けられたベースディレクトリー下のディレ"
"クトリーです。例えばベースディレクトリーが :file:`renpygames/HelloWorld` の場"
"合、ゲームディレクトリーは :file:`renpygames/HelloWorld/game` です。"

#: ../../source/language_basics.rst:56
msgid ""
"The game directory contains all the files used by the game. It, including "
"all subdirectories, is scanned for :file:`.rpy` and :file:`.rpyc` files, and "
"those are combined to form the game script. It is scanned for :file:`.rpa` "
"archive files, and those are automatically used by the game. Finally, when "
"Ren'Py takes or considers a path to a file, the path is (with very few "
"exceptions) relative to the game directory (but note that :var:`config."
"searchpath` can change this)."
msgstr ""
"ゲームディレクトリーにはゲームで使用される全てのファイルが有ります。すべての"
"サブディレクトリーを含め、ゲームディレクトリーでは :file:`.rpy` と :file:`."
"rpyc` ファイルが検索され、ゲームスクリプトを構成します。 :file:`.rpa` アーカ"
"イブもゲームディレクトリーで検索され、自動的にゲームで使用されます。最後に "
"Ren'Py がファイルへのパスを受け取るまたは含めるときは、そのパスは (ごく僅かな"
"例外を除き) ゲームディレクトリーからの相対パスです(しかし :var:`config."
"searchpath` でこれは変更可能です)。"

#: ../../source/language_basics.rst:64
msgid "Comments"
msgstr "コメント"

#: ../../source/language_basics.rst:66
msgid ""
"A Ren'Py script file may contain comments. A comment begins with a hash mark "
"(``#``), and ends at the end of the line containing the comment. As an "
"exception, a comment may not be part of a string."
msgstr ""
"Ren'Py スクリプトファイルには、コメントを含められます。コメントは、ハッシュ記"
"号 (``#``) で始まり、コメントを含む行の終端で終わります。例のように、コメント"
"は文字列の一部にはできません。"

#: ../../source/language_basics.rst:77
msgid ""
"Ren'Py ignores comments, so the script is treated like the comment wasn't "
"there."
msgstr ""
"Ren'Py はコメントを無視するので、スクリプトはコメントが無いかのように扱われま"
"す。"

#: ../../source/language_basics.rst:82
msgid "Logical Lines"
msgstr "論理行"

#: ../../source/language_basics.rst:84
msgid ""
"A script file is broken up into :dfn:`logical lines`. A logical line always "
"begins at the start of a line in the file. A logical line ends at the end of "
"a line, unless:"
msgstr ""
"スクリプトは、 複数の :dfn:`論理行` に分けられます。論理行は必ずファイル内の"
"行の最初から始まります。論理行は、以下に当てはまらない限り、その行の最後で終"
"わります:"

#: ../../source/language_basics.rst:88
msgid "The last character on the line is a backslash (``\\``)."
msgstr "行がバックスラッシュ (``\\``) で終わるとき。"

#: ../../source/language_basics.rst:90
msgid ""
"The line contains an open parenthesis character (``(``, ``{``, or ``[``), "
"that hasn't been matched by the cooresponding closing parenthesis character "
"(\\ ``)``, ``}``, or ``]``, respectively)."
msgstr ""
"行に開き括弧文字 (``(``, ``{``, ``[``) があり、かつ対応する閉じ括弧文字 (それ"
"ぞれ \\ ``)``, ``}``, ``]``) がないとき。"

#: ../../source/language_basics.rst:94
msgid ""
"The end of the line occurs during a string - *any* string, even with single "
"quotes, as opposed to Python rules."
msgstr ""
"Python のルールとは異なり、シングルクオート含め *どのような文字列* であっても"
"文字列中で行の終わりが発生します。"

#: ../../source/language_basics.rst:97
msgid ""
"Once a logical line ends, the next logical line begins at the start of the "
"next line."
msgstr "論理行が終わると、次の行の初めから次の論理行が始まります。"

#: ../../source/language_basics.rst:100
msgid ""
"Most statements in the Ren'Py language consist of a single logical line."
msgstr "Ren'Py 言語のほとんどのステートメントは一つの論理行でできています。"

#: ../../source/language_basics.rst:112
msgid "Empty lines are ignored and do not count as logical lines."
msgstr "空の行は無視されて、論理行としてはカウントされません。"

#: ../../source/language_basics.rst:116
msgid "Indentation and Blocks"
msgstr "インデントとブロック"

#: ../../source/language_basics.rst:118
msgid ""
":dfn:`Indentation` is the name we give to the space at the start of each "
"logical line that's used to line up Ren'Py statements. In Ren'Py, "
"indentation must consist only of spaces."
msgstr ""
":dfn:`インデント` とは、各論理行の始めにある(*訳注 4つ連続の)スペースのこと"
"で、Ren'Py のステートメントを整列するのに使われます。Ren'Py では、インデント"
"にはスペースのみを使わなければなりません。"

#: ../../source/language_basics.rst:122
msgid ""
"Indentation is used to group statements into :dfn:`blocks`. A block is a "
"group of lines, and often a group of statements. The rules for dividing a "
"file into blocks are:"
msgstr ""
"インデントは、ステートメントを :dfn:`ブロック` にまとめるのに使われます。ブ"
"ロックは行のまとまりで、多くはステートメントのまとまりでもあります。ファイル"
"をブロックに分ける規則は:"

#: ../../source/language_basics.rst:126
msgid "A block is open at the start of a file."
msgstr "ファイルの先頭で、ブロックが一つ始まります。"

#: ../../source/language_basics.rst:128
msgid ""
"A new block is started whenever a logical line is indented past the previous "
"logical line."
msgstr "前の論理行より深くインデントされるごとに、新しいブロックが始まります。"

#: ../../source/language_basics.rst:131
msgid "All logical lines inside a block must have the same indentation."
msgstr "一つのブロック内のインデントは、すべて同じでなければなりません。"

#: ../../source/language_basics.rst:133
msgid ""
"A block ends when a non-empty logical line is encountered with less "
"indentation than the lines in the block."
msgstr ""
"ブロックは、ブロックの各行よりも少ないインデントの空ではない論理行があるとき"
"に終わります。"

#: ../../source/language_basics.rst:136
msgid ""
"Indentation is very important in Ren'Py, as it is in Python, and it can "
"cause syntax or logical errors when it's incorrect. At the same time, the "
"use of indentation to express the block structure is far simpler than other "
"languages using other delimiters."
msgstr ""
"Ren'Py では Python 同様インデントが非常に重要で、正しくないと構文または論理エ"
"ラーを起こします。同時に、インデントでブロック構造を伝えるので他の区切りを使"
"用する言語よりずっと簡単にできます。"

#: ../../source/language_basics.rst:157
msgid "Elements of Statements"
msgstr "ステートメントの要素"

#: ../../source/language_basics.rst:159
msgid "Ren'Py statements are made of a few basic parts."
msgstr "Ren'Py のステートメントは、いくつかの基本的な部品でできています。"

#: ../../source/language_basics.rst:163
msgid ":dfn:`Keyword`"
msgstr ":dfn:`予約語`"

#: ../../source/language_basics.rst:162
msgid ""
"A keyword is a word that must literally appear in the script of the game. "
"Keywords are typically used to introduce statements and properties."
msgstr ""
"予約語は、ソースコードに正確に書かなければならない単語です。予約語は主にス"
"テートメントやプロパティーを導入するのに使われます。"

#: ../../source/language_basics.rst:177
msgid ":dfn:`Name`"
msgstr ":dfn:`名前`"

#: ../../source/language_basics.rst:166
msgid ""
"A name begins with a letter or underscore, which is followed by zero or more "
"letters, numbers, and underscores. For our purpose, Unicode characters "
"between U+00a0 and U+fffd are considered to be letters."
msgstr ""
"名前は、文字またはアンダースコアで始まり、それにゼロ個以上の文字、数字、アン"
"ダースコアが続きます。ここでは、U+00a0 から U+fffd までの Unicode 文字が文字"
"とみなされます。"

#: ../../source/language_basics.rst:173
msgid ""
"Names beginning with a single underscore (_) are reserved for Ren'Py "
"internal use, unless otherwise documented."
msgstr ""
"アンダースコア(_)で始まる名前はドキュメントに記載がなければRen'Py内部で扱われ"
"ます。"

#: ../../source/language_basics.rst:176
msgid ""
"When a name begins with two underscores (__) but doesn't end with two "
"underscores, it is changed to a file-specific version of that name."
msgstr ""
"二つのアンダースコア(__)で始まるが、二つのアンダースコアで終わらない名前はそ"
"の名前のファイル特有のバージョンに変更されます。"

#: ../../source/language_basics.rst:188
msgid ":dfn:`Image Name`"
msgstr ":dfn:`画像名`"

#: ../../source/language_basics.rst:180
msgid ""
"An :dfn:`image name` consists of one or more components, separated by "
"spaces. The first component of the image name is called the :dfn:`image "
"tag`. The second and later components of the name are the :dfn:`image "
"attributes`. An image component consists of a string of letters, numbers, "
"and underscores."
msgstr ""
":dfn:`画像名` は、スペースで分けられた1つ以上の名前でできています。画像名を構"
"成する最初の部分を :dfn:`画像タグ` と言います。それ以降の部分は :dfn:`画像属"
"性` です。画像の要素はアルファベット、数字、アンダースコアで構成されます。"

#: ../../source/language_basics.rst:186
msgid ""
"For example, take the image name ``mary beach night happy``. The image tag "
"is ``mary``, while the image attributes are, ``beach``, ``night``, and "
"``happy``."
msgstr ""
"例えば、 ``mary beach night happy`` という画像名があるとします。この画像タグ"
"は ``mary`` で、画像属性は ``beach`` 、 ``night`` 、  ``happy`` です。"

#: ../../source/language_basics.rst:223 ../../source/language_basics.rst:297
msgid ":dfn:`String`"
msgstr ":dfn:`文字列`"

#: ../../source/language_basics.rst:191
msgid ""
"A string begins with a quote character (one of \", ', or \\`), contains some "
"sequence of characters, and ends with the same quote character."
msgstr ""
"クォート文字 (\", ', ` のいずれか) で始まる文字列は、文字の並びを含み、同じ"
"クォート文字で終わります。"

#: ../../source/language_basics.rst:194
msgid ""
"The backslash character (\\\\) is used to escape quotes, special characters "
"such as % (written as \\\\%), [ (written as \\\\[), and { (written as \\"
"\\{). It's also used to include newlines, using the \\\\n sequence."
msgstr ""
"バックスラッシュ文字 (\\\\) は、クォートや、特別な文字の% (\\\\% と書く) およ"
"び { (\\\\{ と書く) 等をエスケープするのに使います。また、\\\\n と並べて改行"
"を含めるのにも使います。"

#: ../../source/language_basics.rst:199
msgid ""
"Inside a Ren'Py string, consecutive sequences of whitespace and line breaks "
"are compressed into a single whitespace character, unless a space is "
"preceded by a backslash. ::"
msgstr ""
"Ren'Py の文字列中にある連続する空白と改行は、そのスペースにバックスラッシュを"
"前置しない限り、一つの空白文字にまとめられます::"

#: ../../source/language_basics.rst:212
msgid ""
"The ``r`` prefix is supported, and follow more or less the same rules as in "
"Python. Other prefixes, like ``u``, ``b`` or ``f``, are not supported. "
"Triple-quoted strings are generally not accepted in places where a normal "
"string is expected, and when they are, they usually yield a different result "
"- see :ref:`monologue-mode` for an example."
msgstr ""
"``r`` 接頭辞はサポートされており、多かれ少なかれ Python のルールに従います。 "
"``u``, ``b``, ``f`` のような他の接頭辞はサポートされません。トリプルクオート"
"の文字列は一般的には通常の文字列が期待されるところでは受け入れられず、通常異"
"なる結果になります。例の :ref:`monologue-mode` を参照してください。"

#: ../../source/language_basics.rst:220
msgid ""
"This applies to strings found *directly* in Ren'Py script, such as in :ref:"
"`say-statement` or :doc:`menus`. Strings found inside :ref:`python "
"statements <python-statement>`, or in expressions (see below), follow "
"ordinary Python rules."
msgstr ""
"これは :ref:`say-statement` や :doc:`menus` のような Ren'Py のスクリプトの *"
"ディレクトリー* にある文字列に適用されます。 :ref:`python ステートメント "
"<python-statement>` や(後述の)式にある文字列は通常の python のルールに従いま"
"す。"

#: ../../source/language_basics.rst:242
msgid ":dfn:`Simple Expression`"
msgstr ":dfn:`単純式`"

#: ../../source/language_basics.rst:226
msgid ""
"A simple expression is a Python expression, used to include Python in some "
"parts of the Ren'Py script. A simple expression begins with:"
msgstr ""
"単純式は Python 式で、Python を Ren'Py スクリプトの部品として含めるのに使いま"
"す。単純式は以下のもので始まります:"

#: ../../source/language_basics.rst:230
msgid "A name."
msgstr "名前"

#: ../../source/language_basics.rst:231
msgid "A string."
msgstr "文字列"

#: ../../source/language_basics.rst:232
msgid "A number."
msgstr "数"

#: ../../source/language_basics.rst:233
msgid "Any Python expression, in parenthesis."
msgstr "括弧内のあらゆる Python 式"

#: ../../source/language_basics.rst:235
msgid "This can be followed by any number of:"
msgstr "そしてこれらを任意の数だけ続けられます:"

#: ../../source/language_basics.rst:237
msgid "A dot followed by a name."
msgstr "ドットとそれに続く名前"

#: ../../source/language_basics.rst:238
msgid "A parenthesised Python expression."
msgstr "括弧内の Python 式。"

#: ../../source/language_basics.rst:240
msgid ""
"As an example, ``3``, ``(3 + 4)``, ``foo.bar``, and ``foo(42)`` are all "
"simple expressions. But ``3 + 4`` is not, as the expression ends at the end "
"of a string."
msgstr ""
"例えば、 ``3``, ``(3 + 4)``, ``foo.bar`` および ``foo(42)`` はすべて単純式で"
"す。しかし、文字列の終わりで式は途切れるので、 ``3 + 4`` は単純式ではありませ"
"ん。"

#: ../../source/language_basics.rst:248
msgid ":dfn:`Python Expression`"
msgstr ":dfn:`Python 式`"

#: ../../source/language_basics.rst:245
msgid ""
"A Python expression is an arbitrary Python expression, that may not include "
"a colon. These are used to express the conditions in the :ref:`if <if-"
"statement>` and :ref:`while <while-statement>` statements."
msgstr ""
"Python 式はコロンを含まない任意の Python の式です。これらは、 :ref:`if <if-"
"statement>` や :ref:`while <while-statement>` ステートメントの条件に使われま"
"す。"

#: ../../source/language_basics.rst:251
msgid "Common Statement Syntax"
msgstr "共通の構文"

#: ../../source/language_basics.rst:253
msgid ""
"Most Ren'Py statements share a common syntax. With the exception of the :ref:"
"`say-statement`, they begin with a keyword that introduces the statement. "
"This keyword is followed by a parameter, if the statement takes one."
msgstr ""
"ほとんどの Ren'Py ステートメントは構文が同じです。 :ref:`say-statement` を除"
"き、ステートメントを導入する予約語で始まります。ステートメントがパラメーター"
"を受け取るなら、予約語の次に続きます。"

#: ../../source/language_basics.rst:257
msgid ""
"The parameter is then followed by one or more properties. Properties may be "
"supplied in any order, provided each property is only supplied once. A "
"property starts off with a keyword. For most properties, the property name "
"is followed by one of the syntax elements given above."
msgstr ""
"パラメーターの後には、一つ以上のプロパティーが続きます。プロパティーは好きな"
"順序で与えられますが、それぞれのプロパティーは一度しか与えられません。プロパ"
"ティーは予約語で始まります。ほとんどのプロパティーでは、プロパティー名に上述"
"の構文要素を続けます。"

#: ../../source/language_basics.rst:262
msgid ""
"If the statement takes a block, the line ends with a colon (:). Otherwise, "
"the line just ends."
msgstr ""
"ブロックを受け取るステートメントでは、行はコロン (:) で終わります。そうでなけ"
"れば、行は普通に終わります。"

#: ../../source/language_basics.rst:269
msgid "Python Expression Syntax"
msgstr "Python 式の構文"

#: ../../source/language_basics.rst:273
msgid ""
"It may not be necessary to read this section thoroughly right now. Instead, "
"skip ahead, and if you find yourself unable to figure out an example, or "
"want to figure out how things actually work, you can go back and review this."
msgstr ""
"この節を今すぐ読み通す必要はないかもしれません。飛ばして先に進み、例を理解で"
"きなかったり、実際にどのように動いているかを理解したくなったりしたら、ここに"
"戻ってきて見直すことができます。"

#: ../../source/language_basics.rst:278
msgid ""
"Many portions of Ren'Py take Python expressions. For example, defining a new "
"Character involves a call to the :func:`Character` function. While Python "
"expressions are very powerful, only a fraction of that power is necessary to "
"write a basic Ren'Py game."
msgstr ""
"Ren'Py は多くの部分で Python 式を受け取ります。例えば、新しいキャラクターを定"
"義するときには、:func:`Character` 関数を呼び出しています。Python 式は非常に強"
"力ですが、普通の Ren'Py ゲームを書くのに必要なのはその力のほんの一部だけで"
"す。"

#: ../../source/language_basics.rst:283
msgid "Here's a synopsis of Python expressions."
msgstr "Python 式の概要はこちらです。"

#: ../../source/language_basics.rst:287
msgid ":dfn:`Integer`"
msgstr ":dfn:`整数`"

#: ../../source/language_basics.rst:286
msgid ""
"An integer is a number without a decimal point. ``3`` and ``42`` are "
"integers."
msgstr "整数は、小数点を持たない数です。3 や 42 は整数です。"

#: ../../source/language_basics.rst:291
msgid ":dfn:`Float`"
msgstr ":dfn:`浮動小数点数`"

#: ../../source/language_basics.rst:290
msgid ""
"A float (short for floating-point number) is a number with a decimal point. "
"``.5``, ``7.``, and ``9.0`` are all floats."
msgstr ""
"浮動小数点数は、小数点を持つ数です。 ``.5`` 、 ``7.`` 、 ``9.0`` はすべて浮動"
"小数点数です。"

#: ../../source/language_basics.rst:294
msgid ""
"Python strings begin with \" or ', and end with the same character. \\\\ is "
"used to escape the end character, and to introduce special characters like "
"newlines (\\\\n). Unlike Ren'Py strings, Python strings can't span several "
"lines, or be delimited with \\`."
msgstr ""
"Python 文字列は、\" または ' で始まり、同じ文字で終わります。終わりの文字をエ"
"スケープしたり、改行 (\\\\n) などの特殊文字を導入するのに \\\\ が使われま"
"す。 Ren'Py の文字列と違い、 Python の文字列は複数の行や \\` での区切りを跨げ"
"ません。"

#: ../../source/language_basics.rst:301
msgid ":dfn:`True, False, None`"
msgstr ":dfn:`True, False, None`"

#: ../../source/language_basics.rst:300
msgid ""
"There are three special values. ``True`` is a true value, ``False`` is a "
"false value. ``None`` represents the absence of a value."
msgstr ""
"特殊な値が 3 つあります。``True`` は真値、``False`` は偽値です。``None`` は値"
"がないことを表します。"

#: ../../source/language_basics.rst:317
msgid ":dfn:`Tuple`"
msgstr ":dfn:`タプル`"

#: ../../source/language_basics.rst:304
msgid ""
"Tuples are used to represent containers where the number of items is "
"important. For example, one might use a 2-tuple (also called a pair) to "
"represent width and height, or a 4-tuple (x, y, width, height) to represent "
"a rectangle."
msgstr ""
"タプルは、要素の数が重要なコンテナを表すのに使います。例えば、2-タプル (対と"
"も呼ばれます) で幅と高さを表したり、4-タプル (x, y, width, height) で長方形を"
"表したりできます。"

#: ../../source/language_basics.rst:309
msgid ""
"Tuples begin with a left-parenthesis ``(``, consist of zero or more comma-"
"separated Python expressions, and end with a right-parenthesis ``)``. As a "
"special case, the one-item tuple must have a comma following the item. For "
"example::"
msgstr ""
"タプルは左丸括弧 ``(`` で始まり、カンマで分けられたゼロ個以上の Python 式から"
"なり、右丸括弧 ``)`` で終わります。1-タプルは特殊で、要素の次にカンマを置かな"
"ければなりません。例 ::"

#: ../../source/language_basics.rst:327
msgid ":dfn:`List`"
msgstr ":dfn:`リスト`"

#: ../../source/language_basics.rst:320
msgid ""
"Lists are used to represent containers where the number of items may vary. A "
"list begins with a ``[``, contains a comma-separated list of expressions, "
"and ends with ``]``. For example::"
msgstr ""
"リストは、要素の数が変わるコンテナを表すのに使います。リストは ``[`` で始ま"
"り、カンマで分けられた一連の式を含み、 ``]`` で終わります。例 :"

#: ../../source/language_basics.rst:337
msgid ":dfn:`Variable`"
msgstr ":dfn:`変数`"

#: ../../source/language_basics.rst:330
msgid ""
"Python expressions can use variables, that store values defined using the :"
"ref:`define-statement` or the :ref:`default-statement`. A variable name "
"follows the rules of a :dfn:`name` as explained in :ref:`elements-of-"
"statements`. For example::"
msgstr ""
"Python 式では :ref:`define` ステートメントや :ref:`default-statement` を使っ"
"て定義された値を保存する変数を扱えます。変数名は :ref:`elements-of-"
"statements` で説明された通りに、 :dfn:`name` のルールに従います。例 ::"

#: ../../source/language_basics.rst:347
msgid ":dfn:`Field Access`"
msgstr ":dfn:`フィールドアクセス`"

#: ../../source/language_basics.rst:340
msgid ""
"Python modules and objects have fields, which can be accessed by following "
"an expression (usually a variable) with a dot and the field name. For "
"example::"
msgstr ""
"Python のモジュールとオブジェクトはフィールドを持ち、式にドットとフィールド名"
"を続けてアクセスできます。例えば:"

#: ../../source/language_basics.rst:346
msgid ""
"consists of a variable (config) followed by a field access (screen_width)."
msgstr ""
"は、変数  (config) にフィールドアクセス (screen_width) を続けています。"

#: ../../source/language_basics.rst:366
msgid ":dfn:`Call`"
msgstr ":dfn:`呼び出し`"

#: ../../source/language_basics.rst:350
msgid ""
"Python expressions can call a function which returns a value. They begin "
"with an expression (usually a variable), followed by a left-parenthesis, a "
"comma-separated list of arguments, and a right-parenthesis. The argument "
"list begins with the position arguments, which are Python expressions. These "
"are followed by keyword arguments, which consist of the argument name, an "
"equals sign, and an expression. In this example::"
msgstr ""
"Python の式は、値を返す関数を呼び出せます。式 (通常は変数) で始まり、括弧で括"
"られてカンマで分けられた引数リストが続きます。引数リストは、Python 式である位"
"置引数で始まります。その後に、「引数名=式」という形式のキーワード引数が続きま"
"す。例 ::"

#: ../../source/language_basics.rst:360
msgid ""
"we call the :func:`Character` function. It's given one positional argument, "
"the string \"Eileen\". It's given two keyword argument: ``type`` with the "
"value of the ``adv`` variable, and ``color`` with a string value of ``"
"\"#0f0\"``."
msgstr ""
":func:`Character` 関数を呼んでいます。1 つの位置引数、文字列 \"Eileen\" が指"
"定されています。2 つのキーワード引数、 ``type`` に値 ``adv`` が、 ``color`` "
"に文字列値 \"#0f0\" が与えられています。"

#: ../../source/language_basics.rst:365
msgid ""
"Other objects than functions can be called, and are widely known as :dfn:"
"`callables`."
msgstr ""
"関数以外のオブジェクトも呼び出せ、 :dfn:`callables` として広く知られていま"
"す。"

#: ../../source/language_basics.rst:368
msgid ""
"When reading this documentation, you might see a function signature like:"
msgstr "このドキュメントを読むときは、このような定義で関数を見てください。"

#: ../../source/language_basics.rst:373
msgid ""
"A sample function that doesn't actually exist in Ren'Py, but is used only in "
"documentation."
msgstr ""
"ドキュメントにのみ使われていて、Ren'Py には実在しないサンプル関数です。"

#: ../../source/language_basics.rst:376
msgid "This function:"
msgstr "この関数は:"

#: ../../source/language_basics.rst:378
msgid "Has the name \"Sample\""
msgstr "\"Sample\" という名前です。"

#: ../../source/language_basics.rst:379
msgid ""
"Has two positional parameters, a name and a delay. In a real function, the "
"types of these parameters would be made clear from the documentation."
msgstr ""
"2 つの位置パラメーター、name と delay を持ちます。実際の関数では、このパラ"
"メーターの意味はドキュメントで解説されます。"

#: ../../source/language_basics.rst:382
msgid ""
"Has one keyword argument, position, which has a default value of (0, 0)."
msgstr "1 つのキーワード引数 position を持ち、そのデフォルト値は (0, 0) です。"

#: ../../source/language_basics.rst:385
msgid ""
"Since the functions ends with ``**properties``, it means that it can take :"
"doc:`style properties <style_properties>` as additional keyword arguments. "
"Other special entries are ``*args``, which means that it takes an arbitrary "
"number of positional parameters, and ``**kwargs``, which means that it takes "
"a wide range of keyword parameters which are usually explained in the "
"function's documentation."
msgstr ""
"この関数は ``**properties`` で終わっているので、追加のキーワード引数として :"
"doc:`スタイルプロパティー <style_properties>` を受け取れます。その他の特別な"
"項目として、任意の数の位置パラメーターを受け取ることを表す ``*args`` や、通常"
"その関数のドキュメントで解説されている広い範囲のキーワード引数を受け取る "
"``**kwargs`` があります。"

#: ../../source/language_basics.rst:392
msgid ""
"When you see a ``/`` symbol on its own in a function signature, it means "
"that the parameters before it are positional-only, and should not be passed "
"by keyword. When you see a ``*`` symbol on its own, conversely, it means "
"that the parameters *after* it are keyword-only, which means that they "
"should only be passed using the ``name=value`` syntax."
msgstr ""
"関数の構文でみられる ``/`` シンボルはそれ以前のパラメーターは位置引数のみで"
"キーワード引数を渡すべきで無いことを意味しています。 ``*`` シンボルは逆に *そ"
"の後は* キーワード引数のみ、つまり ``name=value`` 構文でであることを表してい"
"ます。"

#: ../../source/language_basics.rst:398
msgid ""
"Python is a lot more powerful than we have space for in this manual. To "
"learn Python in more detail, we recommend starting with the Python tutorial, "
"which is available from `python.org <https://docs.python.org/tutorial/index."
"html>`__. While a deep knowledge of Python is not necessary to work with "
"Ren'Py, knowing the basics of Python statements and expressions is often "
"helpful."
msgstr ""
"Python はこのマニュアルで記述されているよりずっとパワフルです。 Python につい"
"てより詳しく学ぶなら、以下のサイトの Python tutorial を始めることを勧めま"
"す。 `python.org <https://docs.python.org/tutorial/index.html>`_ Ren'Py の使"
"用には Python の深い知識は必要ないと思われますが、Python ステートメントと式の"
"基本知識はしばしば有効です。"

#~ msgid ""
#~ "The words ``at``, ``as``, ``behind``, ``onlayer``, ``with``, and "
#~ "``zorder``, may not be used as parts of an image name."
#~ msgstr ""
#~ "``at``, ``as``, ``behind``, ``onlayer``, ``with``, ``zorder`` という単語は"
#~ "画像名として使用出来ません。"

#~ msgid "However, Ren'Py searches directories in the following order:"
#~ msgstr "その他に、Ren'Py は以下の順にディレクトリーを検索します。 :"

#~ msgid ""
#~ "The name of the executable, without the suffix. For example, if the "
#~ "executable is named moonlight.exe, it will look for a directory named "
#~ "moonlight under the base directory."
#~ msgstr ""
#~ "接尾辞を取り除いた実行可能ファイルの名前。例えば実行可能ファイルが "
#~ "moonlight.exe なら、ベースディレクトリー下の moonlight と名付けられたディ"
#~ "レクトリーを探します。"

#~ msgid ""
#~ "The name of the executable, without the suffix, and with a prefix ending "
#~ "with _ removed. For example, if the executable is moonlight_en.exe, "
#~ "Ren'Py will look for a directory named en."
#~ msgstr ""
#~ "実行可能ファイルから接尾辞と、 _ で終る接頭辞を取り除いた名前。例えば実行"
#~ "可能ファイルが moonlight_en.exe なら、 Ren'Py は en という名前のディレクト"
#~ "リーを探します。"

#~ msgid "The directories \"game\", \"data\", and \"launcher\", in that order."
#~ msgstr "順に「 game 」、「 data 」、「 launcher 」 ディレクトリー。"

#~ msgid ""
#~ "The launcher will only properly recognize the \"game\" and \"data\" "
#~ "directories, however."
#~ msgstr ""
#~ "ランチャーの場合は、「game」ディレクトリーと「data」ディレクトリーのみ適切"
#~ "に認識します。"

#~ msgid "The end of the line occurs during a string."
#~ msgstr "行の最後が文字列中にあるとき"

#~ msgid "Empty logical lines are ignored."
#~ msgstr "空の論理行は無視されます。"

#~ msgid ":dfn:`At List`"
#~ msgstr ":dfn:`式リスト`"

#~ msgid "An at list is a list of simple expressions, separated by commas."
#~ msgstr "式リストは、カンマで分けられた一連の単純式です。"

#~ msgid ""
#~ "Variables beginning with _ are reserved for Ren'Py's use, and shouldn't "
#~ "be used by creators."
#~ msgstr ""
#~ "_ で始まる変数は Ren'Py で使用するために予約されているので、ユーザーコード"
#~ "では使うべきではありません。"

#~ msgid ""
#~ "Constructors are a type of function which returns a new object, and are "
#~ "called the same way."
#~ msgstr ""
#~ "コンストラクタは新しいオブジェクトを返す関数の型で、同じように呼び出されま"
#~ "す。"

#~ msgid ""
#~ "Names begining with a single underscore (_) are reserved for Ren'Py "
#~ "internal use, unless otherwise documented. When a name begins with __ but "
#~ "doesn't end with __, it is changed to a file-specfic version of that name."
#~ msgstr ""
#~ "アンダースコア(_)で始まる名前はドキュメントに記載がなければRen'Py内部で扱"
#~ "われます。 __で始まり、__では終わらない名前はその名前のファイル特有のバー"
#~ "ジョンに変更されます。"

#~ msgid ""
#~ "Since the functions ends with \\*\\*properties, it means that it can "
#~ "take :ref:`style properties <style-properties>` as additional keyword "
#~ "arguments. Other special entries are \\*args, which means that it takes "
#~ "an arbitrary number of postional parameters, and \\*\\*kwargs, which "
#~ "means that the keyword arguments are described in the documentation."
#~ msgstr ""
#~ "この関数は \\*\\*properties で終わっているので、追加の引数として :ref:`ス"
#~ "タイルプロパティー <style-properties>` を取れます。その他の項目として、任"
#~ "意の数の位置引数を取ることを表す \\*args や、ドキュメントで解説されている"
#~ "キーワード引数を取る \\*\\*kwargs があります。"
