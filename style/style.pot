# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-18 23:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/style.rst:8
msgid "Styles"
msgstr ""

#: ../../source/style.rst:10
msgid "Styles allow the look of displayables to be customized. This is done by changing the value of style properties for displayables. For example, changing the :propref:`background` property allows the background of a window or button to be customized."
msgstr ""

#: ../../source/style.rst:15
msgid "Style properties consist of two parts, a prefix that specifies when the property is used, and the property itself. For example, a button's ``hover_background`` property is used when a button is focused, while its ``idle_background`` property is used when the button is unfocused. (Setting the ``background`` property sets the ``idle_background`` and ``hover_background``, among others.)"
msgstr ""

#: ../../source/style.rst:22
msgid "While Ren'Py has over 100 style properties, only a few properties are used in this section. Along with ``background``, we use ``color``, ``font``, ``outlines`` and ``size`` as style properties. For a full list of style properties, please read the :ref:`style properties <style-properties>` documentation."
msgstr ""

#: ../../source/style.rst:30
msgid "Using Styles and Style Inheritance"
msgstr ""

#: ../../source/style.rst:32
msgid "Each displayable has a style built-into it. When the displayable is created, either directly or using the screen system, style properties can be supplied to it, and these styles are used to update the look of the displayable. In the following example::"
msgstr ""

#: ../../source/style.rst:39
msgid "the :propref:`size` property is supplied to a Text displayable, allowing us to change its text size. This will customize the look of the text displayable by displaying the text 40 pixels high."
msgstr ""

#: ../../source/style.rst:43
msgid "Similarly, when using Screen Language, each user interface statement takes relevant style properties::"
msgstr ""

#: ../../source/style.rst:49
msgid "Ren'Py supports style inheritance, with each style having a single parent. If a style property is not defined in a style, the value of the property is inherited from the closest parent, grandparent, or other ancestor."
msgstr ""

#: ../../source/style.rst:54
msgid "Each displayable takes a property named ``style``, which gives the parent of the displayable's style::"
msgstr ""

#: ../../source/style.rst:62
msgid "When no ``style`` property is given, a parent is chosen based on the kind of displayable be that has been supplied. The parent chosen can be influenced by the :ref:`style_prefix <style-prefix>` property of user interface statements in the screen language."
msgstr ""

#: ../../source/style.rst:67
msgid "When a style is defined without a parent being specified, a default parent is chosen for the style. If the style contains an underscore (_) in its name, the parent is named by removing everything up to and including the first underscore. For example, a style named ``my_button`` will inherit from ``button``. This inheritance can be changed using the style statement or by calling a method on a style object.  When a style that does not exist is used, and the style has an underscore in its name, Ren'Py will create it using the default parent."
msgstr ""

#: ../../source/style.rst:76
msgid "Style names beginning with an underscore are reserved for Ren'Py use."
msgstr ""

#: ../../source/style.rst:78
msgid "As Ren'Py builds styles on startup, named styles should not be changed outside of a style statement or ``init`` block."
msgstr ""

#: ../../source/style.rst:83
msgid "Style Inspector"
msgstr ""

#: ../../source/style.rst:85
msgid "When :var:`config.developer` is true, the style inspector can be used to see which styles are being used by a displayable."
msgstr ""

#: ../../source/style.rst:88
msgid "To activate the style inspector, place the mouse over a displayable, and press Shift+I. Ren'Py will display a list of displayables that include the mouse position, in the order they are drawn to the screen. (That is, the last displayable is the one on top of the others.)"
msgstr ""

#: ../../source/style.rst:93
msgid "Click the name of a style to display the styles the displayable inherits from, and the properties each style contributes the to the final displayable."
msgstr ""

#: ../../source/style.rst:98
msgid "Defining Styles: Style Statement"
msgstr ""

#: ../../source/style.rst:100
msgid "The preferred way to define styles is through the style statement::"
msgstr ""

#: ../../source/style.rst:106
msgid "If a style does not exist, the style statement creates it. Otherwise, the existing style is modified by the style statement."
msgstr ""

#: ../../source/style.rst:109
msgid "A style statement begins with the keyword ``style`` and the name of the style to define. This is followed on the first line by zero or more clauses, and an optional colon."
msgstr ""

#: ../../source/style.rst:113
msgid "If the colon is present, a block must follow. Each line of the block should contain one ore more clauses. Otherwise, the statement is complete."
msgstr ""

#: ../../source/style.rst:116
msgid "The style statement accepts the following clauses:"
msgstr ""

#: ../../source/style.rst:120
msgid "`style-property` `simple-expression`"
msgstr ""

#: ../../source/style.rst:119
msgid "Assigns the value of the simple expression to the given style property."
msgstr ""

#: ../../source/style.rst:124
msgid "``is`` `parent`"
msgstr ""

#: ../../source/style.rst:123
msgid "Sets the parent of this style. The parent must be a word giving the name of a style."
msgstr ""

#: ../../source/style.rst:129
msgid "``clear``"
msgstr ""

#: ../../source/style.rst:127
msgid "Removes all properties of this style that were assigned before this style statement was run. This does not prevent the style from inheriting property values from its parents."
msgstr ""

#: ../../source/style.rst:134
msgid "``take`` `style-name`"
msgstr ""

#: ../../source/style.rst:132
msgid "Removes all properties of this style that were assigned before this style statement was run, and replaces them with the properties of the named style. This does not change the parent of this style."
msgstr ""

#: ../../source/style.rst:140
msgid "``variant`` `simple-expression`"
msgstr ""

#: ../../source/style.rst:137
msgid "Evaluates the simple expression, to yield a string or list of strings, which are interpreted as :ref:`screen variants <screen-variants>`. If at least one of the variants given is active, the style statement is run, otherwise it is ignored."
msgstr ""

#: ../../source/style.rst:145
msgid "``properties`` `simple-expression`"
msgstr ""

#: ../../source/style.rst:143
msgid "Evaluates the simple expression to get a dictionary. The dictionary is expected to map style properties to values, and the values are assigned as if they were provided to the style statement."
msgstr ""

#: ../../source/style.rst:147
msgid "Examples of style statements are::"
msgstr ""

#: ../../source/style.rst:163
msgid "Style statements are always run at init time. If a style statement is not in an ``init`` block, it is automatically placed into an ``init 0`` block."
msgstr ""

#: ../../source/style.rst:168
msgid "Defining Styles: Python"
msgstr ""

#: ../../source/style.rst:170
msgid "Named styles exists as fields on the global ``style`` object. To create a new style, create an instance of the Style class, and assign it to a field on the ``style`` object.::"
msgstr ""

#: ../../source/style.rst:177
msgid "Style properties can be set by assigning to field-like properties of the Styles. ::"
msgstr ""

#: ../../source/style.rst:186
msgid "Creates a new style object. Style properties can be assigned to the fields of this object."
msgstr ""

#: ../../source/style.rst:191
msgid "`parent`"
msgstr ""

#: ../../source/style.rst:190
msgid "The styles parent. This can be another style object, or a string."
msgstr ""

#: ../../source/style.rst:195
msgid "This removes all style properties from this object. Values will be inherited from this object's parent."
msgstr ""

#: ../../source/style.rst:200
msgid "Sets the parent of this style object to `parent`."
msgstr ""

#: ../../source/style.rst:204
msgid "This takes all style properties from `other`. `other` must be a style object."
msgstr ""

#: ../../source/style.rst:211
msgid "Indexed Styles"
msgstr ""

#: ../../source/style.rst:213
msgid "Indexed styles are lightweight styles that can be used to customize the look of a displayable based on the data supplied to that displayable. An index style is created by indexing a style object with a string or integer. If an indexed style does not exist, indexing creates it. ::"
msgstr ""

#: ../../source/style.rst:222
msgid "An index style is used by supplying the indexed style to a displayable.::"
msgstr ""

#: ../../source/style.rst:233
msgid "Style Preferences"
msgstr ""

#: ../../source/style.rst:237
msgid ":ref:`gui-preferences` may often provide a better way of accomplishing the same thing, as a gui preference can change a variable used in multiple styles."
msgstr ""

#: ../../source/style.rst:241
msgid "It's often desirable to allow the user to customize aspects of the user interface that are best expressed as styles. For example, a creator may want to give players of his game the ability to adjust the look, color, and size of the text. Style preferences allow for this customization."
msgstr ""

#: ../../source/style.rst:246
msgid "A style preference is a preference that controls one or more style properties. A style preference has a name and one or more alternatives. At any given time, one of the alternatives is the selected alternative for the style preference. The selected alternative is saved in the persistent data, and defaults to the first alternative registered for a style property."
msgstr ""

#: ../../source/style.rst:252
msgid "An alternative has one or more associations of style, property, and value associated with it, and represents a promise that when the alternative becomes the selected alternative for the style preference, the property on the style will be assigned the given value. This occurs when Ren'Py first initializes, and then whenever a new alternative is selected."
msgstr ""

#: ../../source/style.rst:258
msgid "One should ensure that every alternative for a given style preference updates the same set of styles and properties. Otherwise, some styles may not be assigned values, and the result will not be deterministic."
msgstr ""

#: ../../source/style.rst:262
msgid "The style preference functions are:"
msgstr ""

#: ../../source/inc/style_preferences:5
msgid "An action that causes `alternative` to become the selected alternative for the given style preference."
msgstr ""

#: ../../source/inc/style_preferences:8
#: ../../source/inc/style_preferences:17
#: ../../source/inc/style_preferences:25
#: ../../source/inc/style_preferences:44
msgid "`preference`"
msgstr ""

#: ../../source/inc/style_preferences:8
#: ../../source/inc/style_preferences:18
#: ../../source/inc/style_preferences:44
msgid "A string giving the name of the style preference."
msgstr ""

#: ../../source/inc/style_preferences:10
#: ../../source/inc/style_preferences:28
#: ../../source/inc/style_preferences:46
msgid "`alternative`"
msgstr ""

#: ../../source/inc/style_preferences:11
#: ../../source/inc/style_preferences:47
msgid "A string giving the name of the alternative."
msgstr ""

#: ../../source/inc/style_preferences:15
msgid "Returns a string giving the name of the selected alternative for the named style preference."
msgstr ""

#: ../../source/inc/style_preferences:22
msgid "Registers information about an alternative for a style preference."
msgstr ""

#: ../../source/inc/style_preferences:25
msgid "A string, the name of the style preference."
msgstr ""

#: ../../source/inc/style_preferences:28
msgid "A string, the name of the alternative."
msgstr ""

#: ../../source/inc/style_preferences:31
msgid "`style`"
msgstr ""

#: ../../source/inc/style_preferences:31
msgid "The style that will be updated. This may be a style object or a string giving the style name."
msgstr ""

#: ../../source/inc/style_preferences:34
msgid "`property`"
msgstr ""

#: ../../source/inc/style_preferences:34
msgid "A string giving the name of the style property that will be update."
msgstr ""

#: ../../source/inc/style_preferences:36
msgid "`value`"
msgstr ""

#: ../../source/inc/style_preferences:37
msgid "The value that will be assigned to the style property."
msgstr ""

#: ../../source/inc/style_preferences:41
msgid "Sets the selected alternative for the style preference."
msgstr ""

#: ../../source/style.rst:266
msgid "Here's an example of registering a style property that allows the user to choose between large, simple text and smaller outlined text."
msgstr ""

#: ../../source/style.rst:278
msgid "The following will allow the user to select these alternatives using buttons::"
msgstr ""

#: ../../source/style.rst:285
msgid "Other Style Functions"
msgstr ""

#: ../../source/style.rst:289
msgid "This causes named styles to be rebuilt, allowing styles to be changed after the init phase has finished."
msgstr ""

#: ../../source/style.rst:294
msgid "Named styles are not saved as part of the per-game data. This means that changes to them will not be persisted through a save and load cycle."
msgstr ""

