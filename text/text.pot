# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-20 23:16+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/text.rst:8
msgid "Text"
msgstr ""

#: ../../source/text.rst:10
msgid "Ren'Py contains several ways of displaying text. The :ref:`say <say-statement>` and :ref:`menu <menu-statement>` statements are primarily concerned with the display of text to the user. The user interface often contains text, displayed using the :ref:`text <sl-text>`, :ref:`textbutton <sl-textbutton>`, and :ref:`label <sl-label>` screen language statements. These functions, along with others, create :func:`Text` displayables, and show them on the screen."
msgstr ""

#: ../../source/text.rst:18
msgid "The Text displayable is responsible for managing the process of showing the text to the user. The text displayable performs actions in the following order:"
msgstr ""

#: ../../source/text.rst:23
msgid "Translating text."
msgstr ""

#: ../../source/text.rst:24
msgid "Interpolating data into the text."
msgstr ""

#: ../../source/text.rst:25
msgid "Styling the text using styles and text tags."
msgstr ""

#: ../../source/text.rst:26
msgid "Laying out the styled text."
msgstr ""

#: ../../source/text.rst:27
msgid "Drawing the text to the screen."
msgstr ""

#: ../../source/text.rst:29
msgid "This chapter discusses the process of text display in Ren'Py."
msgstr ""

#: ../../source/text.rst:33
msgid "Escape Characters"
msgstr ""

#: ../../source/text.rst:35
msgid "There are three special characters that can control the way Ren'Py displays text. A creator needs to be aware of these characters to ensure that their writing is not accidentally misinterpreted by the engine."
msgstr ""

#: ../../source/text.rst:58
msgid "\\ (backslash)"
msgstr ""

#: ../../source/text.rst:40
msgid "The backslash character is used to introduce when writing a Ren'Py or Python string. Some common escape codes are:"
msgstr ""

#: ../../source/text.rst:44
msgid "\\\\\" (backslash-doublequote)"
msgstr ""

#: ../../source/text.rst:44
msgid "Includes a doublequote in a double-quoted string."
msgstr ""

#: ../../source/text.rst:47
msgid "\\\\' (backslash-quote)"
msgstr ""

#: ../../source/text.rst:47
msgid "Includes a single quote in a single-quoted string."
msgstr ""

#: ../../source/text.rst:52
msgid "\\\\\\  (backslash-space)"
msgstr ""

#: ../../source/text.rst:50
msgid "Includes an additional space in a Ren'Py string. By default, Ren'Py script text collapses adjacent whitespace into a single space character."
msgstr ""

#: ../../source/text.rst:55
msgid "\\\\n (backslash-n)"
msgstr ""

#: ../../source/text.rst:55
msgid "Includes a newline character in the text."
msgstr ""

#: ../../source/text.rst:58
msgid "\\\\\\\\ (backslash-backslash)"
msgstr ""

#: ../../source/text.rst:58
msgid "Includes a backslash character in the text."
msgstr ""

#: ../../source/text.rst:63
msgid "[ (left bracket)"
msgstr ""

#: ../../source/text.rst:61
msgid "The left bracket is used to introduce interpolation of a value into the text. To include a single left bracket in your text, double it – write ``[[``."
msgstr ""

#: ../../source/text.rst:68
msgid "{ (left brace)"
msgstr ""

#: ../../source/text.rst:66
msgid "The left brace is used to introduce a text tag. To include a left brace in your text, double it – write ``{{``."
msgstr ""

#: ../../source/text.rst:73
msgid "Interpolating Data"
msgstr ""

#: ../../source/text.rst:75
msgid "Ren'Py supports interpolating data into the text string before it is displayed. For example, if the player's name is stored in the ``playername`` variable, one could write a line of dialogue like::"
msgstr ""

#: ../../source/text.rst:81
msgid "Ren'Py will interpolate variables found in the global store. When using a text widget in a screen, Ren'Py will also interpolate screen local variables. (This can be overridden by supplying an explicit scope argument to the Text displayable.)"
msgstr ""

#: ../../source/text.rst:86
msgid "Ren'Py isn't limited to interpolating simple variables. It can also interpolate fields and components of tuples. So it's possible to have::"
msgstr ""

#: ../../source/text.rst:91
msgid "It's possible to apply formatting when displaying numbers. This will display a floating point number to two decimal places::"
msgstr ""

#: ../../source/text.rst:97
msgid "Ren'Py's string interpolation is taken from the :pep:`3101` string formatting syntax. Ren'Py uses [ to introduce string formatting because { was taken by text tags."
msgstr ""

#: ../../source/text.rst:101
msgid "Along with the ``!s`` and ``!r`` conversion flags supported by Python, Ren'Py supports several more flags. The ``!q`` conversion flag ensures that text tags are properly quoted, so that displaying a string will not introduce unwanted formatting constructs. For example::"
msgstr ""

#: ../../source/text.rst:108
msgid "The ``!t`` flag will translate the interpolated string::"
msgstr ""

#: ../../source/text.rst:118
msgid "The ``!u`` flag forces the text to uppercase and the ``!l`` flag forces the text to lowercase. The ``!c`` flag acts only on the first character, capitalizing it. These flags may be combined, for example using ``!cl`` would capitalize the first character, and force the remaining text to lowercase."
msgstr ""

#: ../../source/text.rst:125
msgid "Styling and Text Tags"
msgstr ""

#: ../../source/text.rst:127
msgid "In Ren'Py, text gains style information in two ways. The first is from the style that is applied to the entire block of text. Please see the section about the :ref:`style system <styles>` for more details, especially the section on :ref:`text style properties <text-style-properties>`."
msgstr ""

#: ../../source/text.rst:132
msgid "The second way is through text tags. Text tags are suitable for styling a portion of text block, or a small fraction of the text blocks in the program. If you find yourself applying the same text tags to every line of text, consider using a style instead."
msgstr ""

#: ../../source/text.rst:137
msgid "There are two types of text tags. Some text tags are self-closing, while others require a closing tag. When multiple closing tags are used, they should be closed last open, first closed order – Ren'Py will reject incorrect nesting. For example::"
msgstr ""

#: ../../source/text.rst:149
msgid "Some text tags take an argument. In that case, the tag name is followed by an equals sign (=), and the argument. The argument may not contain the right-brace (}) character. The meaning of the argument varies based on the text tag."
msgstr ""

#: ../../source/text.rst:155
msgid "General Text Tags"
msgstr ""

#: ../../source/text.rst:157
msgid "Tags that apply to all text are:"
msgstr ""

#: ../../source/text.rst:162
msgid "The anchor tag creates a hyperlink between itself and its closing tag. While the behavior of the hyperlink is controlled by the :propref:`hyperlink_functions` style property, the default handler has the following behavior."
msgstr ""

#: ../../source/text.rst:167
msgid "When the argument begins with ``jump:``, the rest of the argument is a label to jump to."
msgstr ""

#: ../../source/text.rst:169
msgid "When the argument begins with ``call:``, the rest of the argument is a label to call. As usual, a call ends the current Ren'Py statement."
msgstr ""

#: ../../source/text.rst:172
msgid "When the argument begins with ``call_in_new_context:``, the rest of the argument is a label to call in a new context (using :func:`renpy.call_in_new_context`)."
msgstr ""

#: ../../source/text.rst:175
msgid "When the argument begins with ``show:``, the rest of the argument is a screen to show."
msgstr ""

#: ../../source/text.rst:177
msgid "When the argument begins with ``showmenu:``, the rest of the argument is a game menu screen to show."
msgstr ""

#: ../../source/text.rst:180
msgid "Otherwise, the argument is a URL that is opened by the system web browser."
msgstr ""

#: ../../source/text.rst:182
msgid "If there is no protocol section in the argument, :var:`config.hyperlink_protocol` is prepended to it. If config.hyperlink_protocol has been set to \"jump\", {a=label} and {a=jump:label} become equivalent. Creators can define new protocols using :var:`config.hyperlink_handlers`."
msgstr ""

#: ../../source/text.rst:208
msgid "The alpha text tag renders the text between itself and its closing tag in the specified opacity. The opacity should be a value between 0.0 and 1.0, corresponding to fully invisible and fully opaque, respectively. If the value is prefixed by + or -, the opacity will be changed by that amount instead of completely replaced. If the value is prefixed by \\*, the opacity will be multiplied by that amount. ::"
msgstr ""

#: ../../source/text.rst:222
msgid "The alt tag prevents text from being rendered, while still maing the text available for the text-to-speech system. ::"
msgstr ""

#: ../../source/text.rst:227
msgid "See also the :var:`alt` character."
msgstr ""

#: ../../source/text.rst:231
msgid "The alternate ruby top tag marks text between itself and its closing tag as alternate ruby top text. See the section on :ref:`Ruby Text <ruby-text>` for more information."
msgstr ""

#: ../../source/text.rst:237
msgid "The bold tag renders the text between itself and its closing tag in a bold font. ::"
msgstr ""

#: ../../source/text.rst:244
msgid "The color text tag renders the text between itself and its closing tag in the specified color. The color should be in #rgb, #rgba, #rrggbb, or #rrggbbaa format. ::"
msgstr ""

#: ../../source/text.rst:252
msgid "The characters per second tag sets the speed of text display, for text between the tag and its closing tag. If the argument begins with an asterisk, it's taken as a multiplier to the current text speed. Otherwise, the argument gives the speed to show the text at, in characters per second. ::"
msgstr ""

#: ../../source/text.rst:262
msgid "The font tag renders the text between itself and its closing tag in the specified font. The argument is the filename of the font to use. ::"
msgstr ""

#: ../../source/text.rst:270
msgid "The italics tag renders the text between itself and its closing tag in italics. ::"
msgstr ""

#: ../../source/text.rst:277
msgid "The image tag is a self-closing tag that inserts an image into the text. The image should be the height of a single line of text. The argument should be either the image filename, or the name of an image defined with the image statement. ::"
msgstr ""

#: ../../source/text.rst:286
msgid "The kerning tag is a tag that adjust the kerning of characters between itself and its closing tag. It takes as an argument a floating point number giving the number of pixels of kerning to add to each kerning pair. (The number may be negative to decrease kerning.) ::"
msgstr ""

#: ../../source/text.rst:296
msgid "The noalt tag prevents text from being spoken by the text-to-speech system. This is often used in conjuction with the alt tag, to provide accessible and visual optiopns  ::"
msgstr ""

#: ../../source/text.rst:304
msgid "The outline text tag changes all the outlines (including drop shadows) to the given color. The color should be in #rgb, #rgba, #rrggbb, or #rrggbbaa format. ::"
msgstr ""

#: ../../source/text.rst:312
msgid "The plain tag ensures the text does not have, bold, italics, underline, or strikethrough applied. ::"
msgstr ""

#: ../../source/text.rst:319
msgid "The ruby bottom tag marks text between itself and its closing tag as ruby bottom text. See the section on :ref:`Ruby Text <ruby-text>` for more information."
msgstr ""

#: ../../source/text.rst:325
msgid "The ruby top tag marks text between itself and its closing tag as ruby top text. See the section on :ref:`Ruby Text <ruby-text>` for more information."
msgstr ""

#: ../../source/text.rst:331
msgid "The strikethrough tag draws a line through text between itself and its closing tag. ::"
msgstr ""

#: ../../source/text.rst:338
msgid "The size tag changes the size of text between itself and its closing tag. The argument should be an integer, optionally preceded by + or -. If the argument is just an integer, the size is set to that many pixels high. Otherwise, the size is increased or decreased by that amount. ::"
msgstr ""

#: ../../source/text.rst:348
msgid "The space tag is a self-closing tag that inserts horizontal space into a line of text. As an argument, it takes an integer giving the number of pixels of space to add. ::"
msgstr ""

#: ../../source/text.rst:356
msgid "The underline tag underlines the text between itself and its closing tag. ::"
msgstr ""

#: ../../source/text.rst:363
msgid "The vspace tag is a self-closing tag that inserts vertical space between lines of text. As an argument, it takes an integer giving the number of pixels of space to add. ::"
msgstr ""

#: ../../source/text.rst:371
msgid "Text tags beginning with # are ignored, but can be included to distinguish strings for the purpose of translation. ::"
msgstr ""

#: ../../source/text.rst:377
msgid "Dialogue Text Tags"
msgstr ""

#: ../../source/text.rst:379
msgid "Text tags that only apply to dialogue are:"
msgstr ""

#: ../../source/text.rst:383
msgid "Text after the done tag is not displayed. Why would you want this? It's to allow text to avoid jumping around when :propref:`adjust_spacing` is True."
msgstr ""

#: ../../source/text.rst:387
msgid "When the done tag is present, the line of dialogue is not added to the history buffer. If the nw tag is present, it should be before the done tag.::"
msgstr ""

#: ../../source/text.rst:397
msgid "If the fast tag is displayed in a line of text, then all text before it is displayed instantly, even in slow text mode. The fast tag is a self-closing tag. ::"
msgstr ""

#: ../../source/text.rst:407
msgid "The no-wait tag is a self-closing tag that causes the current line of dialogue to automatically dismiss itself once the end of line has been displayed. ::"
msgstr ""

#: ../../source/text.rst:415
msgid "The no-wait tag will wait for voice and self-voicing to complete before advancing."
msgstr ""

#: ../../source/text.rst:420
msgid "The paragraph pause tag is a self-closing tag that terminates the current paragraph, and waits for the user to click to continue. If it is given an argument, the argument is interpreted as a number, and the wait automatically ends after that many seconds have passed. ::"
msgstr ""

#: ../../source/text.rst:430
msgid "The wait tag is a self-closing tag that waits for the user to click to continue. If it is given an argument, the argument is interpreted as a number, and the wait automatically ends after that many seconds have passed. ::"
msgstr ""

#: ../../source/text.rst:440
msgid "The clear text tag only makes sense on a line by itself in the :ref:`NVL monologue mode <nvl-monologue-mode>`. It does the same thing at the ``nvl clear`` statement without ending the block of text. ::"
msgstr ""

#: ../../source/text.rst:456
msgid "It's also possible to define :ref:`custom text tags <custom-text-tags>` using Python."
msgstr ""

#: ../../source/text.rst:460
msgid "Style Text Tags"
msgstr ""

#: ../../source/text.rst:462
msgid "Ren'Py supports text tags that access styles. These are text tags where the tag name is empty. In this case, the argument is taken to be the name of a style. For example, the {=mystyle} tag will acces the ``mystyle`` style."
msgstr ""

#: ../../source/text.rst:467
msgid "The text between the tag and the corresponding closing tag has the following properties set to those defined in the style:"
msgstr ""

#: ../../source/text.rst:470
msgid "antialias"
msgstr ""

#: ../../source/text.rst:471
msgid "font"
msgstr ""

#: ../../source/text.rst:472
msgid "size"
msgstr ""

#: ../../source/text.rst:473
msgid "bold"
msgstr ""

#: ../../source/text.rst:474
msgid "italic"
msgstr ""

#: ../../source/text.rst:475
msgid "underline"
msgstr ""

#: ../../source/text.rst:476
msgid "strikethrough"
msgstr ""

#: ../../source/text.rst:477
msgid "color"
msgstr ""

#: ../../source/text.rst:478
msgid "black_color"
msgstr ""

#: ../../source/text.rst:479
msgid "kerning"
msgstr ""

#: ../../source/text.rst:483
msgid "Non-English Languages"
msgstr ""

#: ../../source/text.rst:485
msgid "The default font for Ren'Py contains characters for English and many other languages. For size reasons, it doesn't contain the characters required to render other languages, including Chinese, Japanese, and Korean. In order to support these languages, a project must first change the fonts it uses."
msgstr ""

#: ../../source/text.rst:491
msgid "Ren'Py should then support most world languages without further configuration. However, Korean can be written with or without spacing between words. Ren'Py has a special mode to support Korean with spaces, which can be enabled by setting::"
msgstr ""

#: ../../source/text.rst:498
msgid "This can be changed from the default of \"unicode\" in gui.rpy."
msgstr ""

#: ../../source/text.rst:500
msgid "Japanese has multiple rules for line breaking. We recommend starting with \"japanese-normal\", and moving to \"japanese-loose\" or \"japanese-strict\" for more or less break opportunities, respectively. ::"
msgstr ""

#: ../../source/text.rst:506
msgid "Ideographic languages provide a large number of opportunities for line breaking. To enable a faster but less-accurate line-breaking algorithm, use::"
msgstr ""

#: ../../source/text.rst:512
msgid "The faster line-breaking algorithm is not be necessary unless the game is displaying huge amounts of text, such as in NVL-mode."
msgstr ""

#: ../../source/text.rst:515
msgid "The line breaking algorithms can be further configured using the :func:`renpy.language_tailor` function."
msgstr ""

#: ../../source/text.rst:520
msgid "Vertical Text"
msgstr ""

#: ../../source/text.rst:522
msgid "When the :propref:`vertical` style property is set, Ren'Py will produce vertically oriented text. The text is written top-to-bottom, right-to-left."
msgstr ""

#: ../../source/text.rst:526
msgid "There are two text tags that interact with vertical text."
msgstr ""

#: ../../source/text.rst:530
msgid "Includes horizontally-oriented text inside vertical text."
msgstr ""

#: ../../source/text.rst:534
msgid "Includes vertically-oriented text inside horizontal text. (This will not rotate the text to the vertical orientation.)"
msgstr ""

#: ../../source/text.rst:539
msgid "If the font does not contain vertical text spacing information, Ren'Py will attempt to synthesize this information from horizontal text information. The spacing may not remain constant between Ren'Py releases."
msgstr ""

#: ../../source/text.rst:548
msgid "Ruby Text"
msgstr ""

#: ../../source/text.rst:550
msgid "Ruby text (also known as furigana or interlinear annotations) is a way of placing small text above a character or word. There are several steps required for your game to support ruby text."
msgstr ""

#: ../../source/text.rst:554
msgid "First, you must set up styles for the ruby text. The following style changes are required:"
msgstr ""

#: ../../source/text.rst:557
msgid "The :propref:`line_leading` property must be used to leave enough vertical space for the ruby text."
msgstr ""

#: ../../source/text.rst:559
msgid "A new named style must be created. The properties of this style, such as :propref:`size` should be set in a fashion appropriate for ruby text."
msgstr ""

#: ../../source/text.rst:562
msgid "The :propref:`yoffset` of the new style should be set, in order to move the ruby text above the baseline."
msgstr ""

#: ../../source/text.rst:564
msgid "The :propref:`ruby_style` field of the text's style should be set to the newly-created style."
msgstr ""

#: ../../source/text.rst:567
#: ../../source/text.rst:585
#: ../../source/text.rst:672
msgid "For example::"
msgstr ""

#: ../../source/text.rst:577
msgid "(Use ``style.style_name`` to refer to a style for this purpose.)"
msgstr ""

#: ../../source/text.rst:579
msgid "Once Ren'Py has been configured, ruby text can be included using the {rt} and {rb} text tags. The {rt} tag is used to mark one or more characters to be displayed as ruby text. If the ruby text is preceded by text enclosed in the {rb} tag, the ruby text is centered over that text. Otherwise, it is centered over the preceding character."
msgstr ""

#: ../../source/text.rst:591
msgid "It's the creator's responsibility to ensure that ruby text does not leave the boundaries of the text. It may be necessary to add leading or spaces to the left and right of the text to prevent these errors from occurring."
msgstr ""

#: ../../source/text.rst:596
msgid "Ren'Py also supports alternate ruby text, which is a second kind of ruby top text. This is introduced with the {art} text tag (instead of {rt}), and the :propref:`altruby_style` property (instead of :propref:`ruby_style`)."
msgstr ""

#: ../../source/text.rst:601
msgid "Fonts"
msgstr ""

#: ../../source/text.rst:603
msgid "Ren'Py supports TrueType/OpenType fonts and collections, and Image-Based fonts."
msgstr ""

#: ../../source/text.rst:606
msgid "A TrueType or OpenType font is specified by giving the name of the font file. The file must be present in the game directory or one of the archive files."
msgstr ""

#: ../../source/text.rst:610
msgid "Ren'Py also supports TrueType/OpenType collections that define more than one font. When accessing a collection, use the 0-based font index, followed by an at-sign and the file name. For example, \"0\\@font.ttc\" is the first font in a collection, \"1\\@font.ttc\" the second, and so on."
msgstr ""

#: ../../source/text.rst:617
msgid "Font Replacement"
msgstr ""

#: ../../source/text.rst:619
msgid "The :var:`config.font_replacement_map` variable is used to map fonts. The combination of font filename, boldness, and italics is mapped to a similar combination. This allows a font with proper italics to be used instead of the automatically-generated italics."
msgstr ""

#: ../../source/text.rst:624
msgid "Once such mapping would be to replace the italic version of the Deja Vu Sans font with the official oblique version (You'll need to download the oblique font from the web)::"
msgstr ""

#: ../../source/text.rst:631
msgid "This mapping can improve the look of italic text."
msgstr ""

#: ../../source/text.rst:634
msgid "Image-Based Fonts"
msgstr ""

#: ../../source/text.rst:636
msgid "Image based fonts can be registered by calling one of the following registration functions. Registering an image-based font requires the specification of a name, size, boldness, italicness, and underline. When all of these properties match the registered font, the registered font is used."
msgstr ""

#: ../../source/inc/image_fonts:5
msgid "This registers a BMFont with the given details. Please note that size, bold, italic, and underline are all advisory (used for matching), and do not change the appearance of the font."
msgstr ""

#: ../../source/inc/image_fonts:9
msgid "Please see the `BMFont home page <http://www.angelcode.com/products/bmfont/>`_ for the tool that creates BMFonts. Ren'Py expects that the filename parameter will be to a file in the BMFont text format, that describes a 32-bit font. The Alpha channel should contain the font information, while the Red, Green, and Blue channels should be set to one. The image files, kerning, and other control information is read out of the BMFont file."
msgstr ""

#: ../../source/inc/image_fonts:16
msgid "We recommend including Latin and General Punctuation as part of your BMFont, to ensure all of the Ren'Py interface can render."
msgstr ""

#: ../../source/inc/image_fonts:20
#: ../../source/inc/image_fonts:49
#: ../../source/inc/image_fonts:89
msgid "`name`"
msgstr ""

#: ../../source/inc/image_fonts:20
#: ../../source/inc/image_fonts:49
#: ../../source/inc/image_fonts:89
msgid "The name of the font being registered, a string."
msgstr ""

#: ../../source/inc/image_fonts:23
#: ../../source/inc/image_fonts:52
#: ../../source/inc/image_fonts:92
msgid "`size`"
msgstr ""

#: ../../source/inc/image_fonts:23
#: ../../source/inc/image_fonts:52
#: ../../source/inc/image_fonts:92
msgid "The size of the font being registered, an integer."
msgstr ""

#: ../../source/inc/image_fonts:26
#: ../../source/inc/image_fonts:55
#: ../../source/inc/image_fonts:95
msgid "`bold`"
msgstr ""

#: ../../source/inc/image_fonts:26
#: ../../source/inc/image_fonts:55
#: ../../source/inc/image_fonts:95
msgid "The boldness of the font being registered, a boolean."
msgstr ""

#: ../../source/inc/image_fonts:29
#: ../../source/inc/image_fonts:58
#: ../../source/inc/image_fonts:98
msgid "`italics`"
msgstr ""

#: ../../source/inc/image_fonts:29
#: ../../source/inc/image_fonts:58
#: ../../source/inc/image_fonts:98
msgid "The italicness of the font being registered, a boolean."
msgstr ""

#: ../../source/inc/image_fonts:32
#: ../../source/inc/image_fonts:61
#: ../../source/inc/image_fonts:101
msgid "`underline`"
msgstr ""

#: ../../source/inc/image_fonts:32
#: ../../source/inc/image_fonts:61
#: ../../source/inc/image_fonts:101
msgid "An ignored parameter."
msgstr ""

#: ../../source/inc/image_fonts:34
#: ../../source/inc/image_fonts:65
#: ../../source/inc/image_fonts:104
msgid "`filename`"
msgstr ""

#: ../../source/inc/image_fonts:35
msgid "The file containing BMFont control information."
msgstr ""

#: ../../source/inc/image_fonts:39
msgid "This registers a MudgeFont with the given details. Please note that size, bold, italic, and underline are all advisory (used for matching), and do not change the appearance of the font."
msgstr ""

#: ../../source/inc/image_fonts:43
msgid "Please see the `MudgeFont home page <http://www.larryhastings.com/programming/mudgefont/>`_ for the tool that creates MudgeFonts. Ren'Py assumes that character codes found in the MudgeFont xml file are unicode character numbers, and ignores negative character codes."
msgstr ""

#: ../../source/inc/image_fonts:64
msgid "The file containing the MudgeFont image, a string. The image is usually a TGA file, but could be a PNG or other format that Ren'Py supports."
msgstr ""

#: ../../source/inc/image_fonts:68
msgid "`xml`"
msgstr ""

#: ../../source/inc/image_fonts:68
msgid "The xml file containing information generated by the MudgeFont tool."
msgstr ""

#: ../../source/inc/image_fonts:71
#: ../../source/inc/image_fonts:107
msgid "`spacewidth`"
msgstr ""

#: ../../source/inc/image_fonts:71
#: ../../source/inc/image_fonts:107
msgid "The width of a space character, an integer in pixels."
msgstr ""

#: ../../source/inc/image_fonts:74
#: ../../source/inc/image_fonts:117
msgid "`default_kern`"
msgstr ""

#: ../../source/inc/image_fonts:74
#: ../../source/inc/image_fonts:117
msgid "The default kern spacing between characters, in pixels."
msgstr ""

#: ../../source/inc/image_fonts:77
#: ../../source/inc/image_fonts:121
msgid "`kerns`"
msgstr ""

#: ../../source/inc/image_fonts:77
#: ../../source/inc/image_fonts:120
msgid "A map from two-character strings to the kern that should be used between those characters."
msgstr ""

#: ../../source/inc/image_fonts:82
msgid "This registers an SFont with the given details. Please note that size, bold, italic, and underline are all advisory (used for matching), and do not change the appearance of the font."
msgstr ""

#: ../../source/inc/image_fonts:86
msgid "`More information about SFont. <http://www.linux-games.com/sfont/>`_"
msgstr ""

#: ../../source/inc/image_fonts:104
msgid "The file containing the sfont image, a string."
msgstr ""

#: ../../source/inc/image_fonts:114
msgid "`baseline`"
msgstr ""

#: ../../source/inc/image_fonts:110
msgid "The distance from the top of the font to the baseline (the invisible line letters sit on), an integer in pixels.  If this font is mixed with other fonts, their baselines will be aligned.  Negative values indicate distance from the bottom of the font instead, and ``None`` means the baseline equals the height (i.e., is at the very bottom of the font)."
msgstr ""

#: ../../source/inc/image_fonts:129
msgid "`charset`"
msgstr ""

#: ../../source/inc/image_fonts:124
msgid "The character set of the font. A string containing characters in the order in which they are found in the image. The default character set for a SFont is::"
msgstr ""

#: ../../source/text.rst:644
msgid "As BMFont is the most complete of the three image font formats Ren'Py supports, it's the one recommended for new projects. An example of BMFont use is::"
msgstr ""

#: ../../source/text.rst:659
msgid "Font Groups"
msgstr ""

#: ../../source/text.rst:661
msgid "When creating a multilingual game, it may not be possible to find a single font that covers every writing system the game use while projecting the the mood the creator intends. To support this, Ren'Py supports font groups that can take characters from two or more fonts and combine them into a single font."
msgstr ""

#: ../../source/text.rst:667
msgid "To create a font group, create a :class:`FontGroup` object and call the ``.add`` method on it once or more. A FontGroup can be used wherever a font name can be used. The add method takes the start and end of a range of Unicode character points, and the first range to cover a point is used."
msgstr ""

#: ../../source/inc/font_group:5
msgid "A group of fonts that can be used as a single font."
msgstr ""

#: ../../source/inc/font_group:9
msgid "Associates a range of characters with a `font`."
msgstr ""

#: ../../source/inc/font_group:14
msgid "`start`"
msgstr ""

#: ../../source/inc/font_group:12
msgid "The start of the range. This may be a single-character string, or an integer giving a unicode code point. If start is None, then the font is used as the default."
msgstr ""

#: ../../source/inc/font_group:18
msgid "`end`"
msgstr ""

#: ../../source/inc/font_group:17
msgid "The end of the range. This may be a single-character string, or an integer giving a unicode code point."
msgstr ""

#: ../../source/inc/font_group:20
msgid "When multiple .add() calls include the same character, the first call takes precedence."
msgstr ""

#: ../../source/inc/font_group:23
msgid "This returns the FontGroup, so that multiple calls to .add() can be chained together."
msgstr ""

#: ../../source/text.rst:683
msgid "Text Displayables"
msgstr ""

#: ../../source/text.rst:685
msgid "Text can also be used as a :ref:`displayable <displayables>`, which allows you to apply transforms to text, displaying it as if it was an image and moving it around the screen."
msgstr ""

#: ../../source/inc/text:5
msgid "This is a displayable that can be shown with an additional string parameter, which then shows that string as if it was an image. This is usually used as part of the pre-defined ``text`` image."
msgstr ""

#: ../../source/inc/text:9
msgid "For example, one can do::"
msgstr ""

#: ../../source/inc/text:17
msgid "You can use ParameterizedText directly to define similar images with different style properties. For example, one can write::"
msgstr ""

#: ../../source/inc/text:24
msgid "A displayable that displays text on the screen."
msgstr ""

#: ../../source/inc/text:28
msgid "`text`"
msgstr ""

#: ../../source/inc/text:27
msgid "The text to display on the screen. This may be a string, or a list of strings and displayables."
msgstr ""

#: ../../source/inc/text:33
msgid "`slow`"
msgstr ""

#: ../../source/inc/text:31
msgid "Determines if the text is displayed slowly, being typed out one character at the time. If None, slow text mode is determined by the :propref:`slow_cps` style property. Otherwise, the truth value of this parameter determines if slow text mode is used."
msgstr ""

#: ../../source/inc/text:37
msgid "`scope`"
msgstr ""

#: ../../source/inc/text:36
msgid "If not None, this should be a dictionary that provides an additional scope for text interpolation to occur in."
msgstr ""

#: ../../source/inc/text:40
msgid "`substitute`"
msgstr ""

#: ../../source/inc/text:40
msgid "If true, text interpolation occurs. If false, it will not occur. If None, they are controlled by :var:`config.new_substitutions`."
msgstr ""

#: ../../source/text.rst:693
msgid "Text Utility Functions"
msgstr ""

#: ../../source/inc/text_utility:5
msgid "Returns a copy of `s` with the text tags filtered. Exactly one of the `allow` and `deny` keyword arguments must be given."
msgstr ""

#: ../../source/inc/text_utility:9
msgid "`allow`"
msgstr ""

#: ../../source/inc/text_utility:9
msgid "A set of tags that are allowed. If a tag is not in this list, it is removed."
msgstr ""

#: ../../source/inc/text_utility:11
msgid "`deny`"
msgstr ""

#: ../../source/inc/text_utility:12
msgid "A set of tags that are denied. If a tag is not in this list, it is kept in the string."
msgstr ""

#: ../../source/inc/text_utility:16
msgid "Transforms `s`, while leaving text tags and interpolation the same."
msgstr ""

#: ../../source/inc/text_utility:21
msgid "`function`"
msgstr ""

#: ../../source/inc/text_utility:19
msgid "A function that is called with strings corresponding to runs of text, and should return a second string that replaces that run of text."
msgstr ""

#: ../../source/text.rst:698
msgid "Slow Text Concerns"
msgstr ""

#: ../../source/text.rst:700
msgid "Ren'Py allows the creator or user to indicate that text should be displayed slowly. In this case, Ren'Py will render the text to a texture, and then draw rectangles from the texture to the screen."
msgstr ""

#: ../../source/text.rst:704
msgid "Unfortunately, this means that it's possible to get rendering artifacts when characters overlap. To minimize these rendering artifacts, ensure that the :propref:`line_leading` and :propref:`line_spacing` properties are large enough that lines do not overlap. If the bottoms of characters on the first line are clipped, especially if line_spacing is negative, consider increasing :propref:`line_overlap_split`."
msgstr ""

#: ../../source/text.rst:712
msgid "Horizontal artifacts are also possible when characters are kerned together, but these artifacts are less severe, as they exist for only a single frame."
msgstr ""

#: ../../source/text.rst:716
msgid "Artifacts aren't a problem for static text, like the text in menus and other parts of the user interface."
msgstr ""

#: ../../source/text.rst:720
msgid "Text Overflow Logging"
msgstr ""

#: ../../source/text.rst:722
msgid "Ren'Py can log cases where text expands outside of the area allocated for it. To enable text overflow logging, the following steps are necessary."
msgstr ""

#: ../../source/text.rst:726
msgid "Set the :var:`config.debug_text_overflow` variable to true."
msgstr ""

#: ../../source/text.rst:727
msgid "Set the :propref:`xmaximum` and :propref:`ymaximum` style properties on either the Text displayable, or a container enclosing it."
msgstr ""

#: ../../source/text.rst:729
msgid "Run the game."
msgstr ""

#: ../../source/text.rst:731
msgid "Whenever text is displayed that overflows the available area, Ren'Py will log an error to the text_overflow.txt file."
msgstr ""

