# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2018, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-11 07:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sprites.rst:7
msgid "Sprites"
msgstr ""

#: ../../source/sprites.rst:9
msgid "To support the display of a large number of images at once, Ren'Py supports a sprite system. This system allows one to create sprites, where each sprite contains a displayable. The sprites can then have their location on the screen and vertical ordering changed."
msgstr ""

#: ../../source/sprites.rst:14
msgid "If one ignores performance, the sprite system is conceptually similar to a :func:`Fixed` wrapping :func:`Transform`\\s. Sprites are much faster than transforms, but also less flexible. The big performance improvement of sprites is that each Displayable is rendered only once per frame, even if that Displayable is used by many sprites. The limitation is that Sprites only allow one to change their xoffset and yoffset, rather than the many properties that a Transform has."
msgstr ""

#: ../../source/sprites.rst:22
msgid "To use the sprite system, create a SpriteManager object, and then call its create method to create new particles. As necessary, update the xoffset, yoffset, and zorder fields of each sprite to move it around the screen. By supplying `update` and `event` arguments to SpriteManager, you can have the sprites change over time, and react to user input."
msgstr ""

#: ../../source/sprites.rst:30
msgid "Sprite Classes"
msgstr ""

#: ../../source/inc/sprites:5
msgid "This represents a sprite that is managed by the SpriteManager. It contains fields that control the placement of the sprite on the screen. Sprites should not be created directly. Instead, they should be created by calling :meth:`SpriteManager.create`."
msgstr ""

#: ../../source/inc/sprites:10
msgid "The fields of a sprite object are:"
msgstr ""

#: ../../source/inc/sprites:14
msgid "`x`, `y`"
msgstr ""

#: ../../source/inc/sprites:13
msgid "The x and y coordinates of the upper-left corner of the sprite, relative to the SpriteManager."
msgstr ""

#: ../../source/inc/sprites:19
msgid "`zorder`"
msgstr ""

#: ../../source/inc/sprites:17
msgid "An integer that's used to control the order of this sprite in the relative to the other sprites in the SpriteManager. The larger the number is, the closer to the viewer the sprite is."
msgstr ""

#: ../../source/inc/sprites:24
msgid "`events`"
msgstr ""

#: ../../source/inc/sprites:22
msgid "If True, then events are passed to child. If False, the default, the children ignore events (and hence don't spend time processing them)."
msgstr ""

#: ../../source/inc/sprites:26
msgid "The methods of a Sprite object are:"
msgstr ""

#: ../../source/inc/sprites:31
msgid "Destroys this sprite, preventing it from being displayed and removing it from the SpriteManager."
msgstr ""

#: ../../source/inc/sprites:36
msgid "Changes the Displayable associated with this sprite to `d`."
msgstr ""

#: ../../source/inc/sprites:40
msgid "This displayable manages a collection of sprites, and displays them at the fastest speed possible."
msgstr ""

#: ../../source/inc/sprites:49
msgid "`update`"
msgstr ""

#: ../../source/inc/sprites:44
msgid "If not None, a function that is called each time a sprite is rendered by this sprite manager. It is called with one argument, the time in seconds since this sprite manager was first displayed.  It is expected to return the number of seconds until the function is called again, and the SpriteManager is rendered again."
msgstr ""

#: ../../source/inc/sprites:59
msgid "`event`"
msgstr ""

#: ../../source/inc/sprites:52
msgid "If not None, a function that is called when an event occurs. It takes as arguments: * A pygame event object. * The x coordinate of the event. * The y coordinate of the event. * The time since the sprite manager was first shown. If it returns a non-None value, the interaction ends, and that value is returned."
msgstr ""

#: ../../source/inc/sprites:64
msgid "`predict`"
msgstr ""

#: ../../source/inc/sprites:62
msgid "If not None, a function that returns a list of displayables. These displayables are predicted when the sprite manager is."
msgstr ""

#: ../../source/inc/sprites:72
msgid "`ignore_time`"
msgstr ""

#: ../../source/inc/sprites:67
msgid "If True, then time is ignored when rendering displayables. This should be used when the sprite manager is used with a relatively small pool of images, and those images do not change over time. This should only be used with a small number of displayables, as it will keep all displayables used in memory for the life of the SpriteManager."
msgstr ""

#: ../../source/inc/sprites:74
msgid "After being rendered once (before the `update` function is called), SpriteManagers have the following fields:"
msgstr ""

#: ../../source/inc/sprites:77
msgid "`width`, `height`"
msgstr ""

#: ../../source/inc/sprites:79
msgid "The width and height of this SpriteManager, in pixels."
msgstr ""

#: ../../source/inc/sprites:82
msgid "SpriteManagers have the following methods:"
msgstr ""

#: ../../source/inc/sprites:86
msgid "Creates a new Sprite for the displayable `d`, and adds it to this SpriteManager."
msgstr ""

#: ../../source/inc/sprites:91
msgid "Causes this SpriteManager to be redrawn in `delay` seconds."
msgstr ""

#: ../../source/inc/sprites_extra:5
msgid "The snowblossom effect moves multiple instances of a sprite up, down, left or right on the screen. When a sprite leaves the screen, it is returned to the start."
msgstr ""

#: ../../source/inc/sprites_extra:10
msgid "`d`"
msgstr ""

#: ../../source/inc/sprites_extra:10
msgid "The displayable to use for the sprites."
msgstr ""

#: ../../source/inc/sprites_extra:15
msgid "`border`"
msgstr ""

#: ../../source/inc/sprites_extra:13
msgid "The size of the border of the screen. The sprite is considered to be on the screen until it clears the border, ensuring that sprites do not disappear abruptly."
msgstr ""

#: ../../source/inc/sprites_extra:22
msgid "`xspeed`, `yspeed`"
msgstr ""

#: ../../source/inc/sprites_extra:18
msgid "The speed at which the sprites move, in the horizontal and vertical directions, respectively. These can be a single number or a tuple of two numbers. In the latter case, each particle is assigned a random speed between the two numbers. The speeds can be positive or negative, as long as the second number in a tuple is larger than the first."
msgstr ""

#: ../../source/inc/sprites_extra:27
msgid "`start`"
msgstr ""

#: ../../source/inc/sprites_extra:25
msgid "The delay, in seconds, before each particle is added. This can be allows the particles to start at the top of the screen, while not looking like a \"wave\" effect."
msgstr ""

#: ../../source/inc/sprites_extra:31
msgid "`fast`"
msgstr ""

#: ../../source/inc/sprites_extra:30
msgid "If true, particles start in the center of the screen, rather than only at the edges."
msgstr ""

#: ../../source/inc/sprites_extra:34
msgid "`horizontal`"
msgstr ""

#: ../../source/inc/sprites_extra:34
msgid "If true, particles appear on the left or right side of the screen, rather than the top or bottom."
msgstr ""

#: ../../source/sprites.rst:36
msgid "Sprite Examples"
msgstr ""

#: ../../source/sprites.rst:38
msgid "The SnowBlossom class is an easy-to use way of placing falling things on the screen."
msgstr ""

#: ../../source/sprites.rst:46
msgid "This example shows how a SpriteManager can be used to create complex behaviors. In this case, it shows 400 particles, and has them avoid the mouse."
msgstr ""

