# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-18 23:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/displayables.rst:7
msgid "Displayables"
msgstr ""

#: ../../source/displayables.rst:9
msgid "A displayable is an object that can be shown to the user. Ren'Py displayables can be used in many ways."
msgstr ""

#: ../../source/displayables.rst:12
msgid "Assignment to an image name using the ``image`` statement."
msgstr ""

#: ../../source/displayables.rst:13
msgid "Added to a screen using the screen language ``add`` statement."
msgstr ""

#: ../../source/displayables.rst:14
msgid "Assignment to certain config variables."
msgstr ""

#: ../../source/displayables.rst:15
msgid "Assignment to certain style properties."
msgstr ""

#: ../../source/displayables.rst:17
msgid "When a Ren'Py function or variable expects a displayable, there are five things that can be provided:"
msgstr ""

#: ../../source/displayables.rst:20
msgid "An object of type Displayable, created by calling one of the functions given below."
msgstr ""

#: ../../source/displayables.rst:22
msgid "A string with a colon ``:`` in it. These are rare, but see the section on :ref:`displayable prefixes <displayable-prefix>` below."
msgstr ""

#: ../../source/displayables.rst:24
msgid "A string with a dot ``.`` in it. Such a string is interpreted as a filename by :func:`Image`."
msgstr ""

#: ../../source/displayables.rst:26
msgid "A color. A color may either be given as a hexadecimal color string in \"#rgb\", \"#rgba\", \"#rrggbb\", or \"#rrggbbaa\" form, a :class:`Color`, or an (r, g, b, a) tuple, where each component is an integer between 0 and 255. Colors are passed to :func:`Solid`."
msgstr ""

#: ../../source/displayables.rst:30
msgid "An image name. Any other string is interpreted as a reference to an image defined with the image statement."
msgstr ""

#: ../../source/displayables.rst:32
msgid "A list. If a list is provided, each item is expanded as described below, and checked to see if it matches a filename or image name. If so, expansion stops and the matched thing is then processed as described above."
msgstr ""

#: ../../source/displayables.rst:37
msgid "Strings may have one or more square-bracket substitutions in them, such as \"eileen [mood]\" or \"eileen_[outfit]_[mood].png\". When such a string is given, a dynamic image is created. A dynamic image has :ref:`text interpolation <text-interpolation>` performed at the start of each interaction (such as say statements and menus). The resulting string is processed according to the rules above."
msgstr ""

#: ../../source/displayables.rst:44
msgid "When a string has \"[prefix_\"] in it, that iso replaced with each of the style prefixes associated with the current displayable."
msgstr ""

#: ../../source/displayables.rst:50
msgid "Images"
msgstr ""

#: ../../source/displayables.rst:52
msgid "The most commonly used displayable is Image, which loads a file from disk and displays it. Since Image is so commonly used, when a string giving a filename is used in a context that expects a displayable, an Image is automatically created. The only time it's necessary to use Image directly is when you want to create an image with style properties."
msgstr ""

#: ../../source/inc/im_image:5
msgid "Loads an image from a file. `filename` is a string giving the name of the file."
msgstr ""

#: ../../source/inc/im_image:8
msgid "`filename` should be a JPEG or PNG file with an appropriate extension."
msgstr ""

#: ../../source/displayables.rst:71
msgid "There are three image file formats we recommend you use:"
msgstr ""

#: ../../source/displayables.rst:73
msgid "WEBP"
msgstr ""

#: ../../source/displayables.rst:74
msgid "PNG"
msgstr ""

#: ../../source/displayables.rst:75
msgid "JPG"
msgstr ""

#: ../../source/displayables.rst:77
msgid "Non-animated GIF and BMP files are also supported, but should not be used in modern games."
msgstr ""

#: ../../source/displayables.rst:80
msgid "Loading an Image from a file on disk and decoding it so it can be drawn to the screen takes a long amount of time. While measured in the tenths or hundreds of seconds, the duration of the loading process is long enough that it can prevent an acceptable framerate, and become annoying to the user."
msgstr ""

#: ../../source/displayables.rst:86
msgid "Since an Image is of a fixed size, and doesn't change in response to input, game state, or the size of the area available to it, an Image can be loaded before it is needed and placed into an area of memory known as the image cache. Once an Image is decoded and in the cache, it can be quickly drawn to the screen."
msgstr ""

#: ../../source/displayables.rst:92
msgid "Ren'Py attempts to predict the images that will be used in the future, and loads them into the image cache before they are used. When space in the cache is needed for other images, Ren'Py will remove images that are no longer being used."
msgstr ""

#: ../../source/displayables.rst:97
msgid "By default, Ren'Py will predictively cache up to 8 screens worth of image data. (If your screen is 800x600, then a screen's worth of data is one 800x600 image, two 400x600 images, and so on.) This can be changed with the :var:`config.image_cache_size` configuration variable."
msgstr ""

#: ../../source/displayables.rst:103
msgid "Although the precise amount is dependent on implementation details and there is significant overhead, as a rule of thumb, each pixel in the image cache consumes 4 bytes of main memory and 4 bytes of video memory."
msgstr ""

#: ../../source/displayables.rst:109
msgid "Image-Like Displayables"
msgstr ""

#: ../../source/displayables.rst:111
msgid "We call these displayables image-like because they take up a rectangular area of the screen, and do not react to input.  These differ from normal images by varying their size to fill an area (Frame, LiveTile, and Solid), or by allowing the user to specify their size (LiveComposite, LiveCrop, Null). They are not image manipulators."
msgstr ""

#: ../../source/displayables.rst:117
msgid "Image-like displayables take :ref:`position-style-properties`."
msgstr ""

#: ../../source/inc/disp_imagelike:5
msgid "This displayable takes its colors from `child`, and its alpha channel from the multiplication of the alpha channels of `child` and `mask`. The result is a displayable that has the same colors as `child`, is transparent where either `child` or `mask` is transparent, and is opaque where `child` and `mask` are both opaque."
msgstr ""

#: ../../source/inc/disp_imagelike:11
msgid "The `child` and `mask` parameters may be arbitrary displayables. The size of the AlphaMask is the size of `child`."
msgstr ""

#: ../../source/inc/disp_imagelike:16
msgid "This object provides border size and tiling information to a :func:`Frame`. It can also provide padding information that can be supplied to the :propref:`padding` style property of a window or frame."
msgstr ""

#: ../../source/inc/disp_imagelike:22
msgid "`left`, `top`, `right`, `bottom`"
msgstr ""

#: ../../source/inc/disp_imagelike:21
msgid "These provide the size of the insets used by a frame, and are added to the padding on each side. They should zero or a positive integer."
msgstr ""

#: ../../source/inc/disp_imagelike:27
msgid "`pad_left`, `pad_top`, `pad_right`, `pad_bottom`"
msgstr ""

#: ../../source/inc/disp_imagelike:25
msgid "These are added to the padding on each side, and may be positive or negative. (For example, if `left` is 5 and `pad_left` is -3, the final padding is 2.)"
msgstr ""

#: ../../source/inc/disp_imagelike:29
msgid "The padding information is supplied via a field:"
msgstr ""

#: ../../source/inc/disp_imagelike:33
msgid "This is a four-element tuple containing the padding on each of the four sides."
msgstr ""

#: ../../source/inc/disp_imagelike:38
msgid "This creates a new displayable of `size`, by compositing other displayables. `size` is a (width, height) tuple."
msgstr ""

#: ../../source/inc/disp_imagelike:41
msgid "The remaining positional arguments are used to place images inside the LiveComposite. The remaining positional arguments should come in groups of two, with the first member of each group an (x, y) tuple, and the second member of a group is a displayable that is composited at that position."
msgstr ""

#: ../../source/inc/disp_imagelike:47
msgid "Displayables are composited from back to front."
msgstr ""

#: ../../source/inc/disp_imagelike:59
msgid "This creates a displayable by cropping `child` to `rect`, where `rect` is an (x, y, width, height) tuple. ::"
msgstr ""

#: ../../source/inc/disp_imagelike:66
msgid "A DynamicImage is a displayable that has text interpolation performed on it to yield a string giving a new displayable. Such interpolation is performed at the start of each interaction."
msgstr ""

#: ../../source/inc/disp_imagelike:72
msgid "This flattens `child`, which may be made up of multiple textures, into a single texture."
msgstr ""

#: ../../source/inc/disp_imagelike:75
msgid "Certain operations, like the alpha transform property, apply to every texture making up a displayable, which can yield incorrect results when the textures overlap on screen. Flatten creates a single texture from multiple textures, which can prevent this problem."
msgstr ""

#: ../../source/inc/disp_imagelike:80
msgid "Flatten is a relatively expensive operation, and so should only be used when absolutely required."
msgstr ""

#: ../../source/inc/disp_imagelike:85
msgid "A displayable that resizes an image to fill the available area, while preserving the width and height of its borders. It is often used as the background of a window or button."
msgstr ""

#: ../../source/inc/disp_imagelike:91
msgid "Using a frame to resize an image to double its size."
msgstr ""

#: ../../source/inc/disp_imagelike:94
msgid "`image`"
msgstr ""

#: ../../source/inc/disp_imagelike:94
msgid "An image manipulator that will be resized by this frame."
msgstr ""

#: ../../source/inc/disp_imagelike:99
msgid "`left`"
msgstr ""

#: ../../source/inc/disp_imagelike:97
msgid "The size of the border on the left side. This can also be a :func:`Borders` object, in which case that object is used in place of the other parameters."
msgstr ""

#: ../../source/inc/disp_imagelike:102
msgid "`top`"
msgstr ""

#: ../../source/inc/disp_imagelike:102
msgid "The size of the border on the top."
msgstr ""

#: ../../source/inc/disp_imagelike:106
msgid "`right`"
msgstr ""

#: ../../source/inc/disp_imagelike:105
msgid "The size of the border on the right side. If None, defaults to `left`."
msgstr ""

#: ../../source/inc/disp_imagelike:109
msgid "`bottom`"
msgstr ""

#: ../../source/inc/disp_imagelike:109
msgid "The side of the border on the bottom. If None, defaults to `top`."
msgstr ""

#: ../../source/inc/disp_imagelike:115
msgid "`tile`"
msgstr ""

#: ../../source/inc/disp_imagelike:112
msgid "If set to True, tiling is used to resize sections of the image, rather than scaling. If set to the string \"integer\", the nearest integer number of tiles will be used in each direction. That set of full tiles will then be scaled up or down to fit the required area."
msgstr ""

#: ../../source/inc/disp_imagelike:126
msgid "A displayable that creates an empty box on the screen. The size of the box is controlled by `width` and `height`. This can be used when a displayable requires a child, but no child is suitable, or as a spacer inside a box."
msgstr ""

#: ../../source/inc/disp_imagelike:137
msgid "A displayable that fills the area its assigned with `color`."
msgstr ""

#: ../../source/inc/disp_imagelike:145
msgid "Tiles `child` until it fills the area allocated to this displayable."
msgstr ""

#: ../../source/displayables.rst:122
msgid "Text Displayables"
msgstr ""

#: ../../source/displayables.rst:124
msgid "See :ref:`text-displayables`."
msgstr ""

#: ../../source/displayables.rst:128
msgid "Dynamic Displayables"
msgstr ""

#: ../../source/displayables.rst:130
msgid "Dynamic displayables display a child displayable based on the state of the game. They do not take any properties, as their layout is controlled by the properties of the child displayable they return."
msgstr ""

#: ../../source/displayables.rst:134
msgid "Note that these dynamic displayables always display their current state. Because of this, a dynamic displayable will not participate in a transition. (Or more precisely, it will display the same thing in both the old and new states of the transition.)"
msgstr ""

#: ../../source/displayables.rst:139
msgid "By design, dynamic displayables are intended to be used for things that change rarely and when an image define this way is off screen (Such as a character customization system), and not for things that change frequently, such as character emotions."
msgstr ""

#: ../../source/inc/disp_dynamic:5
msgid "This is a displayable that changes what it is showing based on Python conditions. The positional arguments should be given in groups of two, where each group consists of:"
msgstr ""

#: ../../source/inc/disp_dynamic:9
msgid "A string containing a Python condition."
msgstr ""

#: ../../source/inc/disp_dynamic:10
#: ../../source/inc/disp_dynamic:75
msgid "A displayable to use if the condition is true."
msgstr ""

#: ../../source/inc/disp_dynamic:12
msgid "The first true condition has its displayable shown, at least one condition should always be true."
msgstr ""

#: ../../source/inc/disp_dynamic:15
msgid "The conditions uses here should not have externally-visible side-effects."
msgstr ""

#: ../../source/inc/disp_dynamic:21
#: ../../source/inc/disp_dynamic:83
msgid "`predict_all`"
msgstr ""

#: ../../source/inc/disp_dynamic:18
#: ../../source/inc/disp_dynamic:80
msgid "If True, all of the possible displayables will be predicted when the displayable is shown. If False, only the current condition is predicted. If None, :var:`config.conditionswitch_predict_all` is used."
msgstr ""

#: ../../source/inc/disp_dynamic:31
msgid "A displayable that can change its child based on a Python function, over the course of an interaction."
msgstr ""

#: ../../source/inc/disp_dynamic:48
msgid "`function`"
msgstr ""

#: ../../source/inc/disp_dynamic:35
msgid "A function that is called with the arguments:"
msgstr ""

#: ../../source/inc/disp_dynamic:37
msgid "The amount of time the displayable has been shown for."
msgstr ""

#: ../../source/inc/disp_dynamic:38
msgid "The amount of time any displayable with the same tag has been shown for."
msgstr ""

#: ../../source/inc/disp_dynamic:39
msgid "Any positional or keyword arguments supplied to DynamicDisplayable."
msgstr ""

#: ../../source/inc/disp_dynamic:41
msgid "and should return a (d, redraw) tuple, where:"
msgstr ""

#: ../../source/inc/disp_dynamic:43
msgid "`d` is a displayable to show."
msgstr ""

#: ../../source/inc/disp_dynamic:44
msgid "`redraw` is the amount of time to wait before calling the function again, or None to not call the function again before the start of the next interaction."
msgstr ""

#: ../../source/inc/disp_dynamic:48
msgid "`function` is called at the start of every interaction."
msgstr ""

#: ../../source/inc/disp_dynamic:50
msgid "As a special case, `function` may also be a python string that evaluates to a displayable. In that case, function is run once per interaction."
msgstr ""

#: ../../source/inc/disp_dynamic:70
msgid "This is a displayable that changes what it is showing based on the images are showing on the screen. The positional argument should be given in groups of two, where each group consists of:"
msgstr ""

#: ../../source/inc/disp_dynamic:74
msgid "A string giving an image name, or None to indicate the default."
msgstr ""

#: ../../source/inc/disp_dynamic:77
msgid "A default image should be specified."
msgstr ""

#: ../../source/inc/disp_dynamic:85
msgid "One use of ShowingSwitch is to have side images change depending on the current emotion of a character. For example::"
msgstr ""

#: ../../source/displayables.rst:148
msgid "Applying Transforms to Displayables"
msgstr ""

#: ../../source/displayables.rst:150
msgid "The At function produces a displayable from a displayable and one or more :ref:`transforms <transforms>`."
msgstr ""

#: ../../source/inc/disp_at:5
msgid "Given a displayable `d`, applies each of the transforms in `args` to it. The transforms are applied in left-to-right order, so that the outermost transform is the rightmost argument. ::"
msgstr ""

#: ../../source/displayables.rst:157
msgid "Layout Boxes and Grids"
msgstr ""

#: ../../source/displayables.rst:159
msgid "Layout boxes are displayables that lay out their children on the screen. They can lay out the children in a horizontal or vertical manner, or lay them out using the standard positioning algorithm."
msgstr ""

#: ../../source/displayables.rst:163
msgid "The box displayables take any number of positional and keyword arguments. Positional arguments should be displayables that are added to the box as children. Keyword arguments are style properties that are applied to the box."
msgstr ""

#: ../../source/displayables.rst:168
msgid "Boxes take :ref:`position-style-properties` and :ref:`box-style-properties`."
msgstr ""

#: ../../source/inc/disp_box:5
msgid "A box that fills the screen. Its members are laid out from back to front, with their position properties controlling their position."
msgstr ""

#: ../../source/inc/disp_box:11
msgid "A box that lays out its members from left to right."
msgstr ""

#: ../../source/inc/disp_box:15
msgid "A layout that lays out its members from top to bottom."
msgstr ""

#: ../../source/displayables.rst:188
msgid "The Grid layout displays its children in a grid on the screen. It takes :ref:`position-style-properties` and the :propref:`spacing` style property."
msgstr ""

#: ../../source/inc/disp_grid:5
msgid "Lays out displayables in a grid. The first two positional arguments are the number of columns and rows in the grid. This must be followed by `columns * rows` positional arguments giving the displayables that fill the grid."
msgstr ""

#: ../../source/displayables.rst:195
msgid "Effects"
msgstr ""

#: ../../source/displayables.rst:197
msgid "These displayables are used to create certain visual effects."
msgstr ""

#: ../../source/inc/disp_effects:5
msgid "This transition uses a `control` displayable (almost always some sort of animated transform) to transition from one displayable to another. The transform is evaluated. The `new` displayable is used where the transform is opaque, and the `old` displayable is used when it is transparent."
msgstr ""

#: ../../source/inc/disp_effects:11
msgid "`alpha`"
msgstr ""

#: ../../source/inc/disp_effects:11
msgid "If true, the image is composited with what's behind it. If false, the default, the image is opaque and overwrites what's behind it."
msgstr ""

#: ../../source/displayables.rst:202
msgid "Image Manipulators"
msgstr ""

#: ../../source/displayables.rst:204
msgid "An image manipulator is a displayable that takes an image or image manipulator, and either loads it or performs an operation on it. Image manipulators can only take images or other image manipulators as input."
msgstr ""

#: ../../source/displayables.rst:209
msgid "An image manipulator can be used any place a displayable can, but not vice-versa. An :func:`Image` is a kind of image manipulator, so an Image can be used whenever an image manipulator is required."
msgstr ""

#: ../../source/displayables.rst:213
msgid "With the few exceptions listed below, the use of image manipulators is historic. A number of image manipulators that had been documented in the past should no longer be used, as they suffer from inherent problems. In many cases, the :func:`Transform` displayable provides similar functionality in a more general manner, while fixing the problems."
msgstr ""

#: ../../source/inc/im_im:5
msgid "An image manipulator that takes two image manipulators, `base` and `mask`, as arguments. It replaces the alpha channel of `base` with the red channel of `mask`."
msgstr ""

#: ../../source/inc/im_im:9
msgid "This is used to provide an image's alpha channel in a second image, like having one jpeg for color data, and a second one for alpha. In some cases, two jpegs can be smaller than a single png file."
msgstr ""

#: ../../source/inc/im_im:14
msgid "Note that this takes different arguments from :func:`AlphaMask`, which uses the mask's alpha channel."
msgstr ""

#: ../../source/inc/im_im:19
msgid "An image manipulator that blurs the image manipulator `im` using an elliptical kernel described by `xrad` and optionally `yrad`."
msgstr ""

#: ../../source/inc/im_im:22
msgid "If `yrad` is None, it will take the value of `xrad` resulting in a circular kernel being used."
msgstr ""

#: ../../source/inc/im_im:31
msgid "An image manipulator that crops `rect`, a (x, y, width, height) tuple, out of `im`, an image manipulator."
msgstr ""

#: ../../source/inc/im_im:40
msgid "This image manipulator loads an image from binary data."
msgstr ""

#: ../../source/inc/im_im:44
msgid "`data`"
msgstr ""

#: ../../source/inc/im_im:43
msgid "A string of bytes, giving the compressed image data in a standard file format."
msgstr ""

#: ../../source/inc/im_im:48
msgid "`filename`"
msgstr ""

#: ../../source/inc/im_im:47
msgid "A \"filename\" associated with the image. This is used to provide a hint to Ren'Py about the format of `data`. (It's not actually loaded from disk.)"
msgstr ""

#: ../../source/inc/im_im:53
msgid "An image manipulator that scales `im` (a second image manipulator) to `width` times its original `width`, and `height` times its original height. If `height` is omitted, it defaults to `width`."
msgstr ""

#: ../../source/inc/im_im:57
msgid "If `bilinear` is true, then bilinear interpolation is used for the scaling. Otherwise, nearest neighbor interpolation is used."
msgstr ""

#: ../../source/inc/im_im:66
msgid "An image manipulator that flips `im` (an image manipulator) vertically or horizontally.  `vertical` and `horizontal` control the directions in which the image is flipped."
msgstr ""

#: ../../source/inc/im_im:76
msgid "An image manipulator that creates a desaturated version of the image manipulator `im`."
msgstr ""

#: ../../source/inc/im_im:81
msgid "An image manipulator that creates a sepia-toned version of the image manipulator `im`."
msgstr ""

#: ../../source/inc/im_im:86
msgid "An image manipulator that tiles the image manipulator `im`, until it is `size`."
msgstr ""

#: ../../source/inc/im_im:90
msgid "`size`"
msgstr ""

#: ../../source/inc/im_im:90
msgid "If not None, a (width, height) tuple. If None, this defaults to (:var:`config.screen_width`, :var:`config.screen_height`)."
msgstr ""

#: ../../source/displayables.rst:222
msgid "im.MatrixColor"
msgstr ""

#: ../../source/displayables.rst:224
msgid "The im.MatrixColor image manipulator is an image manipulator that uses a matrix to control how the colors of an image are transformed. The matrix used can be an im.matrix object, which encodes a 5x5 matrix in an object that supports matrix multiplication, and is returned by a series of functions. im.matrix objects may be multiplied together to yield a second object that performs both operations. For example::"
msgstr ""

#: ../../source/displayables.rst:235
msgid "first desaturates the image, and then tints it blue. When the intermediate image is not needed, multiplying matrices is far more efficient, in both time and image cache space, than using two im.MatrixColors."
msgstr ""

#: ../../source/inc/im_matrixcolor:5
msgid "An image operator that uses `matrix` to linearly transform the image manipulator `im`."
msgstr ""

#: ../../source/inc/im_matrixcolor:8
msgid "`Matrix` should be a list, tuple, or :func:`im.matrix` that is 20 or 25 elements long. If the object has 25 elements, then elements past the 20th are ignored."
msgstr ""

#: ../../source/inc/im_matrixcolor:12
msgid "When the four components of the source color are R, G, B, and A, which range from 0.0 to 1.0; the four components of the transformed color are R', G', B', and A', with the same range; and the elements of the matrix are named::"
msgstr ""

#: ../../source/inc/im_matrixcolor:22
msgid "the transformed colors can be computed with the formula::"
msgstr ""

#: ../../source/inc/im_matrixcolor:29
msgid "The components of the transformed color are clamped to the range [0.0, 1.0]."
msgstr ""

#: ../../source/inc/im_matrixcolor:34
msgid "Constructs an im.matrix object from `matrix`. im.matrix objects support The operations supported are matrix multiplication, scalar multiplication, element-wise addition, and element-wise subtraction. These operations are invoked using the standard mathematical operators (\\*, \\*, +, and -, respectively). If two im.matrix objects are multiplied, matrix multiplication is performed, otherwise scalar multiplication is used."
msgstr ""

#: ../../source/inc/im_matrixcolor:42
msgid "`matrix` is a 20 or 25 element list or tuple. If it is 20 elements long, it is padded with (0, 0, 0, 0, 1) to make a 5x5 matrix, suitable for multiplication."
msgstr ""

#: ../../source/inc/im_matrixcolor:48
msgid "Returns an im.matrix that alters the brightness of an image."
msgstr ""

#: ../../source/inc/im_matrixcolor:52
msgid "`b`"
msgstr ""

#: ../../source/inc/im_matrixcolor:51
msgid "The amount of change in image brightness. This should be a number between -1 and 1, with -1 the darkest possible image and 1 the brightest."
msgstr ""

#: ../../source/inc/im_matrixcolor:57
msgid "Returns an im.matrix that colorizes a black and white image. `black_color` and `white_color` are Ren'Py style colors, so they may be specified as strings or tuples of (0-255) color values. ::"
msgstr ""

#: ../../source/inc/im_matrixcolor:69
msgid "Returns an im.matrix that alters the contrast of an image. `c` should be greater than 0.0, with values between 0.0 and 1.0 decreasing contrast, and values greater than 1.0 increasing contrast."
msgstr ""

#: ../../source/inc/im_matrixcolor:75
msgid "Returns an im.matrix that desaturates the image (makes it grayscale). This is equivalent to calling im.matrix.saturation(0)."
msgstr ""

#: ../../source/inc/im_matrixcolor:81
msgid "Returns an im.matrix that rotates the hue by `h` degrees, while preserving luminosity."
msgstr ""

#: ../../source/inc/im_matrixcolor:86
msgid "Returns an identity matrix, one that does not change color or alpha."
msgstr ""

#: ../../source/inc/im_matrixcolor:91
msgid "Returns an im.matrix that inverts the red, green, and blue channels of the image without changing the alpha channel."
msgstr ""

#: ../../source/inc/im_matrixcolor:96
msgid "Returns an im.matrix that alters the opacity of an image. An `o` of 0.0 is fully transparent, while 1.0 is fully opaque."
msgstr ""

#: ../../source/inc/im_matrixcolor:101
msgid "Returns an im.matrix that alters the saturation of an image. The alpha channel is untouched."
msgstr ""

#: ../../source/inc/im_matrixcolor:106
msgid "`level`"
msgstr ""

#: ../../source/inc/im_matrixcolor:105
msgid "The amount of saturation in the resulting image. 1.0 is the unaltered image, while 0.0 is grayscale."
msgstr ""

#: ../../source/inc/im_matrixcolor:114
msgid "`desat`"
msgstr ""

#: ../../source/inc/im_matrixcolor:109
msgid "This is a 3-element tuple that controls how much of the red, green, and blue channels will be placed into all three channels of a fully desaturated image. The default is based on the constants used for the luminance channel of an NTSC television signal. Since the human eye is mostly sensitive to green, more of the green channel is kept then the other two channels."
msgstr ""

#: ../../source/inc/im_matrixcolor:119
msgid "Returns an im.matrix that tints an image, without changing the alpha channel. `r`, `g`, and `b` should be numbers between 0 and 1, and control what fraction of the given channel is placed into the final image. (For example, if `r` is .5, and the value of the red channel is 100, the transformed color will have a red value of 50.)"
msgstr ""

#: ../../source/displayables.rst:243
msgid "Placeholders"
msgstr ""

#: ../../source/displayables.rst:245
msgid "The Placeholder displayable is used to display background or character images as appropriate. Placeholders are used automatically when an undefined image is used in developer mode. Placeholder displayables can also be used manually when the defaults are inappropriate. ::"
msgstr ""

#: ../../source/inc/placeholder:5
msgid "This displayable can be used to display a placeholder character or background."
msgstr ""

#: ../../source/inc/placeholder:34
msgid "`base`"
msgstr ""

#: ../../source/inc/placeholder:9
msgid "The type of image to display. This should be one of:"
msgstr ""

#: ../../source/inc/placeholder:14
msgid "'bg'"
msgstr ""

#: ../../source/inc/placeholder:12
msgid "To display a background placeholder. This currently fills the screen with a light-gray, and displays the image name at the top of the screen."
msgstr ""

#: ../../source/inc/placeholder:18
msgid "'boy'"
msgstr ""

#: ../../source/inc/placeholder:17
msgid "Displays a male-identified placeholder with the image name on his chest."
msgstr ""

#: ../../source/inc/placeholder:22
msgid "'girl'"
msgstr ""

#: ../../source/inc/placeholder:21
msgid "Displays a female-identified placeholder with the image name on her chest."
msgstr ""

#: ../../source/inc/placeholder:34
msgid "None"
msgstr ""

#: ../../source/inc/placeholder:25
msgid "Attempts to automatically determine the type of image to use. If the image name begins with \"bg\", \"cg\", or \"event\", uses 'bg'."
msgstr ""

#: ../../source/inc/placeholder:29
msgid "Otherwise, contacts a web service to guess gender from the character's name, and uses that. (The 'girl' placeholder is used when the service can't guess.)"
msgstr ""

#: ../../source/inc/placeholder:33
msgid "The webservice will only be contacted when :var:`config.developer` is True."
msgstr ""

#: ../../source/inc/placeholder:38
msgid "`full`"
msgstr ""

#: ../../source/inc/placeholder:37
msgid "If true, a full-body sprite is used. Otherwise, a 3/4 sprite is used."
msgstr ""

#: ../../source/inc/placeholder:40
msgid "`flip`"
msgstr ""

#: ../../source/inc/placeholder:41
msgid "If true, the sprite is flipped horizontally."
msgstr ""

#: ../../source/displayables.rst:262
msgid "Displayable Prefixes"
msgstr ""

#: ../../source/displayables.rst:264
msgid "Displayable prefixes make it possible for a creator to define their own displayables, and refer to them anywhere a displayable can be used in Ren'Py. A prefixed displayable is a string with a colon in it. The prefix is to the left of the colon, and the argument is anything to the right of it. The :var:`config.displayable_prefix` variable maps a prefix to a function. The function takes the argument, and either returns a displayable or None."
msgstr ""

#: ../../source/displayables.rst:271
msgid "For example, this makes the big prefix return an image that is twice as big as the original. ::"
msgstr ""

#: ../../source/displayables.rst:280
msgid "The ``init -10`` makes sure the prefix is defined before any images that use it. The prefix can then be used to define images::"
msgstr ""

#: ../../source/displayables.rst:285
msgid "or in any other place where a displayable is required."
msgstr ""

