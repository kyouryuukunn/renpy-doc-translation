# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2020, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-18 23:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/translation.rst:8
msgid "Translation"
msgstr ""

#: ../../source/translation.rst:10
msgid "Ren'Py contains a comprehensive framework for the translation of visual novels. There are four main types of things that can be translated:"
msgstr ""

#: ../../source/translation.rst:16
msgid "Dialogue"
msgstr ""

#: ../../source/translation.rst:15
msgid "The main dialogue of the script can be translated, including a provision for splitting, combining, omitting, and reordering lines."
msgstr ""

#: ../../source/translation.rst:18
msgid "Menus and Interface Strings"
msgstr ""

#: ../../source/translation.rst:19
msgid "All interface text can be translated."
msgstr ""

#: ../../source/translation.rst:21
msgid "Images and Files"
msgstr ""

#: ../../source/translation.rst:21
msgid "It's possible to include variant images and other files that are used when a language is selected."
msgstr ""

#: ../../source/translation.rst:26
msgid "Styles"
msgstr ""

#: ../../source/translation.rst:24
msgid "It's possible to customize styles based on the language, so that the game can automatically switch to a font appropriate for the language that was chosen."
msgstr ""

#: ../../source/translation.rst:28
msgid "Ren'Py's translation support is currently focused on sanctioned translations, where the game's creators either release the game scripts to the translator or create translation templates themselves. Support for unsanctioned translations is more limited."
msgstr ""

#: ../../source/translation.rst:34
msgid "Primary and Alternate Languages"
msgstr ""

#: ../../source/translation.rst:36
msgid "Ren'Py expects each game to be written in a single primary language. This is called the None language, regardless of what language it actually is. (For example, if the game was written in English, English will be the None language.)"
msgstr ""

#: ../../source/translation.rst:41
msgid "When the None language is selected, most of Ren'Py's translation functionality is disabled."
msgstr ""

#: ../../source/translation.rst:44
msgid "Alternate languages are referred to by names which can double as Python identifiers (starts with a letter or underscore, followed by letters, numbers, and underscores)."
msgstr ""

#: ../../source/translation.rst:49
msgid "Generating Translation Files"
msgstr ""

#: ../../source/translation.rst:51
msgid "When the project scripts are available, translation files can be generated by opening the project in the Ren'Py Launcher, and choosing \"Generate Translations\". The launcher will prompt you for the name of the language to generate, and will then proceed to create or update the translation files."
msgstr ""

#: ../../source/translation.rst:57
msgid "The translation files live in directories underneath the \"tl\" subdirectory of the game directory. For example, if you create a piglatin translation of the tutorial project, translation files will be placed under ``tutorial/game/tl/piglatin``."
msgstr ""

#: ../../source/translation.rst:62
msgid "There will be one translation file created per game script file. The common.rpy file will also be created to contain translations of strings that are common to all games made using Ren'Py."
msgstr ""

#: ../../source/translation.rst:67
msgid "Translating Dialogue"
msgstr ""

#: ../../source/translation.rst:69
msgid "As Ren'Py is a visual novel engine, we expect most translation to involve dialogue. Ren'Py includes a flexible framework that allows dialogue to be split, combined, reordered, and omitted entirely."
msgstr ""

#: ../../source/translation.rst:74
msgid "Translation Units"
msgstr ""

#: ../../source/translation.rst:76
msgid "The fundamental unit of translation is a block of zero or more translatable statements, optionally followed by a single say statement. Translatable statements are the voice and nvl statements. For example, take the following game::"
msgstr ""

#: ../../source/translation.rst:90
msgid "This is broken up into multiple translation units. Each unit has an identifier assigned to it, with the identifier being generated from the label preceding the unit, and the statements inside the unit. (If multiple units would be assigned the same translation number, a serial number to the second and later units to distinguish them.)"
msgstr ""

#: ../../source/translation.rst:96
msgid "In the example above, the first unit generated is assigned the identifier start_636ae3f5, and contains the statement::"
msgstr ""

#: ../../source/translation.rst:101
msgid "The second unit is given the identifier start_bd1ad9e1m and contains::"
msgstr ""

#: ../../source/translation.rst:105
msgid "The third unit has the identifier start_9e949aac, and contains::"
msgstr ""

#: ../../source/translation.rst:109
msgid "These units are created automatically by Ren'Py when the game script is loaded."
msgstr ""

#: ../../source/translation.rst:113
msgid "Translate Statement"
msgstr ""

#: ../../source/translation.rst:115
msgid "When you generate translations for a language, Ren'Py will generate a translate statement corresponding to each translation unit. When translating the script above, Ren'Py will generate::"
msgstr ""

#: ../../source/translation.rst:137
msgid "This can be translated by editing the generated files. A finished translation might look like::"
msgstr ""

#: ../../source/translation.rst:158
msgid "When a block in the main script is encountered, Ren'Py checks to see if a translate statement corresponding to that block exists. If so, it executes the translate statement instead of the translated block, showing the user the translation."
msgstr ""

#: ../../source/translation.rst:164
msgid "More Complex Translations"
msgstr ""

#: ../../source/translation.rst:166
msgid "Translate statements do not need to contain 1-to-1 translations of the original language. For example, a long line could be split::"
msgstr ""

#: ../../source/translation.rst:176
msgid "Or a statement can be removed, by replacing it with the ``pass`` statement::"
msgstr ""

#: ../../source/translation.rst:184
msgid "It's also possible to run non-dialogue statements, such as conditionals or Python. For example, we can translate::"
msgstr ""

#: ../../source/translation.rst:189
msgid "into::"
msgstr ""

#: ../../source/translation.rst:200
msgid "Tips"
msgstr ""

#: ../../source/translation.rst:202
msgid "Be very careful when changing dialogue that has been translated, especially when that dialogue is repeated in more than one place inside a label. In some cases, it may be necessary to assign a translation identifier directly, using a statement like::"
msgstr ""

#: ../../source/translation.rst:210
msgid "Adding labels can also confuse the translation process. To prevent this, labels that are given the ``hide`` clause are ignored when generating translations.::"
msgstr ""

#: ../../source/translation.rst:217
msgid "While translation blocks may include Python, this Python should not have side effects visible outside of the block. That's because changing languages will restart the translation block, causing the side effects to occur multiple times."
msgstr ""

#: ../../source/translation.rst:225
msgid "Menu and String Translations"
msgstr ""

#: ../../source/translation.rst:227
msgid "In addition to dialogue, Ren'Py is able to translate text found in menus and other strings. Interface translations are a 1-to-1 substitution. Wherever a string is found, it will be replaced by a single replacement."
msgstr ""

#: ../../source/translation.rst:232
msgid "When generating translations, Ren'Py will scan the script files for menus, and for strings enclosed inside the ``_()`` function. It will then place the strings inside a ``translate strings`` block. For example, if we have the following script::"
msgstr ""

#: ../../source/translation.rst:249
msgid "Ren'Py will generate::"
msgstr ""

#: ../../source/translation.rst:262
msgid "Which can then be translated::"
msgstr ""

#: ../../source/translation.rst:275
msgid "String translations are also applied to dialogue strings that are not translated as dialogue."
msgstr ""

#: ../../source/translation.rst:278
msgid "When the same string is used in multiple places, the string can be distinguished using the {#...} text tag. Even though they display the same, Ren'Py considers all of these distinct strings for the purpose of translation::"
msgstr ""

#: ../../source/translation.rst:288
msgid "The ``translate strings`` statement can also be used to translate the None language. This can be used to when the game is written in a non-English language, to translate the Ren'Py user interface. ::"
msgstr ""

#: ../../source/translation.rst:297
msgid "Translating Substitutions"
msgstr ""

#: ../../source/translation.rst:299
msgid "String substitutions can be translated using the ``!t`` conversion flag. So the following will be translatable using a combination of the dialogue and string translation systems::"
msgstr ""

#: ../../source/translation.rst:313
msgid "Extracting and Merging String Translations"
msgstr ""

#: ../../source/translation.rst:315
msgid "String translations can be extracted from one project, and moved to another. This is a multiple-step process:"
msgstr ""

#: ../../source/translation.rst:318
msgid "Select the source project, and choose \"Generate Translations\"."
msgstr ""

#: ../../source/translation.rst:319
msgid "Enter the language to extract, and click \"Extract String Translations\"."
msgstr ""

#: ../../source/translation.rst:320
msgid "Return to the main menu, select the target project, and choose \"Generate Translations\"."
msgstr ""

#: ../../source/translation.rst:321
msgid "Enter the language to merge to (often the same language), and choose \"Merge String Translations\"."
msgstr ""

#: ../../source/translation.rst:323
msgid "There are a couple of options that control merging:"
msgstr ""

#: ../../source/translation.rst:329
msgid "Replace existing translations"
msgstr ""

#: ../../source/translation.rst:326
msgid "When checked, this will cause non-trivial existing translations (those that are not empty or the source string) to be replaced. By default, merging will refuse to overwrite non-trivial translations that already exist."
msgstr ""

#: ../../source/translation.rst:334
msgid "Reverse languages"
msgstr ""

#: ../../source/translation.rst:332
msgid "Reverses the strings before merging. This can be used, for example, to use a set of English -> Russian translations to create a Russian -> English translation."
msgstr ""

#: ../../source/translation.rst:337
msgid "Image and File Translations"
msgstr ""

#: ../../source/translation.rst:339
msgid "When translating a game, it may be necessary to replace a file with a translate version. For example, if an image contains text, it might make sense to replace it with a version of the image where the text is in another language."
msgstr ""

#: ../../source/translation.rst:344
msgid "Ren'Py handles this by looking in the translation directory for the image. For example, if the \"piglatin\" language is in use, and \"library.png\" is loaded, Ren'Py will use \"game/tl/piglatin/library.png\" in preference to \"game/library.png\"."
msgstr ""

#: ../../source/translation.rst:351
msgid "Style Translations"
msgstr ""

#: ../../source/translation.rst:353
msgid "It may be necessary to change styles – especially font-related styles – when translating a game. Ren'Py handles this with ``translate style`` blocks and ``translate python`` blocks. These blocks can change language-related variables and styles. For example::"
msgstr ""

#: ../../source/translation.rst:361
msgid "or equivalently::"
msgstr ""

#: ../../source/translation.rst:366
msgid "When a language is activated – either at the start of the game, or after a language change – Ren'Py resets the styles to their contents at the end of the init phase. It then runs all ``translate python`` blocks and translate style blocks associated with the current language, guaranteeing that blocks appearing earlier in a file are executed first. Finally, it rebuilds styles, allowing the changes to take effect."
msgstr ""

#: ../../source/translation.rst:373
msgid "Style translations may be added to any .rpy file."
msgstr ""

#: ../../source/translation.rst:377
msgid "Default Language"
msgstr ""

#: ../../source/translation.rst:379
msgid "The default language is chosen using the following method:"
msgstr ""

#: ../../source/translation.rst:381
msgid "If the RENPY_LANGUAGE environment variable is set, that language is used."
msgstr ""

#: ../../source/translation.rst:383
msgid "If :var:`config.language` is set, that language is used."
msgstr ""

#: ../../source/translation.rst:384
msgid "If the game has ever chosen a language in the past, that language is used."
msgstr ""

#: ../../source/translation.rst:386
msgid "If this is the first time the game has been run and :var:`config.enable_language_autodetect` is True, Ren'Py tries to autodetect the language using :var:`config.locale_to_language_function`."
msgstr ""

#: ../../source/translation.rst:389
msgid "If this is the first time the game has been run, :var:`config.default_language` is used. (This defaults to the None language.)"
msgstr ""

#: ../../source/translation.rst:392
msgid "Otherwise, the None language is used."
msgstr ""

#: ../../source/translation.rst:395
msgid "Translation Actions, Functions, and Variables"
msgstr ""

#: ../../source/translation.rst:397
msgid "The main way to switch languages is with the Language action."
msgstr ""

#: ../../source/inc/language_action:5
msgid "Changes the language of the game to `language`."
msgstr ""

#: ../../source/inc/language_action:8
msgid "`language`"
msgstr ""

#: ../../source/inc/language_action:8
msgid "A string giving the language to translate to, or None to use the default language of the game script."
msgstr ""

#: ../../source/translation.rst:401
msgid "The Language action can be used to add a language preference to the preferences screen::"
msgstr ""

#: ../../source/translation.rst:412
msgid "There are two translation-related functions:"
msgstr ""

#: ../../source/inc/translation_functions:5
msgid "Changes the current language to `language`, which can be a string or None to use the default language."
msgstr ""

#: ../../source/inc/translation_functions:10
msgid "Returns the set of known languages. This does not include the default language, None."
msgstr ""

#: ../../source/translation.rst:416
msgid "In addition, there are four functions that are related to string translation:"
msgstr ""

#: ../../source/translation.rst:421
msgid "(Single underscore) Returns `s` unchanged. Ren'Py will scan for strings enclosed in this function, and add them to the list of translatable strings. The strings will not be translated until they are displayed."
msgstr ""

#: ../../source/translation.rst:428
msgid "(Double underscore) Returns `s` immediately translated into the current language. Strings enclosed in this function will be added to the list of translatable strings. Note that the string may be double-translated, if it matches a string translation when it is displayed."
msgstr ""

#: ../../source/inc/underscore_p:5
msgid "Reformats a string and flags it as translatable. The string will be translated when displayed by the text displayable. This is intended to define multi-line for use in strings, of the form::"
msgstr ""

#: ../../source/inc/underscore_p:16
msgid "The reformatting is done by breaking the text up into lines, removing whitespace from the start and end of each line. Blank lines are removed at the end. When there is a blank line, a blank line is inserted to separate paragraphs. The {p} tag breaks a line, but doesn't add a blank one."
msgstr ""

#: ../../source/inc/underscore_p:22
msgid "This can be used in a string translation, using the construct::"
msgstr ""

#: ../../source/translation.rst:438
msgid "There are two language-related variables. One is :var:`config.language`, which is used to change the default language of the game."
msgstr ""

#: ../../source/translation.rst:444
msgid "The name of the current language, or None if the default language is being used. This should be treated as a read-only variable. To change the language, call :func:`renpy.change_language`."
msgstr ""

#: ../../source/translation.rst:452
msgid "Unsanctioned Translations"
msgstr ""

#: ../../source/translation.rst:456
msgid "It's best to ask a game's creators for permission before creating an unsanctioned translation."
msgstr ""

#: ../../source/translation.rst:459
msgid "Ren'Py includes a small amount of support for creating translations without the active assistance of the game's creators. This support consists of the ability to automatically create a string translation file from all of the strings in the game. Since string translations are used for untranslated dialogue, this technique makes it possible to translate a game."
msgstr ""

#: ../../source/translation.rst:466
msgid "To create a string translation file, perform the following steps:"
msgstr ""

#: ../../source/translation.rst:468
msgid "Set the RENPY_LANGUAGE environment variable to the language you want to translate to."
msgstr ""

#: ../../source/translation.rst:470
msgid "Set the RENPY_UPDATE_STRINGS environment variable to a non-empty value."
msgstr ""

#: ../../source/translation.rst:472
msgid "Play through the game until all text is seen."
msgstr ""

#: ../../source/translation.rst:474
msgid "This will update the \"game/tl/language/strings.rpy\" file with a translation template that contains all of the strings in it."
msgstr ""

#: ../../source/translation.rst:477
msgid "If a game doesn't include support for changing the language, it may be appropriate to use an ``init python`` block to set :var:`config.language` to the target language."
msgstr ""

#: ../../source/translation.rst:481
msgid "Along with the use of string translations for dialogue, unsanctioned translators may be interested in using the techniques described above to translate images and styles."
msgstr ""

